namespace Clarity {
  public static partial class ColumnDefinitionExtensions {
    public static Xamarin.Forms.ColumnDefinition Width(this Xamarin.Forms.ColumnDefinition obj, Xamarin.Forms.GridLength value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ColumnDefinition.WidthProperty, value);
    public static Xamarin.Forms.ColumnDefinition Width(this Xamarin.Forms.ColumnDefinition obj, BindableValue<Xamarin.Forms.GridLength> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ColumnDefinition.WidthProperty, value, mode);
    public static Xamarin.Forms.ColumnDefinition Width<TFrom>(this Xamarin.Forms.ColumnDefinition obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.GridLength> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ColumnDefinition.WidthProperty, value, selector);
    public static Xamarin.Forms.ColumnDefinition BindingContext(this Xamarin.Forms.ColumnDefinition obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ColumnDefinition.BindingContextProperty, value);
    public static Xamarin.Forms.ColumnDefinition BindingContext(this Xamarin.Forms.ColumnDefinition obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ColumnDefinition.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ColumnDefinition BindingContext<TFrom>(this Xamarin.Forms.ColumnDefinition obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ColumnDefinition.BindingContextProperty, value, selector);
  }

  public static partial class RowDefinitionExtensions {
    public static Xamarin.Forms.RowDefinition Height(this Xamarin.Forms.RowDefinition obj, Xamarin.Forms.GridLength value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RowDefinition.HeightProperty, value);
    public static Xamarin.Forms.RowDefinition Height(this Xamarin.Forms.RowDefinition obj, BindableValue<Xamarin.Forms.GridLength> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RowDefinition.HeightProperty, value, mode);
    public static Xamarin.Forms.RowDefinition Height<TFrom>(this Xamarin.Forms.RowDefinition obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.GridLength> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RowDefinition.HeightProperty, value, selector);
    public static Xamarin.Forms.RowDefinition BindingContext(this Xamarin.Forms.RowDefinition obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RowDefinition.BindingContextProperty, value);
    public static Xamarin.Forms.RowDefinition BindingContext(this Xamarin.Forms.RowDefinition obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RowDefinition.BindingContextProperty, value, mode);
    public static Xamarin.Forms.RowDefinition BindingContext<TFrom>(this Xamarin.Forms.RowDefinition obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RowDefinition.BindingContextProperty, value, selector);
  }

  public static partial class ApplicationExtensions {
    public static Xamarin.Forms.Application ClassId(this Xamarin.Forms.Application obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Application.ClassIdProperty, value);
    public static Xamarin.Forms.Application ClassId(this Xamarin.Forms.Application obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Application.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Application ClassId<TFrom>(this Xamarin.Forms.Application obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Application.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Application BindingContext(this Xamarin.Forms.Application obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Application.BindingContextProperty, value);
    public static Xamarin.Forms.Application BindingContext(this Xamarin.Forms.Application obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Application.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Application BindingContext<TFrom>(this Xamarin.Forms.Application obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Application.BindingContextProperty, value, selector);
  }

  public static partial class GestureRecognizerExtensions {
    public static Xamarin.Forms.GestureRecognizer ClassId(this Xamarin.Forms.GestureRecognizer obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.GestureRecognizer.ClassIdProperty, value);
    public static Xamarin.Forms.GestureRecognizer ClassId(this Xamarin.Forms.GestureRecognizer obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.GestureRecognizer.ClassIdProperty, value, mode);
    public static Xamarin.Forms.GestureRecognizer ClassId<TFrom>(this Xamarin.Forms.GestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.GestureRecognizer.ClassIdProperty, value, selector);
    public static Xamarin.Forms.GestureRecognizer BindingContext(this Xamarin.Forms.GestureRecognizer obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.GestureRecognizer.BindingContextProperty, value);
    public static Xamarin.Forms.GestureRecognizer BindingContext(this Xamarin.Forms.GestureRecognizer obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.GestureRecognizer.BindingContextProperty, value, mode);
    public static Xamarin.Forms.GestureRecognizer BindingContext<TFrom>(this Xamarin.Forms.GestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.GestureRecognizer.BindingContextProperty, value, selector);
  }

  public static partial class HtmlWebViewSourceExtensions {
    public static Xamarin.Forms.HtmlWebViewSource Html(this Xamarin.Forms.HtmlWebViewSource obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.HtmlProperty, value);
    public static Xamarin.Forms.HtmlWebViewSource Html(this Xamarin.Forms.HtmlWebViewSource obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.HtmlProperty, value, mode);
    public static Xamarin.Forms.HtmlWebViewSource Html<TFrom>(this Xamarin.Forms.HtmlWebViewSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.HtmlProperty, value, selector);
    public static Xamarin.Forms.HtmlWebViewSource BaseUrl(this Xamarin.Forms.HtmlWebViewSource obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.BaseUrlProperty, value);
    public static Xamarin.Forms.HtmlWebViewSource BaseUrl(this Xamarin.Forms.HtmlWebViewSource obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.BaseUrlProperty, value, mode);
    public static Xamarin.Forms.HtmlWebViewSource BaseUrl<TFrom>(this Xamarin.Forms.HtmlWebViewSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.BaseUrlProperty, value, selector);
    public static Xamarin.Forms.HtmlWebViewSource BindingContext(this Xamarin.Forms.HtmlWebViewSource obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.BindingContextProperty, value);
    public static Xamarin.Forms.HtmlWebViewSource BindingContext(this Xamarin.Forms.HtmlWebViewSource obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.BindingContextProperty, value, mode);
    public static Xamarin.Forms.HtmlWebViewSource BindingContext<TFrom>(this Xamarin.Forms.HtmlWebViewSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.HtmlWebViewSource.BindingContextProperty, value, selector);
  }

  public static partial class UrlWebViewSourceExtensions {
    public static Xamarin.Forms.UrlWebViewSource Url(this Xamarin.Forms.UrlWebViewSource obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UrlWebViewSource.UrlProperty, value);
    public static Xamarin.Forms.UrlWebViewSource Url(this Xamarin.Forms.UrlWebViewSource obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UrlWebViewSource.UrlProperty, value, mode);
    public static Xamarin.Forms.UrlWebViewSource Url<TFrom>(this Xamarin.Forms.UrlWebViewSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UrlWebViewSource.UrlProperty, value, selector);
    public static Xamarin.Forms.UrlWebViewSource BindingContext(this Xamarin.Forms.UrlWebViewSource obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UrlWebViewSource.BindingContextProperty, value);
    public static Xamarin.Forms.UrlWebViewSource BindingContext(this Xamarin.Forms.UrlWebViewSource obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UrlWebViewSource.BindingContextProperty, value, mode);
    public static Xamarin.Forms.UrlWebViewSource BindingContext<TFrom>(this Xamarin.Forms.UrlWebViewSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UrlWebViewSource.BindingContextProperty, value, selector);
  }

  public static partial class VisualElementExtensions {
    public static Xamarin.Forms.VisualElement Navigation(this Xamarin.Forms.VisualElement obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.NavigationProperty, value);
    public static Xamarin.Forms.VisualElement Navigation(this Xamarin.Forms.VisualElement obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.NavigationProperty, value, mode);
    public static Xamarin.Forms.VisualElement Navigation<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.NavigationProperty, value, selector);
    public static Xamarin.Forms.VisualElement InputTransparent(this Xamarin.Forms.VisualElement obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.InputTransparentProperty, value);
    public static Xamarin.Forms.VisualElement InputTransparent(this Xamarin.Forms.VisualElement obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.VisualElement InputTransparent<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.VisualElement IsEnabled(this Xamarin.Forms.VisualElement obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsEnabledProperty, value);
    public static Xamarin.Forms.VisualElement IsEnabled(this Xamarin.Forms.VisualElement obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.VisualElement IsEnabled<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.VisualElement X(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.XProperty, value);
    public static Xamarin.Forms.VisualElement X(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.XProperty, value, mode);
    public static Xamarin.Forms.VisualElement X<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.XProperty, value, selector);
    public static Xamarin.Forms.VisualElement Y(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.YProperty, value);
    public static Xamarin.Forms.VisualElement Y(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.YProperty, value, mode);
    public static Xamarin.Forms.VisualElement Y<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.YProperty, value, selector);
    public static Xamarin.Forms.VisualElement AnchorX(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.AnchorXProperty, value);
    public static Xamarin.Forms.VisualElement AnchorX(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.AnchorXProperty, value, mode);
    public static Xamarin.Forms.VisualElement AnchorX<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.AnchorXProperty, value, selector);
    public static Xamarin.Forms.VisualElement AnchorY(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.AnchorYProperty, value);
    public static Xamarin.Forms.VisualElement AnchorY(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.AnchorYProperty, value, mode);
    public static Xamarin.Forms.VisualElement AnchorY<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.AnchorYProperty, value, selector);
    public static Xamarin.Forms.VisualElement TranslationX(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TranslationXProperty, value);
    public static Xamarin.Forms.VisualElement TranslationX(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TranslationXProperty, value, mode);
    public static Xamarin.Forms.VisualElement TranslationX<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TranslationXProperty, value, selector);
    public static Xamarin.Forms.VisualElement TranslationY(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TranslationYProperty, value);
    public static Xamarin.Forms.VisualElement TranslationY(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TranslationYProperty, value, mode);
    public static Xamarin.Forms.VisualElement TranslationY<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TranslationYProperty, value, selector);
    public static Xamarin.Forms.VisualElement Width(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.WidthProperty, value);
    public static Xamarin.Forms.VisualElement Width(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.WidthProperty, value, mode);
    public static Xamarin.Forms.VisualElement Width<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.WidthProperty, value, selector);
    public static Xamarin.Forms.VisualElement Height(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.HeightProperty, value);
    public static Xamarin.Forms.VisualElement Height(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.HeightProperty, value, mode);
    public static Xamarin.Forms.VisualElement Height<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.HeightProperty, value, selector);
    public static Xamarin.Forms.VisualElement Rotation(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationProperty, value);
    public static Xamarin.Forms.VisualElement Rotation(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationProperty, value, mode);
    public static Xamarin.Forms.VisualElement Rotation<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationProperty, value, selector);
    public static Xamarin.Forms.VisualElement RotationX(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationXProperty, value);
    public static Xamarin.Forms.VisualElement RotationX(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationXProperty, value, mode);
    public static Xamarin.Forms.VisualElement RotationX<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationXProperty, value, selector);
    public static Xamarin.Forms.VisualElement RotationY(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationYProperty, value);
    public static Xamarin.Forms.VisualElement RotationY(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationYProperty, value, mode);
    public static Xamarin.Forms.VisualElement RotationY<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.RotationYProperty, value, selector);
    public static Xamarin.Forms.VisualElement Scale(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.ScaleProperty, value);
    public static Xamarin.Forms.VisualElement Scale(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.ScaleProperty, value, mode);
    public static Xamarin.Forms.VisualElement Scale<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.ScaleProperty, value, selector);
    public static Xamarin.Forms.VisualElement IsVisible(this Xamarin.Forms.VisualElement obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsVisibleProperty, value);
    public static Xamarin.Forms.VisualElement IsVisible(this Xamarin.Forms.VisualElement obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.VisualElement IsVisible<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.VisualElement Opacity(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.OpacityProperty, value);
    public static Xamarin.Forms.VisualElement Opacity(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.OpacityProperty, value, mode);
    public static Xamarin.Forms.VisualElement Opacity<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.OpacityProperty, value, selector);
    public static Xamarin.Forms.VisualElement BackgroundColor(this Xamarin.Forms.VisualElement obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BackgroundColorProperty, value);
    public static Xamarin.Forms.VisualElement BackgroundColor(this Xamarin.Forms.VisualElement obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.VisualElement BackgroundColor<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.VisualElement Behaviors(this Xamarin.Forms.VisualElement obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BehaviorsProperty, value);
    public static Xamarin.Forms.VisualElement Behaviors(this Xamarin.Forms.VisualElement obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.VisualElement Behaviors<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.VisualElement Triggers(this Xamarin.Forms.VisualElement obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TriggersProperty, value);
    public static Xamarin.Forms.VisualElement Triggers(this Xamarin.Forms.VisualElement obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TriggersProperty, value, mode);
    public static Xamarin.Forms.VisualElement Triggers<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.TriggersProperty, value, selector);
    public static Xamarin.Forms.VisualElement Style(this Xamarin.Forms.VisualElement obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.StyleProperty, value);
    public static Xamarin.Forms.VisualElement Style(this Xamarin.Forms.VisualElement obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.StyleProperty, value, mode);
    public static Xamarin.Forms.VisualElement Style<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.StyleProperty, value, selector);
    public static Xamarin.Forms.VisualElement WidthRequest(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.WidthRequestProperty, value);
    public static Xamarin.Forms.VisualElement WidthRequest(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.VisualElement WidthRequest<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.VisualElement HeightRequest(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.HeightRequestProperty, value);
    public static Xamarin.Forms.VisualElement HeightRequest(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.VisualElement HeightRequest<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.VisualElement MinimumWidthRequest(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.VisualElement MinimumWidthRequest(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.VisualElement MinimumWidthRequest<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.VisualElement MinimumHeightRequest(this Xamarin.Forms.VisualElement obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.VisualElement MinimumHeightRequest(this Xamarin.Forms.VisualElement obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.VisualElement MinimumHeightRequest<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.VisualElement IsFocused(this Xamarin.Forms.VisualElement obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsFocusedProperty, value);
    public static Xamarin.Forms.VisualElement IsFocused(this Xamarin.Forms.VisualElement obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.VisualElement IsFocused<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.VisualElement ClassId(this Xamarin.Forms.VisualElement obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.ClassIdProperty, value);
    public static Xamarin.Forms.VisualElement ClassId(this Xamarin.Forms.VisualElement obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.ClassIdProperty, value, mode);
    public static Xamarin.Forms.VisualElement ClassId<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.ClassIdProperty, value, selector);
    public static Xamarin.Forms.VisualElement BindingContext(this Xamarin.Forms.VisualElement obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BindingContextProperty, value);
    public static Xamarin.Forms.VisualElement BindingContext(this Xamarin.Forms.VisualElement obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BindingContextProperty, value, mode);
    public static Xamarin.Forms.VisualElement BindingContext<TFrom>(this Xamarin.Forms.VisualElement obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.VisualElement.BindingContextProperty, value, selector);
  }

  public static partial class EventTriggerExtensions {
    public static Xamarin.Forms.EventTrigger BindingContext(this Xamarin.Forms.EventTrigger obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EventTrigger.BindingContextProperty, value);
    public static Xamarin.Forms.EventTrigger BindingContext(this Xamarin.Forms.EventTrigger obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EventTrigger.BindingContextProperty, value, mode);
    public static Xamarin.Forms.EventTrigger BindingContext<TFrom>(this Xamarin.Forms.EventTrigger obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EventTrigger.BindingContextProperty, value, selector);
  }

  public static partial class TriggerExtensions {
    public static Xamarin.Forms.Trigger BindingContext(this Xamarin.Forms.Trigger obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Trigger.BindingContextProperty, value);
    public static Xamarin.Forms.Trigger BindingContext(this Xamarin.Forms.Trigger obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Trigger.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Trigger BindingContext<TFrom>(this Xamarin.Forms.Trigger obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Trigger.BindingContextProperty, value, selector);
  }

  public static partial class DataTriggerExtensions {
    public static Xamarin.Forms.DataTrigger BindingContext(this Xamarin.Forms.DataTrigger obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DataTrigger.BindingContextProperty, value);
    public static Xamarin.Forms.DataTrigger BindingContext(this Xamarin.Forms.DataTrigger obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DataTrigger.BindingContextProperty, value, mode);
    public static Xamarin.Forms.DataTrigger BindingContext<TFrom>(this Xamarin.Forms.DataTrigger obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DataTrigger.BindingContextProperty, value, selector);
  }

  public static partial class MultiTriggerExtensions {
    public static Xamarin.Forms.MultiTrigger BindingContext(this Xamarin.Forms.MultiTrigger obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MultiTrigger.BindingContextProperty, value);
    public static Xamarin.Forms.MultiTrigger BindingContext(this Xamarin.Forms.MultiTrigger obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MultiTrigger.BindingContextProperty, value, mode);
    public static Xamarin.Forms.MultiTrigger BindingContext<TFrom>(this Xamarin.Forms.MultiTrigger obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MultiTrigger.BindingContextProperty, value, selector);
  }

  public static partial class AppLinkEntryExtensions {
    public static Xamarin.Forms.AppLinkEntry Title(this Xamarin.Forms.AppLinkEntry obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.TitleProperty, value);
    public static Xamarin.Forms.AppLinkEntry Title(this Xamarin.Forms.AppLinkEntry obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.TitleProperty, value, mode);
    public static Xamarin.Forms.AppLinkEntry Title<TFrom>(this Xamarin.Forms.AppLinkEntry obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.TitleProperty, value, selector);
    public static Xamarin.Forms.AppLinkEntry Description(this Xamarin.Forms.AppLinkEntry obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.DescriptionProperty, value);
    public static Xamarin.Forms.AppLinkEntry Description(this Xamarin.Forms.AppLinkEntry obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.DescriptionProperty, value, mode);
    public static Xamarin.Forms.AppLinkEntry Description<TFrom>(this Xamarin.Forms.AppLinkEntry obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.DescriptionProperty, value, selector);
    public static Xamarin.Forms.AppLinkEntry Thumbnail(this Xamarin.Forms.AppLinkEntry obj, Xamarin.Forms.ImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.ThumbnailProperty, value);
    public static Xamarin.Forms.AppLinkEntry Thumbnail(this Xamarin.Forms.AppLinkEntry obj, BindableValue<Xamarin.Forms.ImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.ThumbnailProperty, value, mode);
    public static Xamarin.Forms.AppLinkEntry Thumbnail<TFrom>(this Xamarin.Forms.AppLinkEntry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.ThumbnailProperty, value, selector);
    public static Xamarin.Forms.AppLinkEntry AppLinkUri(this Xamarin.Forms.AppLinkEntry obj, System.Uri value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.AppLinkUriProperty, value);
    public static Xamarin.Forms.AppLinkEntry AppLinkUri(this Xamarin.Forms.AppLinkEntry obj, BindableValue<System.Uri> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.AppLinkUriProperty, value, mode);
    public static Xamarin.Forms.AppLinkEntry AppLinkUri<TFrom>(this Xamarin.Forms.AppLinkEntry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Uri> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.AppLinkUriProperty, value, selector);
    public static Xamarin.Forms.AppLinkEntry IsLinkActive(this Xamarin.Forms.AppLinkEntry obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.IsLinkActiveProperty, value);
    public static Xamarin.Forms.AppLinkEntry IsLinkActive(this Xamarin.Forms.AppLinkEntry obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.IsLinkActiveProperty, value, mode);
    public static Xamarin.Forms.AppLinkEntry IsLinkActive<TFrom>(this Xamarin.Forms.AppLinkEntry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.IsLinkActiveProperty, value, selector);
    public static Xamarin.Forms.AppLinkEntry ClassId(this Xamarin.Forms.AppLinkEntry obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.ClassIdProperty, value);
    public static Xamarin.Forms.AppLinkEntry ClassId(this Xamarin.Forms.AppLinkEntry obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.ClassIdProperty, value, mode);
    public static Xamarin.Forms.AppLinkEntry ClassId<TFrom>(this Xamarin.Forms.AppLinkEntry obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.ClassIdProperty, value, selector);
    public static Xamarin.Forms.AppLinkEntry BindingContext(this Xamarin.Forms.AppLinkEntry obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.BindingContextProperty, value);
    public static Xamarin.Forms.AppLinkEntry BindingContext(this Xamarin.Forms.AppLinkEntry obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.BindingContextProperty, value, mode);
    public static Xamarin.Forms.AppLinkEntry BindingContext<TFrom>(this Xamarin.Forms.AppLinkEntry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AppLinkEntry.BindingContextProperty, value, selector);
  }

  public static partial class EntryCellExtensions {
    public static Xamarin.Forms.EntryCell Text(this Xamarin.Forms.EntryCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.TextProperty, value);
    public static Xamarin.Forms.EntryCell Text(this Xamarin.Forms.EntryCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.TextProperty, value, mode);
    public static Xamarin.Forms.EntryCell Text<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.TextProperty, value, selector);
    public static Xamarin.Forms.EntryCell Label(this Xamarin.Forms.EntryCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.LabelProperty, value);
    public static Xamarin.Forms.EntryCell Label(this Xamarin.Forms.EntryCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.LabelProperty, value, mode);
    public static Xamarin.Forms.EntryCell Label<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.LabelProperty, value, selector);
    public static Xamarin.Forms.EntryCell Placeholder(this Xamarin.Forms.EntryCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.PlaceholderProperty, value);
    public static Xamarin.Forms.EntryCell Placeholder(this Xamarin.Forms.EntryCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.PlaceholderProperty, value, mode);
    public static Xamarin.Forms.EntryCell Placeholder<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.PlaceholderProperty, value, selector);
    public static Xamarin.Forms.EntryCell LabelColor(this Xamarin.Forms.EntryCell obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.LabelColorProperty, value);
    public static Xamarin.Forms.EntryCell LabelColor(this Xamarin.Forms.EntryCell obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.LabelColorProperty, value, mode);
    public static Xamarin.Forms.EntryCell LabelColor<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.LabelColorProperty, value, selector);
    public static Xamarin.Forms.EntryCell Keyboard(this Xamarin.Forms.EntryCell obj, Xamarin.Forms.Keyboard value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.KeyboardProperty, value);
    public static Xamarin.Forms.EntryCell Keyboard(this Xamarin.Forms.EntryCell obj, BindableValue<Xamarin.Forms.Keyboard> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.KeyboardProperty, value, mode);
    public static Xamarin.Forms.EntryCell Keyboard<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Keyboard> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.KeyboardProperty, value, selector);
    public static Xamarin.Forms.EntryCell HorizontalTextAlignment(this Xamarin.Forms.EntryCell obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.HorizontalTextAlignmentProperty, value);
    public static Xamarin.Forms.EntryCell HorizontalTextAlignment(this Xamarin.Forms.EntryCell obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.HorizontalTextAlignmentProperty, value, mode);
    public static Xamarin.Forms.EntryCell HorizontalTextAlignment<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.HorizontalTextAlignmentProperty, value, selector);
    public static Xamarin.Forms.EntryCell XAlign(this Xamarin.Forms.EntryCell obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.XAlignProperty, value);
    public static Xamarin.Forms.EntryCell XAlign(this Xamarin.Forms.EntryCell obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.XAlignProperty, value, mode);
    public static Xamarin.Forms.EntryCell XAlign<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.XAlignProperty, value, selector);
    public static Xamarin.Forms.EntryCell IsEnabled(this Xamarin.Forms.EntryCell obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.IsEnabledProperty, value);
    public static Xamarin.Forms.EntryCell IsEnabled(this Xamarin.Forms.EntryCell obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.EntryCell IsEnabled<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.EntryCell ClassId(this Xamarin.Forms.EntryCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.ClassIdProperty, value);
    public static Xamarin.Forms.EntryCell ClassId(this Xamarin.Forms.EntryCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.ClassIdProperty, value, mode);
    public static Xamarin.Forms.EntryCell ClassId<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.ClassIdProperty, value, selector);
    public static Xamarin.Forms.EntryCell BindingContext(this Xamarin.Forms.EntryCell obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.BindingContextProperty, value);
    public static Xamarin.Forms.EntryCell BindingContext(this Xamarin.Forms.EntryCell obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.BindingContextProperty, value, mode);
    public static Xamarin.Forms.EntryCell BindingContext<TFrom>(this Xamarin.Forms.EntryCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.EntryCell.BindingContextProperty, value, selector);
  }

  public static partial class MenuItemExtensions {
    public static Xamarin.Forms.MenuItem Text(this Xamarin.Forms.MenuItem obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.TextProperty, value);
    public static Xamarin.Forms.MenuItem Text(this Xamarin.Forms.MenuItem obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.TextProperty, value, mode);
    public static Xamarin.Forms.MenuItem Text<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.TextProperty, value, selector);
    public static Xamarin.Forms.MenuItem Command(this Xamarin.Forms.MenuItem obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.CommandProperty, value);
    public static Xamarin.Forms.MenuItem Command(this Xamarin.Forms.MenuItem obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.CommandProperty, value, mode);
    public static Xamarin.Forms.MenuItem Command<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.CommandProperty, value, selector);
 public static Xamarin.Forms.MenuItem Command(this Xamarin.Forms.MenuItem obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.CommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.MenuItem CommandParameter(this Xamarin.Forms.MenuItem obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.CommandParameterProperty, value);
    public static Xamarin.Forms.MenuItem CommandParameter(this Xamarin.Forms.MenuItem obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.CommandParameterProperty, value, mode);
    public static Xamarin.Forms.MenuItem CommandParameter<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.CommandParameterProperty, value, selector);
    public static Xamarin.Forms.MenuItem IsDestructive(this Xamarin.Forms.MenuItem obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IsDestructiveProperty, value);
    public static Xamarin.Forms.MenuItem IsDestructive(this Xamarin.Forms.MenuItem obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IsDestructiveProperty, value, mode);
    public static Xamarin.Forms.MenuItem IsDestructive<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IsDestructiveProperty, value, selector);
    public static Xamarin.Forms.MenuItem Icon(this Xamarin.Forms.MenuItem obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IconProperty, value);
    public static Xamarin.Forms.MenuItem Icon(this Xamarin.Forms.MenuItem obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IconProperty, value, mode);
    public static Xamarin.Forms.MenuItem Icon<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IconProperty, value, selector);
    public static Xamarin.Forms.MenuItem IsEnabled(this Xamarin.Forms.MenuItem obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IsEnabledProperty, value);
    public static Xamarin.Forms.MenuItem IsEnabled(this Xamarin.Forms.MenuItem obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.MenuItem IsEnabled<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.MenuItem ClassId(this Xamarin.Forms.MenuItem obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.ClassIdProperty, value);
    public static Xamarin.Forms.MenuItem ClassId(this Xamarin.Forms.MenuItem obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.ClassIdProperty, value, mode);
    public static Xamarin.Forms.MenuItem ClassId<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.ClassIdProperty, value, selector);
    public static Xamarin.Forms.MenuItem BindingContext(this Xamarin.Forms.MenuItem obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.BindingContextProperty, value);
    public static Xamarin.Forms.MenuItem BindingContext(this Xamarin.Forms.MenuItem obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.BindingContextProperty, value, mode);
    public static Xamarin.Forms.MenuItem BindingContext<TFrom>(this Xamarin.Forms.MenuItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MenuItem.BindingContextProperty, value, selector);
  }

  public static partial class PanGestureRecognizerExtensions {
    public static Xamarin.Forms.PanGestureRecognizer TouchPoints(this Xamarin.Forms.PanGestureRecognizer obj, System.Int32 value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.TouchPointsProperty, value);
    public static Xamarin.Forms.PanGestureRecognizer TouchPoints(this Xamarin.Forms.PanGestureRecognizer obj, BindableValue<System.Int32> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.TouchPointsProperty, value, mode);
    public static Xamarin.Forms.PanGestureRecognizer TouchPoints<TFrom>(this Xamarin.Forms.PanGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Int32> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.TouchPointsProperty, value, selector);
    public static Xamarin.Forms.PanGestureRecognizer ClassId(this Xamarin.Forms.PanGestureRecognizer obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.ClassIdProperty, value);
    public static Xamarin.Forms.PanGestureRecognizer ClassId(this Xamarin.Forms.PanGestureRecognizer obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.ClassIdProperty, value, mode);
    public static Xamarin.Forms.PanGestureRecognizer ClassId<TFrom>(this Xamarin.Forms.PanGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.ClassIdProperty, value, selector);
    public static Xamarin.Forms.PanGestureRecognizer BindingContext(this Xamarin.Forms.PanGestureRecognizer obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.BindingContextProperty, value);
    public static Xamarin.Forms.PanGestureRecognizer BindingContext(this Xamarin.Forms.PanGestureRecognizer obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.BindingContextProperty, value, mode);
    public static Xamarin.Forms.PanGestureRecognizer BindingContext<TFrom>(this Xamarin.Forms.PanGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PanGestureRecognizer.BindingContextProperty, value, selector);
  }

  public static partial class TableRootExtensions {
    public static Xamarin.Forms.TableRoot Title(this Xamarin.Forms.TableRoot obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableRoot.TitleProperty, value);
    public static Xamarin.Forms.TableRoot Title(this Xamarin.Forms.TableRoot obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableRoot.TitleProperty, value, mode);
    public static Xamarin.Forms.TableRoot Title<TFrom>(this Xamarin.Forms.TableRoot obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableRoot.TitleProperty, value, selector);
    public static Xamarin.Forms.TableRoot BindingContext(this Xamarin.Forms.TableRoot obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableRoot.BindingContextProperty, value);
    public static Xamarin.Forms.TableRoot BindingContext(this Xamarin.Forms.TableRoot obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableRoot.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TableRoot BindingContext<TFrom>(this Xamarin.Forms.TableRoot obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableRoot.BindingContextProperty, value, selector);
  }

  public static partial class TapGestureRecognizerExtensions {
    public static Xamarin.Forms.TapGestureRecognizer Command(this Xamarin.Forms.TapGestureRecognizer obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.CommandProperty, value);
    public static Xamarin.Forms.TapGestureRecognizer Command(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.CommandProperty, value, mode);
    public static Xamarin.Forms.TapGestureRecognizer Command<TFrom>(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.CommandProperty, value, selector);
 public static Xamarin.Forms.TapGestureRecognizer Command(this Xamarin.Forms.TapGestureRecognizer obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.CommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.TapGestureRecognizer CommandParameter(this Xamarin.Forms.TapGestureRecognizer obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.CommandParameterProperty, value);
    public static Xamarin.Forms.TapGestureRecognizer CommandParameter(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.CommandParameterProperty, value, mode);
    public static Xamarin.Forms.TapGestureRecognizer CommandParameter<TFrom>(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.CommandParameterProperty, value, selector);
    public static Xamarin.Forms.TapGestureRecognizer NumberOfTapsRequired(this Xamarin.Forms.TapGestureRecognizer obj, System.Int32 value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.NumberOfTapsRequiredProperty, value);
    public static Xamarin.Forms.TapGestureRecognizer NumberOfTapsRequired(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<System.Int32> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.NumberOfTapsRequiredProperty, value, mode);
    public static Xamarin.Forms.TapGestureRecognizer NumberOfTapsRequired<TFrom>(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Int32> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.NumberOfTapsRequiredProperty, value, selector);
    public static Xamarin.Forms.TapGestureRecognizer TappedCallback(this Xamarin.Forms.TapGestureRecognizer obj, System.Action<Xamarin.Forms.View, System.Object> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.TappedCallbackProperty, value);
    public static Xamarin.Forms.TapGestureRecognizer TappedCallback(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<System.Action<Xamarin.Forms.View, System.Object>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.TappedCallbackProperty, value, mode);
    public static Xamarin.Forms.TapGestureRecognizer TappedCallback<TFrom>(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Action<Xamarin.Forms.View, System.Object>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.TappedCallbackProperty, value, selector);
    public static Xamarin.Forms.TapGestureRecognizer TappedCallbackParameter(this Xamarin.Forms.TapGestureRecognizer obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameterProperty, value);
    public static Xamarin.Forms.TapGestureRecognizer TappedCallbackParameter(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameterProperty, value, mode);
    public static Xamarin.Forms.TapGestureRecognizer TappedCallbackParameter<TFrom>(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameterProperty, value, selector);
    public static Xamarin.Forms.TapGestureRecognizer ClassId(this Xamarin.Forms.TapGestureRecognizer obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.ClassIdProperty, value);
    public static Xamarin.Forms.TapGestureRecognizer ClassId(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.ClassIdProperty, value, mode);
    public static Xamarin.Forms.TapGestureRecognizer ClassId<TFrom>(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.ClassIdProperty, value, selector);
    public static Xamarin.Forms.TapGestureRecognizer BindingContext(this Xamarin.Forms.TapGestureRecognizer obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.BindingContextProperty, value);
    public static Xamarin.Forms.TapGestureRecognizer BindingContext(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TapGestureRecognizer BindingContext<TFrom>(this Xamarin.Forms.TapGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TapGestureRecognizer.BindingContextProperty, value, selector);
  }

  public static partial class ViewExtensions {
    public static Xamarin.Forms.View VerticalOptions(this Xamarin.Forms.View obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.VerticalOptionsProperty, value);
    public static Xamarin.Forms.View VerticalOptions(this Xamarin.Forms.View obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.View VerticalOptions<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.View HorizontalOptions(this Xamarin.Forms.View obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.View HorizontalOptions(this Xamarin.Forms.View obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.View HorizontalOptions<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.View Margin(this Xamarin.Forms.View obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MarginProperty, value);
    public static Xamarin.Forms.View Margin(this Xamarin.Forms.View obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MarginProperty, value, mode);
    public static Xamarin.Forms.View Margin<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MarginProperty, value, selector);
    public static Xamarin.Forms.View Navigation(this Xamarin.Forms.View obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.NavigationProperty, value);
    public static Xamarin.Forms.View Navigation(this Xamarin.Forms.View obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.NavigationProperty, value, mode);
    public static Xamarin.Forms.View Navigation<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.NavigationProperty, value, selector);
    public static Xamarin.Forms.View InputTransparent(this Xamarin.Forms.View obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.InputTransparentProperty, value);
    public static Xamarin.Forms.View InputTransparent(this Xamarin.Forms.View obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.View InputTransparent<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.View IsEnabled(this Xamarin.Forms.View obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsEnabledProperty, value);
    public static Xamarin.Forms.View IsEnabled(this Xamarin.Forms.View obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.View IsEnabled<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.View X(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.XProperty, value);
    public static Xamarin.Forms.View X(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.XProperty, value, mode);
    public static Xamarin.Forms.View X<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.XProperty, value, selector);
    public static Xamarin.Forms.View Y(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.YProperty, value);
    public static Xamarin.Forms.View Y(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.YProperty, value, mode);
    public static Xamarin.Forms.View Y<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.YProperty, value, selector);
    public static Xamarin.Forms.View AnchorX(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.AnchorXProperty, value);
    public static Xamarin.Forms.View AnchorX(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.AnchorXProperty, value, mode);
    public static Xamarin.Forms.View AnchorX<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.AnchorXProperty, value, selector);
    public static Xamarin.Forms.View AnchorY(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.AnchorYProperty, value);
    public static Xamarin.Forms.View AnchorY(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.AnchorYProperty, value, mode);
    public static Xamarin.Forms.View AnchorY<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.AnchorYProperty, value, selector);
    public static Xamarin.Forms.View TranslationX(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TranslationXProperty, value);
    public static Xamarin.Forms.View TranslationX(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TranslationXProperty, value, mode);
    public static Xamarin.Forms.View TranslationX<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TranslationXProperty, value, selector);
    public static Xamarin.Forms.View TranslationY(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TranslationYProperty, value);
    public static Xamarin.Forms.View TranslationY(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TranslationYProperty, value, mode);
    public static Xamarin.Forms.View TranslationY<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TranslationYProperty, value, selector);
    public static Xamarin.Forms.View Width(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.WidthProperty, value);
    public static Xamarin.Forms.View Width(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.WidthProperty, value, mode);
    public static Xamarin.Forms.View Width<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.WidthProperty, value, selector);
    public static Xamarin.Forms.View Height(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HeightProperty, value);
    public static Xamarin.Forms.View Height(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HeightProperty, value, mode);
    public static Xamarin.Forms.View Height<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HeightProperty, value, selector);
    public static Xamarin.Forms.View Rotation(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationProperty, value);
    public static Xamarin.Forms.View Rotation(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationProperty, value, mode);
    public static Xamarin.Forms.View Rotation<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationProperty, value, selector);
    public static Xamarin.Forms.View RotationX(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationXProperty, value);
    public static Xamarin.Forms.View RotationX(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationXProperty, value, mode);
    public static Xamarin.Forms.View RotationX<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationXProperty, value, selector);
    public static Xamarin.Forms.View RotationY(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationYProperty, value);
    public static Xamarin.Forms.View RotationY(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationYProperty, value, mode);
    public static Xamarin.Forms.View RotationY<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.RotationYProperty, value, selector);
    public static Xamarin.Forms.View Scale(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.ScaleProperty, value);
    public static Xamarin.Forms.View Scale(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.ScaleProperty, value, mode);
    public static Xamarin.Forms.View Scale<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.ScaleProperty, value, selector);
    public static Xamarin.Forms.View IsVisible(this Xamarin.Forms.View obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsVisibleProperty, value);
    public static Xamarin.Forms.View IsVisible(this Xamarin.Forms.View obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.View IsVisible<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.View Opacity(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.OpacityProperty, value);
    public static Xamarin.Forms.View Opacity(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.OpacityProperty, value, mode);
    public static Xamarin.Forms.View Opacity<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.OpacityProperty, value, selector);
    public static Xamarin.Forms.View BackgroundColor(this Xamarin.Forms.View obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BackgroundColorProperty, value);
    public static Xamarin.Forms.View BackgroundColor(this Xamarin.Forms.View obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.View BackgroundColor<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.View Behaviors(this Xamarin.Forms.View obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BehaviorsProperty, value);
    public static Xamarin.Forms.View Behaviors(this Xamarin.Forms.View obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.View Behaviors<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.View Triggers(this Xamarin.Forms.View obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TriggersProperty, value);
    public static Xamarin.Forms.View Triggers(this Xamarin.Forms.View obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TriggersProperty, value, mode);
    public static Xamarin.Forms.View Triggers<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.TriggersProperty, value, selector);
    public static Xamarin.Forms.View Style(this Xamarin.Forms.View obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.StyleProperty, value);
    public static Xamarin.Forms.View Style(this Xamarin.Forms.View obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.StyleProperty, value, mode);
    public static Xamarin.Forms.View Style<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.StyleProperty, value, selector);
    public static Xamarin.Forms.View WidthRequest(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.WidthRequestProperty, value);
    public static Xamarin.Forms.View WidthRequest(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.View WidthRequest<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.View HeightRequest(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HeightRequestProperty, value);
    public static Xamarin.Forms.View HeightRequest(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.View HeightRequest<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.View MinimumWidthRequest(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.View MinimumWidthRequest(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.View MinimumWidthRequest<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.View MinimumHeightRequest(this Xamarin.Forms.View obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.View MinimumHeightRequest(this Xamarin.Forms.View obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.View MinimumHeightRequest<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.View IsFocused(this Xamarin.Forms.View obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsFocusedProperty, value);
    public static Xamarin.Forms.View IsFocused(this Xamarin.Forms.View obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.View IsFocused<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.View ClassId(this Xamarin.Forms.View obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.ClassIdProperty, value);
    public static Xamarin.Forms.View ClassId(this Xamarin.Forms.View obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.ClassIdProperty, value, mode);
    public static Xamarin.Forms.View ClassId<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.ClassIdProperty, value, selector);
    public static Xamarin.Forms.View BindingContext(this Xamarin.Forms.View obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BindingContextProperty, value);
    public static Xamarin.Forms.View BindingContext(this Xamarin.Forms.View obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BindingContextProperty, value, mode);
    public static Xamarin.Forms.View BindingContext<TFrom>(this Xamarin.Forms.View obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.View.BindingContextProperty, value, selector);
  }

  public static partial class PageExtensions {
    public static Xamarin.Forms.Page BackgroundImage(this Xamarin.Forms.Page obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BackgroundImageProperty, value);
    public static Xamarin.Forms.Page BackgroundImage(this Xamarin.Forms.Page obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BackgroundImageProperty, value, mode);
    public static Xamarin.Forms.Page BackgroundImage<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BackgroundImageProperty, value, selector);
    public static Xamarin.Forms.Page IsBusy(this Xamarin.Forms.Page obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsBusyProperty, value);
    public static Xamarin.Forms.Page IsBusy(this Xamarin.Forms.Page obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsBusyProperty, value, mode);
    public static Xamarin.Forms.Page IsBusy<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsBusyProperty, value, selector);
    public static Xamarin.Forms.Page Padding(this Xamarin.Forms.Page obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.PaddingProperty, value);
    public static Xamarin.Forms.Page Padding(this Xamarin.Forms.Page obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.PaddingProperty, value, mode);
    public static Xamarin.Forms.Page Padding<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.PaddingProperty, value, selector);
    public static Xamarin.Forms.Page Title(this Xamarin.Forms.Page obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TitleProperty, value);
    public static Xamarin.Forms.Page Title(this Xamarin.Forms.Page obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TitleProperty, value, mode);
    public static Xamarin.Forms.Page Title<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TitleProperty, value, selector);
    public static Xamarin.Forms.Page Icon(this Xamarin.Forms.Page obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IconProperty, value);
    public static Xamarin.Forms.Page Icon(this Xamarin.Forms.Page obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IconProperty, value, mode);
    public static Xamarin.Forms.Page Icon<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IconProperty, value, selector);
    public static Xamarin.Forms.Page Navigation(this Xamarin.Forms.Page obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.NavigationProperty, value);
    public static Xamarin.Forms.Page Navigation(this Xamarin.Forms.Page obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.NavigationProperty, value, mode);
    public static Xamarin.Forms.Page Navigation<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.NavigationProperty, value, selector);
    public static Xamarin.Forms.Page InputTransparent(this Xamarin.Forms.Page obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.InputTransparentProperty, value);
    public static Xamarin.Forms.Page InputTransparent(this Xamarin.Forms.Page obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Page InputTransparent<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Page IsEnabled(this Xamarin.Forms.Page obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsEnabledProperty, value);
    public static Xamarin.Forms.Page IsEnabled(this Xamarin.Forms.Page obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Page IsEnabled<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Page X(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.XProperty, value);
    public static Xamarin.Forms.Page X(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.XProperty, value, mode);
    public static Xamarin.Forms.Page X<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.XProperty, value, selector);
    public static Xamarin.Forms.Page Y(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.YProperty, value);
    public static Xamarin.Forms.Page Y(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.YProperty, value, mode);
    public static Xamarin.Forms.Page Y<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.YProperty, value, selector);
    public static Xamarin.Forms.Page AnchorX(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.AnchorXProperty, value);
    public static Xamarin.Forms.Page AnchorX(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Page AnchorX<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Page AnchorY(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.AnchorYProperty, value);
    public static Xamarin.Forms.Page AnchorY(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Page AnchorY<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Page TranslationX(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TranslationXProperty, value);
    public static Xamarin.Forms.Page TranslationX(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Page TranslationX<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Page TranslationY(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TranslationYProperty, value);
    public static Xamarin.Forms.Page TranslationY(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Page TranslationY<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Page Width(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.WidthProperty, value);
    public static Xamarin.Forms.Page Width(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.WidthProperty, value, mode);
    public static Xamarin.Forms.Page Width<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.WidthProperty, value, selector);
    public static Xamarin.Forms.Page Height(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.HeightProperty, value);
    public static Xamarin.Forms.Page Height(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.HeightProperty, value, mode);
    public static Xamarin.Forms.Page Height<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.HeightProperty, value, selector);
    public static Xamarin.Forms.Page Rotation(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationProperty, value);
    public static Xamarin.Forms.Page Rotation(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationProperty, value, mode);
    public static Xamarin.Forms.Page Rotation<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationProperty, value, selector);
    public static Xamarin.Forms.Page RotationX(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationXProperty, value);
    public static Xamarin.Forms.Page RotationX(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationXProperty, value, mode);
    public static Xamarin.Forms.Page RotationX<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationXProperty, value, selector);
    public static Xamarin.Forms.Page RotationY(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationYProperty, value);
    public static Xamarin.Forms.Page RotationY(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationYProperty, value, mode);
    public static Xamarin.Forms.Page RotationY<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.RotationYProperty, value, selector);
    public static Xamarin.Forms.Page Scale(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.ScaleProperty, value);
    public static Xamarin.Forms.Page Scale(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.ScaleProperty, value, mode);
    public static Xamarin.Forms.Page Scale<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.ScaleProperty, value, selector);
    public static Xamarin.Forms.Page IsVisible(this Xamarin.Forms.Page obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsVisibleProperty, value);
    public static Xamarin.Forms.Page IsVisible(this Xamarin.Forms.Page obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Page IsVisible<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Page Opacity(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.OpacityProperty, value);
    public static Xamarin.Forms.Page Opacity(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.OpacityProperty, value, mode);
    public static Xamarin.Forms.Page Opacity<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.OpacityProperty, value, selector);
    public static Xamarin.Forms.Page BackgroundColor(this Xamarin.Forms.Page obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BackgroundColorProperty, value);
    public static Xamarin.Forms.Page BackgroundColor(this Xamarin.Forms.Page obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Page BackgroundColor<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Page Behaviors(this Xamarin.Forms.Page obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BehaviorsProperty, value);
    public static Xamarin.Forms.Page Behaviors(this Xamarin.Forms.Page obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Page Behaviors<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Page Triggers(this Xamarin.Forms.Page obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TriggersProperty, value);
    public static Xamarin.Forms.Page Triggers(this Xamarin.Forms.Page obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TriggersProperty, value, mode);
    public static Xamarin.Forms.Page Triggers<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.TriggersProperty, value, selector);
    public static Xamarin.Forms.Page Style(this Xamarin.Forms.Page obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.StyleProperty, value);
    public static Xamarin.Forms.Page Style(this Xamarin.Forms.Page obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.StyleProperty, value, mode);
    public static Xamarin.Forms.Page Style<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.StyleProperty, value, selector);
    public static Xamarin.Forms.Page WidthRequest(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.WidthRequestProperty, value);
    public static Xamarin.Forms.Page WidthRequest(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Page WidthRequest<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Page HeightRequest(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.HeightRequestProperty, value);
    public static Xamarin.Forms.Page HeightRequest(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Page HeightRequest<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Page MinimumWidthRequest(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Page MinimumWidthRequest(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Page MinimumWidthRequest<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Page MinimumHeightRequest(this Xamarin.Forms.Page obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Page MinimumHeightRequest(this Xamarin.Forms.Page obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Page MinimumHeightRequest<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Page IsFocused(this Xamarin.Forms.Page obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsFocusedProperty, value);
    public static Xamarin.Forms.Page IsFocused(this Xamarin.Forms.Page obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Page IsFocused<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Page ClassId(this Xamarin.Forms.Page obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.ClassIdProperty, value);
    public static Xamarin.Forms.Page ClassId(this Xamarin.Forms.Page obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Page ClassId<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Page BindingContext(this Xamarin.Forms.Page obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BindingContextProperty, value);
    public static Xamarin.Forms.Page BindingContext(this Xamarin.Forms.Page obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Page BindingContext<TFrom>(this Xamarin.Forms.Page obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Page.BindingContextProperty, value, selector);
  }

  public static partial class SwitchCellExtensions {
    public static Xamarin.Forms.SwitchCell On(this Xamarin.Forms.SwitchCell obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.OnProperty, value);
    public static Xamarin.Forms.SwitchCell On(this Xamarin.Forms.SwitchCell obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.OnProperty, value, mode);
    public static Xamarin.Forms.SwitchCell On<TFrom>(this Xamarin.Forms.SwitchCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.OnProperty, value, selector);
    public static Xamarin.Forms.SwitchCell Text(this Xamarin.Forms.SwitchCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.TextProperty, value);
    public static Xamarin.Forms.SwitchCell Text(this Xamarin.Forms.SwitchCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.TextProperty, value, mode);
    public static Xamarin.Forms.SwitchCell Text<TFrom>(this Xamarin.Forms.SwitchCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.TextProperty, value, selector);
    public static Xamarin.Forms.SwitchCell IsEnabled(this Xamarin.Forms.SwitchCell obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.IsEnabledProperty, value);
    public static Xamarin.Forms.SwitchCell IsEnabled(this Xamarin.Forms.SwitchCell obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.SwitchCell IsEnabled<TFrom>(this Xamarin.Forms.SwitchCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.SwitchCell ClassId(this Xamarin.Forms.SwitchCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.ClassIdProperty, value);
    public static Xamarin.Forms.SwitchCell ClassId(this Xamarin.Forms.SwitchCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.ClassIdProperty, value, mode);
    public static Xamarin.Forms.SwitchCell ClassId<TFrom>(this Xamarin.Forms.SwitchCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.ClassIdProperty, value, selector);
    public static Xamarin.Forms.SwitchCell BindingContext(this Xamarin.Forms.SwitchCell obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.BindingContextProperty, value);
    public static Xamarin.Forms.SwitchCell BindingContext(this Xamarin.Forms.SwitchCell obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.BindingContextProperty, value, mode);
    public static Xamarin.Forms.SwitchCell BindingContext<TFrom>(this Xamarin.Forms.SwitchCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SwitchCell.BindingContextProperty, value, selector);
  }

  public static partial class TextCellExtensions {
    public static Xamarin.Forms.TextCell Command(this Xamarin.Forms.TextCell obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.CommandProperty, value);
    public static Xamarin.Forms.TextCell Command(this Xamarin.Forms.TextCell obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.CommandProperty, value, mode);
    public static Xamarin.Forms.TextCell Command<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.CommandProperty, value, selector);
 public static Xamarin.Forms.TextCell Command(this Xamarin.Forms.TextCell obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.CommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.TextCell CommandParameter(this Xamarin.Forms.TextCell obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.CommandParameterProperty, value);
    public static Xamarin.Forms.TextCell CommandParameter(this Xamarin.Forms.TextCell obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.CommandParameterProperty, value, mode);
    public static Xamarin.Forms.TextCell CommandParameter<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.CommandParameterProperty, value, selector);
    public static Xamarin.Forms.TextCell Text(this Xamarin.Forms.TextCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.TextProperty, value);
    public static Xamarin.Forms.TextCell Text(this Xamarin.Forms.TextCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.TextProperty, value, mode);
    public static Xamarin.Forms.TextCell Text<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.TextProperty, value, selector);
    public static Xamarin.Forms.TextCell Detail(this Xamarin.Forms.TextCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.DetailProperty, value);
    public static Xamarin.Forms.TextCell Detail(this Xamarin.Forms.TextCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.DetailProperty, value, mode);
    public static Xamarin.Forms.TextCell Detail<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.DetailProperty, value, selector);
    public static Xamarin.Forms.TextCell TextColor(this Xamarin.Forms.TextCell obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.TextColorProperty, value);
    public static Xamarin.Forms.TextCell TextColor(this Xamarin.Forms.TextCell obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.TextColorProperty, value, mode);
    public static Xamarin.Forms.TextCell TextColor<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.TextColorProperty, value, selector);
    public static Xamarin.Forms.TextCell DetailColor(this Xamarin.Forms.TextCell obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.DetailColorProperty, value);
    public static Xamarin.Forms.TextCell DetailColor(this Xamarin.Forms.TextCell obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.DetailColorProperty, value, mode);
    public static Xamarin.Forms.TextCell DetailColor<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.DetailColorProperty, value, selector);
    public static Xamarin.Forms.TextCell IsEnabled(this Xamarin.Forms.TextCell obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.IsEnabledProperty, value);
    public static Xamarin.Forms.TextCell IsEnabled(this Xamarin.Forms.TextCell obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.TextCell IsEnabled<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.TextCell ClassId(this Xamarin.Forms.TextCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.ClassIdProperty, value);
    public static Xamarin.Forms.TextCell ClassId(this Xamarin.Forms.TextCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.ClassIdProperty, value, mode);
    public static Xamarin.Forms.TextCell ClassId<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.ClassIdProperty, value, selector);
    public static Xamarin.Forms.TextCell BindingContext(this Xamarin.Forms.TextCell obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.BindingContextProperty, value);
    public static Xamarin.Forms.TextCell BindingContext(this Xamarin.Forms.TextCell obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TextCell BindingContext<TFrom>(this Xamarin.Forms.TextCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TextCell.BindingContextProperty, value, selector);
  }

  public static partial class ViewCellExtensions {
    public static Xamarin.Forms.ViewCell IsEnabled(this Xamarin.Forms.ViewCell obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.IsEnabledProperty, value);
    public static Xamarin.Forms.ViewCell IsEnabled(this Xamarin.Forms.ViewCell obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ViewCell IsEnabled<TFrom>(this Xamarin.Forms.ViewCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ViewCell ClassId(this Xamarin.Forms.ViewCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.ClassIdProperty, value);
    public static Xamarin.Forms.ViewCell ClassId(this Xamarin.Forms.ViewCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ViewCell ClassId<TFrom>(this Xamarin.Forms.ViewCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ViewCell BindingContext(this Xamarin.Forms.ViewCell obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.BindingContextProperty, value);
    public static Xamarin.Forms.ViewCell BindingContext(this Xamarin.Forms.ViewCell obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ViewCell BindingContext<TFrom>(this Xamarin.Forms.ViewCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ViewCell.BindingContextProperty, value, selector);
  }

  public static partial class TableSectionExtensions {
    public static Xamarin.Forms.TableSection Title(this Xamarin.Forms.TableSection obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableSection.TitleProperty, value);
    public static Xamarin.Forms.TableSection Title(this Xamarin.Forms.TableSection obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableSection.TitleProperty, value, mode);
    public static Xamarin.Forms.TableSection Title<TFrom>(this Xamarin.Forms.TableSection obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableSection.TitleProperty, value, selector);
    public static Xamarin.Forms.TableSection BindingContext(this Xamarin.Forms.TableSection obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableSection.BindingContextProperty, value);
    public static Xamarin.Forms.TableSection BindingContext(this Xamarin.Forms.TableSection obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableSection.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TableSection BindingContext<TFrom>(this Xamarin.Forms.TableSection obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableSection.BindingContextProperty, value, selector);
  }

  public static partial class UriImageSourceExtensions {
    public static Xamarin.Forms.UriImageSource Uri(this Xamarin.Forms.UriImageSource obj, System.Uri value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.UriProperty, value);
    public static Xamarin.Forms.UriImageSource Uri(this Xamarin.Forms.UriImageSource obj, BindableValue<System.Uri> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.UriProperty, value, mode);
    public static Xamarin.Forms.UriImageSource Uri<TFrom>(this Xamarin.Forms.UriImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.Uri> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.UriProperty, value, selector);
    public static Xamarin.Forms.UriImageSource ClassId(this Xamarin.Forms.UriImageSource obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.ClassIdProperty, value);
    public static Xamarin.Forms.UriImageSource ClassId(this Xamarin.Forms.UriImageSource obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.ClassIdProperty, value, mode);
    public static Xamarin.Forms.UriImageSource ClassId<TFrom>(this Xamarin.Forms.UriImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.ClassIdProperty, value, selector);
    public static Xamarin.Forms.UriImageSource BindingContext(this Xamarin.Forms.UriImageSource obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.BindingContextProperty, value);
    public static Xamarin.Forms.UriImageSource BindingContext(this Xamarin.Forms.UriImageSource obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.BindingContextProperty, value, mode);
    public static Xamarin.Forms.UriImageSource BindingContext<TFrom>(this Xamarin.Forms.UriImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.UriImageSource.BindingContextProperty, value, selector);
  }

  public static partial class FileImageSourceExtensions {
    public static Xamarin.Forms.FileImageSource File(this Xamarin.Forms.FileImageSource obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.FileProperty, value);
    public static Xamarin.Forms.FileImageSource File(this Xamarin.Forms.FileImageSource obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.FileProperty, value, mode);
    public static Xamarin.Forms.FileImageSource File<TFrom>(this Xamarin.Forms.FileImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.FileProperty, value, selector);
    public static Xamarin.Forms.FileImageSource ClassId(this Xamarin.Forms.FileImageSource obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.ClassIdProperty, value);
    public static Xamarin.Forms.FileImageSource ClassId(this Xamarin.Forms.FileImageSource obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.ClassIdProperty, value, mode);
    public static Xamarin.Forms.FileImageSource ClassId<TFrom>(this Xamarin.Forms.FileImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.ClassIdProperty, value, selector);
    public static Xamarin.Forms.FileImageSource BindingContext(this Xamarin.Forms.FileImageSource obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.BindingContextProperty, value);
    public static Xamarin.Forms.FileImageSource BindingContext(this Xamarin.Forms.FileImageSource obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.BindingContextProperty, value, mode);
    public static Xamarin.Forms.FileImageSource BindingContext<TFrom>(this Xamarin.Forms.FileImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.FileImageSource.BindingContextProperty, value, selector);
  }

  public static partial class StreamImageSourceExtensions {
    public static Xamarin.Forms.StreamImageSource Stream(this Xamarin.Forms.StreamImageSource obj, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IO.Stream>> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.StreamProperty, value);
    public static Xamarin.Forms.StreamImageSource Stream(this Xamarin.Forms.StreamImageSource obj, BindableValue<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IO.Stream>>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.StreamProperty, value, mode);
    public static Xamarin.Forms.StreamImageSource Stream<TFrom>(this Xamarin.Forms.StreamImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IO.Stream>>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.StreamProperty, value, selector);
    public static Xamarin.Forms.StreamImageSource ClassId(this Xamarin.Forms.StreamImageSource obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.ClassIdProperty, value);
    public static Xamarin.Forms.StreamImageSource ClassId(this Xamarin.Forms.StreamImageSource obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.ClassIdProperty, value, mode);
    public static Xamarin.Forms.StreamImageSource ClassId<TFrom>(this Xamarin.Forms.StreamImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.ClassIdProperty, value, selector);
    public static Xamarin.Forms.StreamImageSource BindingContext(this Xamarin.Forms.StreamImageSource obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.BindingContextProperty, value);
    public static Xamarin.Forms.StreamImageSource BindingContext(this Xamarin.Forms.StreamImageSource obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.BindingContextProperty, value, mode);
    public static Xamarin.Forms.StreamImageSource BindingContext<TFrom>(this Xamarin.Forms.StreamImageSource obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StreamImageSource.BindingContextProperty, value, selector);
  }

  public static partial class PinchGestureRecognizerExtensions {
    public static Xamarin.Forms.PinchGestureRecognizer ClassId(this Xamarin.Forms.PinchGestureRecognizer obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PinchGestureRecognizer.ClassIdProperty, value);
    public static Xamarin.Forms.PinchGestureRecognizer ClassId(this Xamarin.Forms.PinchGestureRecognizer obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PinchGestureRecognizer.ClassIdProperty, value, mode);
    public static Xamarin.Forms.PinchGestureRecognizer ClassId<TFrom>(this Xamarin.Forms.PinchGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PinchGestureRecognizer.ClassIdProperty, value, selector);
    public static Xamarin.Forms.PinchGestureRecognizer BindingContext(this Xamarin.Forms.PinchGestureRecognizer obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PinchGestureRecognizer.BindingContextProperty, value);
    public static Xamarin.Forms.PinchGestureRecognizer BindingContext(this Xamarin.Forms.PinchGestureRecognizer obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PinchGestureRecognizer.BindingContextProperty, value, mode);
    public static Xamarin.Forms.PinchGestureRecognizer BindingContext<TFrom>(this Xamarin.Forms.PinchGestureRecognizer obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.PinchGestureRecognizer.BindingContextProperty, value, selector);
  }

  public static partial class ImageCellExtensions {
    public static Xamarin.Forms.ImageCell ImageSource(this Xamarin.Forms.ImageCell obj, Xamarin.Forms.ImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.ImageSourceProperty, value);
    public static Xamarin.Forms.ImageCell ImageSource(this Xamarin.Forms.ImageCell obj, BindableValue<Xamarin.Forms.ImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.ImageSourceProperty, value, mode);
    public static Xamarin.Forms.ImageCell ImageSource<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.ImageSourceProperty, value, selector);
    public static Xamarin.Forms.ImageCell Command(this Xamarin.Forms.ImageCell obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.CommandProperty, value);
    public static Xamarin.Forms.ImageCell Command(this Xamarin.Forms.ImageCell obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.CommandProperty, value, mode);
    public static Xamarin.Forms.ImageCell Command<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.CommandProperty, value, selector);
 public static Xamarin.Forms.ImageCell Command(this Xamarin.Forms.ImageCell obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.CommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.ImageCell CommandParameter(this Xamarin.Forms.ImageCell obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.CommandParameterProperty, value);
    public static Xamarin.Forms.ImageCell CommandParameter(this Xamarin.Forms.ImageCell obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.CommandParameterProperty, value, mode);
    public static Xamarin.Forms.ImageCell CommandParameter<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.CommandParameterProperty, value, selector);
    public static Xamarin.Forms.ImageCell Text(this Xamarin.Forms.ImageCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.TextProperty, value);
    public static Xamarin.Forms.ImageCell Text(this Xamarin.Forms.ImageCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.TextProperty, value, mode);
    public static Xamarin.Forms.ImageCell Text<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.TextProperty, value, selector);
    public static Xamarin.Forms.ImageCell Detail(this Xamarin.Forms.ImageCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.DetailProperty, value);
    public static Xamarin.Forms.ImageCell Detail(this Xamarin.Forms.ImageCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.DetailProperty, value, mode);
    public static Xamarin.Forms.ImageCell Detail<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.DetailProperty, value, selector);
    public static Xamarin.Forms.ImageCell TextColor(this Xamarin.Forms.ImageCell obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.TextColorProperty, value);
    public static Xamarin.Forms.ImageCell TextColor(this Xamarin.Forms.ImageCell obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.TextColorProperty, value, mode);
    public static Xamarin.Forms.ImageCell TextColor<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.TextColorProperty, value, selector);
    public static Xamarin.Forms.ImageCell DetailColor(this Xamarin.Forms.ImageCell obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.DetailColorProperty, value);
    public static Xamarin.Forms.ImageCell DetailColor(this Xamarin.Forms.ImageCell obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.DetailColorProperty, value, mode);
    public static Xamarin.Forms.ImageCell DetailColor<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.DetailColorProperty, value, selector);
    public static Xamarin.Forms.ImageCell IsEnabled(this Xamarin.Forms.ImageCell obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.IsEnabledProperty, value);
    public static Xamarin.Forms.ImageCell IsEnabled(this Xamarin.Forms.ImageCell obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ImageCell IsEnabled<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ImageCell ClassId(this Xamarin.Forms.ImageCell obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.ClassIdProperty, value);
    public static Xamarin.Forms.ImageCell ClassId(this Xamarin.Forms.ImageCell obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ImageCell ClassId<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ImageCell BindingContext(this Xamarin.Forms.ImageCell obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.BindingContextProperty, value);
    public static Xamarin.Forms.ImageCell BindingContext(this Xamarin.Forms.ImageCell obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ImageCell BindingContext<TFrom>(this Xamarin.Forms.ImageCell obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ImageCell.BindingContextProperty, value, selector);
  }

  public static partial class TemplatedPageExtensions {
    public static Xamarin.Forms.TemplatedPage ControlTemplate(this Xamarin.Forms.TemplatedPage obj, Xamarin.Forms.ControlTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ControlTemplateProperty, value);
    public static Xamarin.Forms.TemplatedPage ControlTemplate(this Xamarin.Forms.TemplatedPage obj, BindableValue<Xamarin.Forms.ControlTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ControlTemplateProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage ControlTemplate<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ControlTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ControlTemplateProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage BackgroundImage(this Xamarin.Forms.TemplatedPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BackgroundImageProperty, value);
    public static Xamarin.Forms.TemplatedPage BackgroundImage(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BackgroundImageProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage BackgroundImage<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BackgroundImageProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage IsBusy(this Xamarin.Forms.TemplatedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsBusyProperty, value);
    public static Xamarin.Forms.TemplatedPage IsBusy(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsBusyProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage IsBusy<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsBusyProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Padding(this Xamarin.Forms.TemplatedPage obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.PaddingProperty, value);
    public static Xamarin.Forms.TemplatedPage Padding(this Xamarin.Forms.TemplatedPage obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.PaddingProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Padding<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.PaddingProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Title(this Xamarin.Forms.TemplatedPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TitleProperty, value);
    public static Xamarin.Forms.TemplatedPage Title(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TitleProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Title<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TitleProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Icon(this Xamarin.Forms.TemplatedPage obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IconProperty, value);
    public static Xamarin.Forms.TemplatedPage Icon(this Xamarin.Forms.TemplatedPage obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IconProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Icon<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IconProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Navigation(this Xamarin.Forms.TemplatedPage obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.NavigationProperty, value);
    public static Xamarin.Forms.TemplatedPage Navigation(this Xamarin.Forms.TemplatedPage obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.NavigationProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Navigation<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.NavigationProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage InputTransparent(this Xamarin.Forms.TemplatedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.InputTransparentProperty, value);
    public static Xamarin.Forms.TemplatedPage InputTransparent(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage InputTransparent<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage IsEnabled(this Xamarin.Forms.TemplatedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsEnabledProperty, value);
    public static Xamarin.Forms.TemplatedPage IsEnabled(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage IsEnabled<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage X(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.XProperty, value);
    public static Xamarin.Forms.TemplatedPage X(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.XProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage X<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.XProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Y(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.YProperty, value);
    public static Xamarin.Forms.TemplatedPage Y(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.YProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Y<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.YProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage AnchorX(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.AnchorXProperty, value);
    public static Xamarin.Forms.TemplatedPage AnchorX(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.AnchorXProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage AnchorX<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.AnchorXProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage AnchorY(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.AnchorYProperty, value);
    public static Xamarin.Forms.TemplatedPage AnchorY(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.AnchorYProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage AnchorY<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.AnchorYProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage TranslationX(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TranslationXProperty, value);
    public static Xamarin.Forms.TemplatedPage TranslationX(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TranslationXProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage TranslationX<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TranslationXProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage TranslationY(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TranslationYProperty, value);
    public static Xamarin.Forms.TemplatedPage TranslationY(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TranslationYProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage TranslationY<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TranslationYProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Width(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.WidthProperty, value);
    public static Xamarin.Forms.TemplatedPage Width(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.WidthProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Width<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.WidthProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Height(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.HeightProperty, value);
    public static Xamarin.Forms.TemplatedPage Height(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.HeightProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Height<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.HeightProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Rotation(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationProperty, value);
    public static Xamarin.Forms.TemplatedPage Rotation(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Rotation<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage RotationX(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationXProperty, value);
    public static Xamarin.Forms.TemplatedPage RotationX(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationXProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage RotationX<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationXProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage RotationY(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationYProperty, value);
    public static Xamarin.Forms.TemplatedPage RotationY(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationYProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage RotationY<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.RotationYProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Scale(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ScaleProperty, value);
    public static Xamarin.Forms.TemplatedPage Scale(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ScaleProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Scale<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ScaleProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage IsVisible(this Xamarin.Forms.TemplatedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsVisibleProperty, value);
    public static Xamarin.Forms.TemplatedPage IsVisible(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage IsVisible<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Opacity(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.OpacityProperty, value);
    public static Xamarin.Forms.TemplatedPage Opacity(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.OpacityProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Opacity<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.OpacityProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage BackgroundColor(this Xamarin.Forms.TemplatedPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BackgroundColorProperty, value);
    public static Xamarin.Forms.TemplatedPage BackgroundColor(this Xamarin.Forms.TemplatedPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage BackgroundColor<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Behaviors(this Xamarin.Forms.TemplatedPage obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BehaviorsProperty, value);
    public static Xamarin.Forms.TemplatedPage Behaviors(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Behaviors<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Triggers(this Xamarin.Forms.TemplatedPage obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TriggersProperty, value);
    public static Xamarin.Forms.TemplatedPage Triggers(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TriggersProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Triggers<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.TriggersProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage Style(this Xamarin.Forms.TemplatedPage obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.StyleProperty, value);
    public static Xamarin.Forms.TemplatedPage Style(this Xamarin.Forms.TemplatedPage obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.StyleProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage Style<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.StyleProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage WidthRequest(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.WidthRequestProperty, value);
    public static Xamarin.Forms.TemplatedPage WidthRequest(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage WidthRequest<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage HeightRequest(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.HeightRequestProperty, value);
    public static Xamarin.Forms.TemplatedPage HeightRequest(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage HeightRequest<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage MinimumWidthRequest(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.TemplatedPage MinimumWidthRequest(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage MinimumWidthRequest<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage MinimumHeightRequest(this Xamarin.Forms.TemplatedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.TemplatedPage MinimumHeightRequest(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage MinimumHeightRequest<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage IsFocused(this Xamarin.Forms.TemplatedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsFocusedProperty, value);
    public static Xamarin.Forms.TemplatedPage IsFocused(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage IsFocused<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage ClassId(this Xamarin.Forms.TemplatedPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ClassIdProperty, value);
    public static Xamarin.Forms.TemplatedPage ClassId(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ClassIdProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage ClassId<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.ClassIdProperty, value, selector);
    public static Xamarin.Forms.TemplatedPage BindingContext(this Xamarin.Forms.TemplatedPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BindingContextProperty, value);
    public static Xamarin.Forms.TemplatedPage BindingContext(this Xamarin.Forms.TemplatedPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TemplatedPage BindingContext<TFrom>(this Xamarin.Forms.TemplatedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedPage.BindingContextProperty, value, selector);
  }

  public static partial class NavigationPageExtensions {
    public static Xamarin.Forms.NavigationPage Tint(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TintProperty, value);
    public static Xamarin.Forms.NavigationPage Tint(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TintProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Tint<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TintProperty, value, selector);
    public static Xamarin.Forms.NavigationPage BarBackgroundColor(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BarBackgroundColorProperty, value);
    public static Xamarin.Forms.NavigationPage BarBackgroundColor(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BarBackgroundColorProperty, value, mode);
    public static Xamarin.Forms.NavigationPage BarBackgroundColor<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BarBackgroundColorProperty, value, selector);
    public static Xamarin.Forms.NavigationPage BarTextColor(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BarTextColorProperty, value);
    public static Xamarin.Forms.NavigationPage BarTextColor(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BarTextColorProperty, value, mode);
    public static Xamarin.Forms.NavigationPage BarTextColor<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BarTextColorProperty, value, selector);
    public static Xamarin.Forms.NavigationPage CurrentPage(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Page value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.CurrentPageProperty, value);
    public static Xamarin.Forms.NavigationPage CurrentPage(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Page> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.CurrentPageProperty, value, mode);
    public static Xamarin.Forms.NavigationPage CurrentPage<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Page> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.CurrentPageProperty, value, selector);
    public static Xamarin.Forms.NavigationPage RootPage(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Page value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RootPageProperty, value);
    public static Xamarin.Forms.NavigationPage RootPage(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Page> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RootPageProperty, value, mode);
    public static Xamarin.Forms.NavigationPage RootPage<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Page> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RootPageProperty, value, selector);
    public static Xamarin.Forms.NavigationPage BackgroundImage(this Xamarin.Forms.NavigationPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BackgroundImageProperty, value);
    public static Xamarin.Forms.NavigationPage BackgroundImage(this Xamarin.Forms.NavigationPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BackgroundImageProperty, value, mode);
    public static Xamarin.Forms.NavigationPage BackgroundImage<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BackgroundImageProperty, value, selector);
    public static Xamarin.Forms.NavigationPage IsBusy(this Xamarin.Forms.NavigationPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsBusyProperty, value);
    public static Xamarin.Forms.NavigationPage IsBusy(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsBusyProperty, value, mode);
    public static Xamarin.Forms.NavigationPage IsBusy<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsBusyProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Padding(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.PaddingProperty, value);
    public static Xamarin.Forms.NavigationPage Padding(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.PaddingProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Padding<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.PaddingProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Title(this Xamarin.Forms.NavigationPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TitleProperty, value);
    public static Xamarin.Forms.NavigationPage Title(this Xamarin.Forms.NavigationPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TitleProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Title<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TitleProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Icon(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IconProperty, value);
    public static Xamarin.Forms.NavigationPage Icon(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IconProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Icon<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IconProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Navigation(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.NavigationProperty, value);
    public static Xamarin.Forms.NavigationPage Navigation(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.NavigationProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Navigation<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.NavigationProperty, value, selector);
    public static Xamarin.Forms.NavigationPage InputTransparent(this Xamarin.Forms.NavigationPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.InputTransparentProperty, value);
    public static Xamarin.Forms.NavigationPage InputTransparent(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.NavigationPage InputTransparent<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.NavigationPage IsEnabled(this Xamarin.Forms.NavigationPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsEnabledProperty, value);
    public static Xamarin.Forms.NavigationPage IsEnabled(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.NavigationPage IsEnabled<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.NavigationPage X(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.XProperty, value);
    public static Xamarin.Forms.NavigationPage X(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.XProperty, value, mode);
    public static Xamarin.Forms.NavigationPage X<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.XProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Y(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.YProperty, value);
    public static Xamarin.Forms.NavigationPage Y(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.YProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Y<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.YProperty, value, selector);
    public static Xamarin.Forms.NavigationPage AnchorX(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.AnchorXProperty, value);
    public static Xamarin.Forms.NavigationPage AnchorX(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.AnchorXProperty, value, mode);
    public static Xamarin.Forms.NavigationPage AnchorX<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.AnchorXProperty, value, selector);
    public static Xamarin.Forms.NavigationPage AnchorY(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.AnchorYProperty, value);
    public static Xamarin.Forms.NavigationPage AnchorY(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.AnchorYProperty, value, mode);
    public static Xamarin.Forms.NavigationPage AnchorY<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.AnchorYProperty, value, selector);
    public static Xamarin.Forms.NavigationPage TranslationX(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TranslationXProperty, value);
    public static Xamarin.Forms.NavigationPage TranslationX(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TranslationXProperty, value, mode);
    public static Xamarin.Forms.NavigationPage TranslationX<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TranslationXProperty, value, selector);
    public static Xamarin.Forms.NavigationPage TranslationY(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TranslationYProperty, value);
    public static Xamarin.Forms.NavigationPage TranslationY(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TranslationYProperty, value, mode);
    public static Xamarin.Forms.NavigationPage TranslationY<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TranslationYProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Width(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.WidthProperty, value);
    public static Xamarin.Forms.NavigationPage Width(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.WidthProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Width<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.WidthProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Height(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.HeightProperty, value);
    public static Xamarin.Forms.NavigationPage Height(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.HeightProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Height<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.HeightProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Rotation(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationProperty, value);
    public static Xamarin.Forms.NavigationPage Rotation(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Rotation<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationProperty, value, selector);
    public static Xamarin.Forms.NavigationPage RotationX(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationXProperty, value);
    public static Xamarin.Forms.NavigationPage RotationX(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationXProperty, value, mode);
    public static Xamarin.Forms.NavigationPage RotationX<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationXProperty, value, selector);
    public static Xamarin.Forms.NavigationPage RotationY(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationYProperty, value);
    public static Xamarin.Forms.NavigationPage RotationY(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationYProperty, value, mode);
    public static Xamarin.Forms.NavigationPage RotationY<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.RotationYProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Scale(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.ScaleProperty, value);
    public static Xamarin.Forms.NavigationPage Scale(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.ScaleProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Scale<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.ScaleProperty, value, selector);
    public static Xamarin.Forms.NavigationPage IsVisible(this Xamarin.Forms.NavigationPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsVisibleProperty, value);
    public static Xamarin.Forms.NavigationPage IsVisible(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.NavigationPage IsVisible<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Opacity(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.OpacityProperty, value);
    public static Xamarin.Forms.NavigationPage Opacity(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.OpacityProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Opacity<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.OpacityProperty, value, selector);
    public static Xamarin.Forms.NavigationPage BackgroundColor(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BackgroundColorProperty, value);
    public static Xamarin.Forms.NavigationPage BackgroundColor(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.NavigationPage BackgroundColor<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Behaviors(this Xamarin.Forms.NavigationPage obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BehaviorsProperty, value);
    public static Xamarin.Forms.NavigationPage Behaviors(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Behaviors<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Triggers(this Xamarin.Forms.NavigationPage obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TriggersProperty, value);
    public static Xamarin.Forms.NavigationPage Triggers(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TriggersProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Triggers<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.TriggersProperty, value, selector);
    public static Xamarin.Forms.NavigationPage Style(this Xamarin.Forms.NavigationPage obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.StyleProperty, value);
    public static Xamarin.Forms.NavigationPage Style(this Xamarin.Forms.NavigationPage obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.StyleProperty, value, mode);
    public static Xamarin.Forms.NavigationPage Style<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.StyleProperty, value, selector);
    public static Xamarin.Forms.NavigationPage WidthRequest(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.WidthRequestProperty, value);
    public static Xamarin.Forms.NavigationPage WidthRequest(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.NavigationPage WidthRequest<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.NavigationPage HeightRequest(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.HeightRequestProperty, value);
    public static Xamarin.Forms.NavigationPage HeightRequest(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.NavigationPage HeightRequest<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.NavigationPage MinimumWidthRequest(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.NavigationPage MinimumWidthRequest(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.NavigationPage MinimumWidthRequest<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.NavigationPage MinimumHeightRequest(this Xamarin.Forms.NavigationPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.NavigationPage MinimumHeightRequest(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.NavigationPage MinimumHeightRequest<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.NavigationPage IsFocused(this Xamarin.Forms.NavigationPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsFocusedProperty, value);
    public static Xamarin.Forms.NavigationPage IsFocused(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.NavigationPage IsFocused<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.NavigationPage ClassId(this Xamarin.Forms.NavigationPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.ClassIdProperty, value);
    public static Xamarin.Forms.NavigationPage ClassId(this Xamarin.Forms.NavigationPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.ClassIdProperty, value, mode);
    public static Xamarin.Forms.NavigationPage ClassId<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.ClassIdProperty, value, selector);
    public static Xamarin.Forms.NavigationPage BindingContext(this Xamarin.Forms.NavigationPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BindingContextProperty, value);
    public static Xamarin.Forms.NavigationPage BindingContext(this Xamarin.Forms.NavigationPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BindingContextProperty, value, mode);
    public static Xamarin.Forms.NavigationPage BindingContext<TFrom>(this Xamarin.Forms.NavigationPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.NavigationPage.BindingContextProperty, value, selector);
  }

  public static partial class ToolbarItemExtensions {
    public static Xamarin.Forms.ToolbarItem Text(this Xamarin.Forms.ToolbarItem obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.TextProperty, value);
    public static Xamarin.Forms.ToolbarItem Text(this Xamarin.Forms.ToolbarItem obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.TextProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem Text<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.TextProperty, value, selector);
    public static Xamarin.Forms.ToolbarItem Command(this Xamarin.Forms.ToolbarItem obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.CommandProperty, value);
    public static Xamarin.Forms.ToolbarItem Command(this Xamarin.Forms.ToolbarItem obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.CommandProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem Command<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.CommandProperty, value, selector);
 public static Xamarin.Forms.ToolbarItem Command(this Xamarin.Forms.ToolbarItem obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.CommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.ToolbarItem CommandParameter(this Xamarin.Forms.ToolbarItem obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.CommandParameterProperty, value);
    public static Xamarin.Forms.ToolbarItem CommandParameter(this Xamarin.Forms.ToolbarItem obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.CommandParameterProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem CommandParameter<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.CommandParameterProperty, value, selector);
    public static Xamarin.Forms.ToolbarItem IsDestructive(this Xamarin.Forms.ToolbarItem obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IsDestructiveProperty, value);
    public static Xamarin.Forms.ToolbarItem IsDestructive(this Xamarin.Forms.ToolbarItem obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IsDestructiveProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem IsDestructive<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IsDestructiveProperty, value, selector);
    public static Xamarin.Forms.ToolbarItem Icon(this Xamarin.Forms.ToolbarItem obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IconProperty, value);
    public static Xamarin.Forms.ToolbarItem Icon(this Xamarin.Forms.ToolbarItem obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IconProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem Icon<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IconProperty, value, selector);
    public static Xamarin.Forms.ToolbarItem IsEnabled(this Xamarin.Forms.ToolbarItem obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IsEnabledProperty, value);
    public static Xamarin.Forms.ToolbarItem IsEnabled(this Xamarin.Forms.ToolbarItem obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem IsEnabled<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ToolbarItem ClassId(this Xamarin.Forms.ToolbarItem obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.ClassIdProperty, value);
    public static Xamarin.Forms.ToolbarItem ClassId(this Xamarin.Forms.ToolbarItem obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem ClassId<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ToolbarItem BindingContext(this Xamarin.Forms.ToolbarItem obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.BindingContextProperty, value);
    public static Xamarin.Forms.ToolbarItem BindingContext(this Xamarin.Forms.ToolbarItem obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ToolbarItem BindingContext<TFrom>(this Xamarin.Forms.ToolbarItem obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ToolbarItem.BindingContextProperty, value, selector);
  }

  public static partial class TableViewExtensions {
    public static Xamarin.Forms.TableView RowHeight(this Xamarin.Forms.TableView obj, System.Int32 value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RowHeightProperty, value);
    public static Xamarin.Forms.TableView RowHeight(this Xamarin.Forms.TableView obj, BindableValue<System.Int32> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RowHeightProperty, value, mode);
    public static Xamarin.Forms.TableView RowHeight<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Int32> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RowHeightProperty, value, selector);
    public static Xamarin.Forms.TableView HasUnevenRows(this Xamarin.Forms.TableView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HasUnevenRowsProperty, value);
    public static Xamarin.Forms.TableView HasUnevenRows(this Xamarin.Forms.TableView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HasUnevenRowsProperty, value, mode);
    public static Xamarin.Forms.TableView HasUnevenRows<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HasUnevenRowsProperty, value, selector);
    public static Xamarin.Forms.TableView VerticalOptions(this Xamarin.Forms.TableView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.TableView VerticalOptions(this Xamarin.Forms.TableView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.TableView VerticalOptions<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.TableView HorizontalOptions(this Xamarin.Forms.TableView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.TableView HorizontalOptions(this Xamarin.Forms.TableView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.TableView HorizontalOptions<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.TableView Margin(this Xamarin.Forms.TableView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MarginProperty, value);
    public static Xamarin.Forms.TableView Margin(this Xamarin.Forms.TableView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MarginProperty, value, mode);
    public static Xamarin.Forms.TableView Margin<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MarginProperty, value, selector);
    public static Xamarin.Forms.TableView Navigation(this Xamarin.Forms.TableView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.NavigationProperty, value);
    public static Xamarin.Forms.TableView Navigation(this Xamarin.Forms.TableView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.NavigationProperty, value, mode);
    public static Xamarin.Forms.TableView Navigation<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.NavigationProperty, value, selector);
    public static Xamarin.Forms.TableView InputTransparent(this Xamarin.Forms.TableView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.InputTransparentProperty, value);
    public static Xamarin.Forms.TableView InputTransparent(this Xamarin.Forms.TableView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.TableView InputTransparent<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.TableView IsEnabled(this Xamarin.Forms.TableView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsEnabledProperty, value);
    public static Xamarin.Forms.TableView IsEnabled(this Xamarin.Forms.TableView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.TableView IsEnabled<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.TableView X(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.XProperty, value);
    public static Xamarin.Forms.TableView X(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.XProperty, value, mode);
    public static Xamarin.Forms.TableView X<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.XProperty, value, selector);
    public static Xamarin.Forms.TableView Y(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.YProperty, value);
    public static Xamarin.Forms.TableView Y(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.YProperty, value, mode);
    public static Xamarin.Forms.TableView Y<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.YProperty, value, selector);
    public static Xamarin.Forms.TableView AnchorX(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.AnchorXProperty, value);
    public static Xamarin.Forms.TableView AnchorX(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.TableView AnchorX<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.TableView AnchorY(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.AnchorYProperty, value);
    public static Xamarin.Forms.TableView AnchorY(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.TableView AnchorY<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.TableView TranslationX(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TranslationXProperty, value);
    public static Xamarin.Forms.TableView TranslationX(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.TableView TranslationX<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.TableView TranslationY(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TranslationYProperty, value);
    public static Xamarin.Forms.TableView TranslationY(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.TableView TranslationY<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.TableView Width(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.WidthProperty, value);
    public static Xamarin.Forms.TableView Width(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.WidthProperty, value, mode);
    public static Xamarin.Forms.TableView Width<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.WidthProperty, value, selector);
    public static Xamarin.Forms.TableView Height(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HeightProperty, value);
    public static Xamarin.Forms.TableView Height(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HeightProperty, value, mode);
    public static Xamarin.Forms.TableView Height<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HeightProperty, value, selector);
    public static Xamarin.Forms.TableView Rotation(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationProperty, value);
    public static Xamarin.Forms.TableView Rotation(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationProperty, value, mode);
    public static Xamarin.Forms.TableView Rotation<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationProperty, value, selector);
    public static Xamarin.Forms.TableView RotationX(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationXProperty, value);
    public static Xamarin.Forms.TableView RotationX(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationXProperty, value, mode);
    public static Xamarin.Forms.TableView RotationX<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationXProperty, value, selector);
    public static Xamarin.Forms.TableView RotationY(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationYProperty, value);
    public static Xamarin.Forms.TableView RotationY(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationYProperty, value, mode);
    public static Xamarin.Forms.TableView RotationY<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.RotationYProperty, value, selector);
    public static Xamarin.Forms.TableView Scale(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.ScaleProperty, value);
    public static Xamarin.Forms.TableView Scale(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.ScaleProperty, value, mode);
    public static Xamarin.Forms.TableView Scale<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.ScaleProperty, value, selector);
    public static Xamarin.Forms.TableView IsVisible(this Xamarin.Forms.TableView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsVisibleProperty, value);
    public static Xamarin.Forms.TableView IsVisible(this Xamarin.Forms.TableView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.TableView IsVisible<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.TableView Opacity(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.OpacityProperty, value);
    public static Xamarin.Forms.TableView Opacity(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.OpacityProperty, value, mode);
    public static Xamarin.Forms.TableView Opacity<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.OpacityProperty, value, selector);
    public static Xamarin.Forms.TableView BackgroundColor(this Xamarin.Forms.TableView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BackgroundColorProperty, value);
    public static Xamarin.Forms.TableView BackgroundColor(this Xamarin.Forms.TableView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.TableView BackgroundColor<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.TableView Behaviors(this Xamarin.Forms.TableView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BehaviorsProperty, value);
    public static Xamarin.Forms.TableView Behaviors(this Xamarin.Forms.TableView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.TableView Behaviors<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.TableView Triggers(this Xamarin.Forms.TableView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TriggersProperty, value);
    public static Xamarin.Forms.TableView Triggers(this Xamarin.Forms.TableView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TriggersProperty, value, mode);
    public static Xamarin.Forms.TableView Triggers<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.TriggersProperty, value, selector);
    public static Xamarin.Forms.TableView Style(this Xamarin.Forms.TableView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.StyleProperty, value);
    public static Xamarin.Forms.TableView Style(this Xamarin.Forms.TableView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.StyleProperty, value, mode);
    public static Xamarin.Forms.TableView Style<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.StyleProperty, value, selector);
    public static Xamarin.Forms.TableView WidthRequest(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.WidthRequestProperty, value);
    public static Xamarin.Forms.TableView WidthRequest(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.TableView WidthRequest<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.TableView HeightRequest(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HeightRequestProperty, value);
    public static Xamarin.Forms.TableView HeightRequest(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.TableView HeightRequest<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.TableView MinimumWidthRequest(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.TableView MinimumWidthRequest(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.TableView MinimumWidthRequest<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.TableView MinimumHeightRequest(this Xamarin.Forms.TableView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.TableView MinimumHeightRequest(this Xamarin.Forms.TableView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.TableView MinimumHeightRequest<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.TableView IsFocused(this Xamarin.Forms.TableView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsFocusedProperty, value);
    public static Xamarin.Forms.TableView IsFocused(this Xamarin.Forms.TableView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.TableView IsFocused<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.TableView ClassId(this Xamarin.Forms.TableView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.ClassIdProperty, value);
    public static Xamarin.Forms.TableView ClassId(this Xamarin.Forms.TableView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.TableView ClassId<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.TableView BindingContext(this Xamarin.Forms.TableView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BindingContextProperty, value);
    public static Xamarin.Forms.TableView BindingContext(this Xamarin.Forms.TableView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TableView BindingContext<TFrom>(this Xamarin.Forms.TableView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TableView.BindingContextProperty, value, selector);
  }

  public static partial class ActivityIndicatorExtensions {
    public static Xamarin.Forms.ActivityIndicator IsRunning(this Xamarin.Forms.ActivityIndicator obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsRunningProperty, value);
    public static Xamarin.Forms.ActivityIndicator IsRunning(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsRunningProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator IsRunning<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsRunningProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Color(this Xamarin.Forms.ActivityIndicator obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ColorProperty, value);
    public static Xamarin.Forms.ActivityIndicator Color(this Xamarin.Forms.ActivityIndicator obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ColorProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Color<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ColorProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator VerticalOptions(this Xamarin.Forms.ActivityIndicator obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.VerticalOptionsProperty, value);
    public static Xamarin.Forms.ActivityIndicator VerticalOptions(this Xamarin.Forms.ActivityIndicator obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator VerticalOptions<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator HorizontalOptions(this Xamarin.Forms.ActivityIndicator obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.ActivityIndicator HorizontalOptions(this Xamarin.Forms.ActivityIndicator obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator HorizontalOptions<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Margin(this Xamarin.Forms.ActivityIndicator obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MarginProperty, value);
    public static Xamarin.Forms.ActivityIndicator Margin(this Xamarin.Forms.ActivityIndicator obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MarginProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Margin<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MarginProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Navigation(this Xamarin.Forms.ActivityIndicator obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.NavigationProperty, value);
    public static Xamarin.Forms.ActivityIndicator Navigation(this Xamarin.Forms.ActivityIndicator obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.NavigationProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Navigation<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.NavigationProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator InputTransparent(this Xamarin.Forms.ActivityIndicator obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.InputTransparentProperty, value);
    public static Xamarin.Forms.ActivityIndicator InputTransparent(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator InputTransparent<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator IsEnabled(this Xamarin.Forms.ActivityIndicator obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsEnabledProperty, value);
    public static Xamarin.Forms.ActivityIndicator IsEnabled(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator IsEnabled<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator X(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.XProperty, value);
    public static Xamarin.Forms.ActivityIndicator X(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.XProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator X<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.XProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Y(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.YProperty, value);
    public static Xamarin.Forms.ActivityIndicator Y(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.YProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Y<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.YProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator AnchorX(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.AnchorXProperty, value);
    public static Xamarin.Forms.ActivityIndicator AnchorX(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.AnchorXProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator AnchorX<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.AnchorXProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator AnchorY(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.AnchorYProperty, value);
    public static Xamarin.Forms.ActivityIndicator AnchorY(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.AnchorYProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator AnchorY<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.AnchorYProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator TranslationX(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TranslationXProperty, value);
    public static Xamarin.Forms.ActivityIndicator TranslationX(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TranslationXProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator TranslationX<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TranslationXProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator TranslationY(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TranslationYProperty, value);
    public static Xamarin.Forms.ActivityIndicator TranslationY(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TranslationYProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator TranslationY<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TranslationYProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Width(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.WidthProperty, value);
    public static Xamarin.Forms.ActivityIndicator Width(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.WidthProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Width<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.WidthProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Height(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HeightProperty, value);
    public static Xamarin.Forms.ActivityIndicator Height(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HeightProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Height<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HeightProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Rotation(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationProperty, value);
    public static Xamarin.Forms.ActivityIndicator Rotation(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Rotation<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator RotationX(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationXProperty, value);
    public static Xamarin.Forms.ActivityIndicator RotationX(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationXProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator RotationX<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationXProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator RotationY(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationYProperty, value);
    public static Xamarin.Forms.ActivityIndicator RotationY(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationYProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator RotationY<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.RotationYProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Scale(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ScaleProperty, value);
    public static Xamarin.Forms.ActivityIndicator Scale(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ScaleProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Scale<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ScaleProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator IsVisible(this Xamarin.Forms.ActivityIndicator obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsVisibleProperty, value);
    public static Xamarin.Forms.ActivityIndicator IsVisible(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator IsVisible<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Opacity(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.OpacityProperty, value);
    public static Xamarin.Forms.ActivityIndicator Opacity(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.OpacityProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Opacity<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.OpacityProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator BackgroundColor(this Xamarin.Forms.ActivityIndicator obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BackgroundColorProperty, value);
    public static Xamarin.Forms.ActivityIndicator BackgroundColor(this Xamarin.Forms.ActivityIndicator obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator BackgroundColor<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Behaviors(this Xamarin.Forms.ActivityIndicator obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BehaviorsProperty, value);
    public static Xamarin.Forms.ActivityIndicator Behaviors(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Behaviors<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Triggers(this Xamarin.Forms.ActivityIndicator obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TriggersProperty, value);
    public static Xamarin.Forms.ActivityIndicator Triggers(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TriggersProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Triggers<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.TriggersProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator Style(this Xamarin.Forms.ActivityIndicator obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.StyleProperty, value);
    public static Xamarin.Forms.ActivityIndicator Style(this Xamarin.Forms.ActivityIndicator obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.StyleProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator Style<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.StyleProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator WidthRequest(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.WidthRequestProperty, value);
    public static Xamarin.Forms.ActivityIndicator WidthRequest(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator WidthRequest<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator HeightRequest(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HeightRequestProperty, value);
    public static Xamarin.Forms.ActivityIndicator HeightRequest(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator HeightRequest<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator MinimumWidthRequest(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.ActivityIndicator MinimumWidthRequest(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator MinimumWidthRequest<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator MinimumHeightRequest(this Xamarin.Forms.ActivityIndicator obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.ActivityIndicator MinimumHeightRequest(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator MinimumHeightRequest<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator IsFocused(this Xamarin.Forms.ActivityIndicator obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsFocusedProperty, value);
    public static Xamarin.Forms.ActivityIndicator IsFocused(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator IsFocused<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator ClassId(this Xamarin.Forms.ActivityIndicator obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ClassIdProperty, value);
    public static Xamarin.Forms.ActivityIndicator ClassId(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator ClassId<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ActivityIndicator BindingContext(this Xamarin.Forms.ActivityIndicator obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BindingContextProperty, value);
    public static Xamarin.Forms.ActivityIndicator BindingContext(this Xamarin.Forms.ActivityIndicator obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ActivityIndicator BindingContext<TFrom>(this Xamarin.Forms.ActivityIndicator obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ActivityIndicator.BindingContextProperty, value, selector);
  }

  public static partial class BoxViewExtensions {
    public static Xamarin.Forms.BoxView Color(this Xamarin.Forms.BoxView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ColorProperty, value);
    public static Xamarin.Forms.BoxView Color(this Xamarin.Forms.BoxView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ColorProperty, value, mode);
    public static Xamarin.Forms.BoxView Color<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ColorProperty, value, selector);
    public static Xamarin.Forms.BoxView VerticalOptions(this Xamarin.Forms.BoxView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.BoxView VerticalOptions(this Xamarin.Forms.BoxView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.BoxView VerticalOptions<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.BoxView HorizontalOptions(this Xamarin.Forms.BoxView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.BoxView HorizontalOptions(this Xamarin.Forms.BoxView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.BoxView HorizontalOptions<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.BoxView Margin(this Xamarin.Forms.BoxView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MarginProperty, value);
    public static Xamarin.Forms.BoxView Margin(this Xamarin.Forms.BoxView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MarginProperty, value, mode);
    public static Xamarin.Forms.BoxView Margin<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MarginProperty, value, selector);
    public static Xamarin.Forms.BoxView Navigation(this Xamarin.Forms.BoxView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.NavigationProperty, value);
    public static Xamarin.Forms.BoxView Navigation(this Xamarin.Forms.BoxView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.NavigationProperty, value, mode);
    public static Xamarin.Forms.BoxView Navigation<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.NavigationProperty, value, selector);
    public static Xamarin.Forms.BoxView InputTransparent(this Xamarin.Forms.BoxView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.InputTransparentProperty, value);
    public static Xamarin.Forms.BoxView InputTransparent(this Xamarin.Forms.BoxView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.BoxView InputTransparent<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.BoxView IsEnabled(this Xamarin.Forms.BoxView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsEnabledProperty, value);
    public static Xamarin.Forms.BoxView IsEnabled(this Xamarin.Forms.BoxView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.BoxView IsEnabled<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.BoxView X(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.XProperty, value);
    public static Xamarin.Forms.BoxView X(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.XProperty, value, mode);
    public static Xamarin.Forms.BoxView X<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.XProperty, value, selector);
    public static Xamarin.Forms.BoxView Y(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.YProperty, value);
    public static Xamarin.Forms.BoxView Y(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.YProperty, value, mode);
    public static Xamarin.Forms.BoxView Y<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.YProperty, value, selector);
    public static Xamarin.Forms.BoxView AnchorX(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.AnchorXProperty, value);
    public static Xamarin.Forms.BoxView AnchorX(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.BoxView AnchorX<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.BoxView AnchorY(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.AnchorYProperty, value);
    public static Xamarin.Forms.BoxView AnchorY(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.BoxView AnchorY<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.BoxView TranslationX(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TranslationXProperty, value);
    public static Xamarin.Forms.BoxView TranslationX(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.BoxView TranslationX<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.BoxView TranslationY(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TranslationYProperty, value);
    public static Xamarin.Forms.BoxView TranslationY(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.BoxView TranslationY<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.BoxView Width(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.WidthProperty, value);
    public static Xamarin.Forms.BoxView Width(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.WidthProperty, value, mode);
    public static Xamarin.Forms.BoxView Width<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.WidthProperty, value, selector);
    public static Xamarin.Forms.BoxView Height(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HeightProperty, value);
    public static Xamarin.Forms.BoxView Height(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HeightProperty, value, mode);
    public static Xamarin.Forms.BoxView Height<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HeightProperty, value, selector);
    public static Xamarin.Forms.BoxView Rotation(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationProperty, value);
    public static Xamarin.Forms.BoxView Rotation(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationProperty, value, mode);
    public static Xamarin.Forms.BoxView Rotation<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationProperty, value, selector);
    public static Xamarin.Forms.BoxView RotationX(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationXProperty, value);
    public static Xamarin.Forms.BoxView RotationX(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationXProperty, value, mode);
    public static Xamarin.Forms.BoxView RotationX<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationXProperty, value, selector);
    public static Xamarin.Forms.BoxView RotationY(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationYProperty, value);
    public static Xamarin.Forms.BoxView RotationY(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationYProperty, value, mode);
    public static Xamarin.Forms.BoxView RotationY<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.RotationYProperty, value, selector);
    public static Xamarin.Forms.BoxView Scale(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ScaleProperty, value);
    public static Xamarin.Forms.BoxView Scale(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ScaleProperty, value, mode);
    public static Xamarin.Forms.BoxView Scale<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ScaleProperty, value, selector);
    public static Xamarin.Forms.BoxView IsVisible(this Xamarin.Forms.BoxView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsVisibleProperty, value);
    public static Xamarin.Forms.BoxView IsVisible(this Xamarin.Forms.BoxView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.BoxView IsVisible<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.BoxView Opacity(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.OpacityProperty, value);
    public static Xamarin.Forms.BoxView Opacity(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.OpacityProperty, value, mode);
    public static Xamarin.Forms.BoxView Opacity<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.OpacityProperty, value, selector);
    public static Xamarin.Forms.BoxView BackgroundColor(this Xamarin.Forms.BoxView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BackgroundColorProperty, value);
    public static Xamarin.Forms.BoxView BackgroundColor(this Xamarin.Forms.BoxView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.BoxView BackgroundColor<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.BoxView Behaviors(this Xamarin.Forms.BoxView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BehaviorsProperty, value);
    public static Xamarin.Forms.BoxView Behaviors(this Xamarin.Forms.BoxView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.BoxView Behaviors<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.BoxView Triggers(this Xamarin.Forms.BoxView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TriggersProperty, value);
    public static Xamarin.Forms.BoxView Triggers(this Xamarin.Forms.BoxView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TriggersProperty, value, mode);
    public static Xamarin.Forms.BoxView Triggers<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.TriggersProperty, value, selector);
    public static Xamarin.Forms.BoxView Style(this Xamarin.Forms.BoxView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.StyleProperty, value);
    public static Xamarin.Forms.BoxView Style(this Xamarin.Forms.BoxView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.StyleProperty, value, mode);
    public static Xamarin.Forms.BoxView Style<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.StyleProperty, value, selector);
    public static Xamarin.Forms.BoxView WidthRequest(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.WidthRequestProperty, value);
    public static Xamarin.Forms.BoxView WidthRequest(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.BoxView WidthRequest<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.BoxView HeightRequest(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HeightRequestProperty, value);
    public static Xamarin.Forms.BoxView HeightRequest(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.BoxView HeightRequest<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.BoxView MinimumWidthRequest(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.BoxView MinimumWidthRequest(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.BoxView MinimumWidthRequest<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.BoxView MinimumHeightRequest(this Xamarin.Forms.BoxView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.BoxView MinimumHeightRequest(this Xamarin.Forms.BoxView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.BoxView MinimumHeightRequest<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.BoxView IsFocused(this Xamarin.Forms.BoxView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsFocusedProperty, value);
    public static Xamarin.Forms.BoxView IsFocused(this Xamarin.Forms.BoxView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.BoxView IsFocused<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.BoxView ClassId(this Xamarin.Forms.BoxView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ClassIdProperty, value);
    public static Xamarin.Forms.BoxView ClassId(this Xamarin.Forms.BoxView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.BoxView ClassId<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.BoxView BindingContext(this Xamarin.Forms.BoxView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BindingContextProperty, value);
    public static Xamarin.Forms.BoxView BindingContext(this Xamarin.Forms.BoxView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.BoxView BindingContext<TFrom>(this Xamarin.Forms.BoxView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.BoxView.BindingContextProperty, value, selector);
  }

  public static partial class ButtonExtensions {
    public static Xamarin.Forms.Button Command(this Xamarin.Forms.Button obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.CommandProperty, value);
    public static Xamarin.Forms.Button Command(this Xamarin.Forms.Button obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.CommandProperty, value, mode);
    public static Xamarin.Forms.Button Command<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.CommandProperty, value, selector);
 public static Xamarin.Forms.Button Command(this Xamarin.Forms.Button obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.CommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.Button CommandParameter(this Xamarin.Forms.Button obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.CommandParameterProperty, value);
    public static Xamarin.Forms.Button CommandParameter(this Xamarin.Forms.Button obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.CommandParameterProperty, value, mode);
    public static Xamarin.Forms.Button CommandParameter<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.CommandParameterProperty, value, selector);
    public static Xamarin.Forms.Button ContentLayout(this Xamarin.Forms.Button obj, Xamarin.Forms.Button.ButtonContentLayout value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ContentLayoutProperty, value);
    public static Xamarin.Forms.Button ContentLayout(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.Button.ButtonContentLayout> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ContentLayoutProperty, value, mode);
    public static Xamarin.Forms.Button ContentLayout<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Button.ButtonContentLayout> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ContentLayoutProperty, value, selector);
    public static Xamarin.Forms.Button Text(this Xamarin.Forms.Button obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TextProperty, value);
    public static Xamarin.Forms.Button Text(this Xamarin.Forms.Button obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TextProperty, value, mode);
    public static Xamarin.Forms.Button Text<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TextProperty, value, selector);
    public static Xamarin.Forms.Button TextColor(this Xamarin.Forms.Button obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TextColorProperty, value);
    public static Xamarin.Forms.Button TextColor(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TextColorProperty, value, mode);
    public static Xamarin.Forms.Button TextColor<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TextColorProperty, value, selector);
    public static Xamarin.Forms.Button Font(this Xamarin.Forms.Button obj, Xamarin.Forms.Font value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontProperty, value);
    public static Xamarin.Forms.Button Font(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.Font> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontProperty, value, mode);
    public static Xamarin.Forms.Button Font<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Font> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontProperty, value, selector);
    public static Xamarin.Forms.Button FontFamily(this Xamarin.Forms.Button obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontFamilyProperty, value);
    public static Xamarin.Forms.Button FontFamily(this Xamarin.Forms.Button obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontFamilyProperty, value, mode);
    public static Xamarin.Forms.Button FontFamily<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontFamilyProperty, value, selector);
    public static Xamarin.Forms.Button FontSize(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontSizeProperty, value);
    public static Xamarin.Forms.Button FontSize(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontSizeProperty, value, mode);
    public static Xamarin.Forms.Button FontSize<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontSizeProperty, value, selector);
    public static Xamarin.Forms.Button FontAttributes(this Xamarin.Forms.Button obj, Xamarin.Forms.FontAttributes value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontAttributesProperty, value);
    public static Xamarin.Forms.Button FontAttributes(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.FontAttributes> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontAttributesProperty, value, mode);
    public static Xamarin.Forms.Button FontAttributes<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FontAttributes> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.FontAttributesProperty, value, selector);
    public static Xamarin.Forms.Button BorderWidth(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderWidthProperty, value);
    public static Xamarin.Forms.Button BorderWidth(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderWidthProperty, value, mode);
    public static Xamarin.Forms.Button BorderWidth<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderWidthProperty, value, selector);
    public static Xamarin.Forms.Button BorderColor(this Xamarin.Forms.Button obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderColorProperty, value);
    public static Xamarin.Forms.Button BorderColor(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderColorProperty, value, mode);
    public static Xamarin.Forms.Button BorderColor<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderColorProperty, value, selector);
    public static Xamarin.Forms.Button BorderRadius(this Xamarin.Forms.Button obj, System.Int32 value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderRadiusProperty, value);
    public static Xamarin.Forms.Button BorderRadius(this Xamarin.Forms.Button obj, BindableValue<System.Int32> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderRadiusProperty, value, mode);
    public static Xamarin.Forms.Button BorderRadius<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Int32> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BorderRadiusProperty, value, selector);
    public static Xamarin.Forms.Button Image(this Xamarin.Forms.Button obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ImageProperty, value);
    public static Xamarin.Forms.Button Image(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ImageProperty, value, mode);
    public static Xamarin.Forms.Button Image<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ImageProperty, value, selector);
    public static Xamarin.Forms.Button VerticalOptions(this Xamarin.Forms.Button obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Button VerticalOptions(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Button VerticalOptions<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Button HorizontalOptions(this Xamarin.Forms.Button obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Button HorizontalOptions(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Button HorizontalOptions<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Button Margin(this Xamarin.Forms.Button obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MarginProperty, value);
    public static Xamarin.Forms.Button Margin(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MarginProperty, value, mode);
    public static Xamarin.Forms.Button Margin<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MarginProperty, value, selector);
    public static Xamarin.Forms.Button Navigation(this Xamarin.Forms.Button obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.NavigationProperty, value);
    public static Xamarin.Forms.Button Navigation(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.NavigationProperty, value, mode);
    public static Xamarin.Forms.Button Navigation<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.NavigationProperty, value, selector);
    public static Xamarin.Forms.Button InputTransparent(this Xamarin.Forms.Button obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.InputTransparentProperty, value);
    public static Xamarin.Forms.Button InputTransparent(this Xamarin.Forms.Button obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Button InputTransparent<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Button IsEnabled(this Xamarin.Forms.Button obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsEnabledProperty, value);
    public static Xamarin.Forms.Button IsEnabled(this Xamarin.Forms.Button obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Button IsEnabled<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Button X(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.XProperty, value);
    public static Xamarin.Forms.Button X(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.XProperty, value, mode);
    public static Xamarin.Forms.Button X<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.XProperty, value, selector);
    public static Xamarin.Forms.Button Y(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.YProperty, value);
    public static Xamarin.Forms.Button Y(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.YProperty, value, mode);
    public static Xamarin.Forms.Button Y<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.YProperty, value, selector);
    public static Xamarin.Forms.Button AnchorX(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.AnchorXProperty, value);
    public static Xamarin.Forms.Button AnchorX(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Button AnchorX<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Button AnchorY(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.AnchorYProperty, value);
    public static Xamarin.Forms.Button AnchorY(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Button AnchorY<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Button TranslationX(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TranslationXProperty, value);
    public static Xamarin.Forms.Button TranslationX(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Button TranslationX<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Button TranslationY(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TranslationYProperty, value);
    public static Xamarin.Forms.Button TranslationY(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Button TranslationY<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Button Width(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.WidthProperty, value);
    public static Xamarin.Forms.Button Width(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.WidthProperty, value, mode);
    public static Xamarin.Forms.Button Width<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.WidthProperty, value, selector);
    public static Xamarin.Forms.Button Height(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HeightProperty, value);
    public static Xamarin.Forms.Button Height(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HeightProperty, value, mode);
    public static Xamarin.Forms.Button Height<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HeightProperty, value, selector);
    public static Xamarin.Forms.Button Rotation(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationProperty, value);
    public static Xamarin.Forms.Button Rotation(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationProperty, value, mode);
    public static Xamarin.Forms.Button Rotation<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationProperty, value, selector);
    public static Xamarin.Forms.Button RotationX(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationXProperty, value);
    public static Xamarin.Forms.Button RotationX(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationXProperty, value, mode);
    public static Xamarin.Forms.Button RotationX<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationXProperty, value, selector);
    public static Xamarin.Forms.Button RotationY(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationYProperty, value);
    public static Xamarin.Forms.Button RotationY(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationYProperty, value, mode);
    public static Xamarin.Forms.Button RotationY<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.RotationYProperty, value, selector);
    public static Xamarin.Forms.Button Scale(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ScaleProperty, value);
    public static Xamarin.Forms.Button Scale(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ScaleProperty, value, mode);
    public static Xamarin.Forms.Button Scale<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ScaleProperty, value, selector);
    public static Xamarin.Forms.Button IsVisible(this Xamarin.Forms.Button obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsVisibleProperty, value);
    public static Xamarin.Forms.Button IsVisible(this Xamarin.Forms.Button obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Button IsVisible<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Button Opacity(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.OpacityProperty, value);
    public static Xamarin.Forms.Button Opacity(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.OpacityProperty, value, mode);
    public static Xamarin.Forms.Button Opacity<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.OpacityProperty, value, selector);
    public static Xamarin.Forms.Button BackgroundColor(this Xamarin.Forms.Button obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BackgroundColorProperty, value);
    public static Xamarin.Forms.Button BackgroundColor(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Button BackgroundColor<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Button Behaviors(this Xamarin.Forms.Button obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BehaviorsProperty, value);
    public static Xamarin.Forms.Button Behaviors(this Xamarin.Forms.Button obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Button Behaviors<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Button Triggers(this Xamarin.Forms.Button obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TriggersProperty, value);
    public static Xamarin.Forms.Button Triggers(this Xamarin.Forms.Button obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TriggersProperty, value, mode);
    public static Xamarin.Forms.Button Triggers<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.TriggersProperty, value, selector);
    public static Xamarin.Forms.Button Style(this Xamarin.Forms.Button obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.StyleProperty, value);
    public static Xamarin.Forms.Button Style(this Xamarin.Forms.Button obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.StyleProperty, value, mode);
    public static Xamarin.Forms.Button Style<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.StyleProperty, value, selector);
    public static Xamarin.Forms.Button WidthRequest(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.WidthRequestProperty, value);
    public static Xamarin.Forms.Button WidthRequest(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Button WidthRequest<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Button HeightRequest(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HeightRequestProperty, value);
    public static Xamarin.Forms.Button HeightRequest(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Button HeightRequest<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Button MinimumWidthRequest(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Button MinimumWidthRequest(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Button MinimumWidthRequest<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Button MinimumHeightRequest(this Xamarin.Forms.Button obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Button MinimumHeightRequest(this Xamarin.Forms.Button obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Button MinimumHeightRequest<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Button IsFocused(this Xamarin.Forms.Button obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsFocusedProperty, value);
    public static Xamarin.Forms.Button IsFocused(this Xamarin.Forms.Button obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Button IsFocused<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Button ClassId(this Xamarin.Forms.Button obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ClassIdProperty, value);
    public static Xamarin.Forms.Button ClassId(this Xamarin.Forms.Button obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Button ClassId<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Button BindingContext(this Xamarin.Forms.Button obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BindingContextProperty, value);
    public static Xamarin.Forms.Button BindingContext(this Xamarin.Forms.Button obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Button BindingContext<TFrom>(this Xamarin.Forms.Button obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Button.BindingContextProperty, value, selector);
  }

  public static partial class DatePickerExtensions {
    public static Xamarin.Forms.DatePicker Format(this Xamarin.Forms.DatePicker obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.FormatProperty, value);
    public static Xamarin.Forms.DatePicker Format(this Xamarin.Forms.DatePicker obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.FormatProperty, value, mode);
    public static Xamarin.Forms.DatePicker Format<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.FormatProperty, value, selector);
    public static Xamarin.Forms.DatePicker Date(this Xamarin.Forms.DatePicker obj, System.DateTime value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.DateProperty, value);
    public static Xamarin.Forms.DatePicker Date(this Xamarin.Forms.DatePicker obj, BindableValue<System.DateTime> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.DateProperty, value, mode);
    public static Xamarin.Forms.DatePicker Date<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.DateTime> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.DateProperty, value, selector);
    public static Xamarin.Forms.DatePicker MinimumDate(this Xamarin.Forms.DatePicker obj, System.DateTime value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumDateProperty, value);
    public static Xamarin.Forms.DatePicker MinimumDate(this Xamarin.Forms.DatePicker obj, BindableValue<System.DateTime> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumDateProperty, value, mode);
    public static Xamarin.Forms.DatePicker MinimumDate<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.DateTime> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumDateProperty, value, selector);
    public static Xamarin.Forms.DatePicker MaximumDate(this Xamarin.Forms.DatePicker obj, System.DateTime value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MaximumDateProperty, value);
    public static Xamarin.Forms.DatePicker MaximumDate(this Xamarin.Forms.DatePicker obj, BindableValue<System.DateTime> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MaximumDateProperty, value, mode);
    public static Xamarin.Forms.DatePicker MaximumDate<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.DateTime> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MaximumDateProperty, value, selector);
    public static Xamarin.Forms.DatePicker TextColor(this Xamarin.Forms.DatePicker obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TextColorProperty, value);
    public static Xamarin.Forms.DatePicker TextColor(this Xamarin.Forms.DatePicker obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TextColorProperty, value, mode);
    public static Xamarin.Forms.DatePicker TextColor<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TextColorProperty, value, selector);
    public static Xamarin.Forms.DatePicker VerticalOptions(this Xamarin.Forms.DatePicker obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.VerticalOptionsProperty, value);
    public static Xamarin.Forms.DatePicker VerticalOptions(this Xamarin.Forms.DatePicker obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.DatePicker VerticalOptions<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.DatePicker HorizontalOptions(this Xamarin.Forms.DatePicker obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.DatePicker HorizontalOptions(this Xamarin.Forms.DatePicker obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.DatePicker HorizontalOptions<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.DatePicker Margin(this Xamarin.Forms.DatePicker obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MarginProperty, value);
    public static Xamarin.Forms.DatePicker Margin(this Xamarin.Forms.DatePicker obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MarginProperty, value, mode);
    public static Xamarin.Forms.DatePicker Margin<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MarginProperty, value, selector);
    public static Xamarin.Forms.DatePicker Navigation(this Xamarin.Forms.DatePicker obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.NavigationProperty, value);
    public static Xamarin.Forms.DatePicker Navigation(this Xamarin.Forms.DatePicker obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.NavigationProperty, value, mode);
    public static Xamarin.Forms.DatePicker Navigation<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.NavigationProperty, value, selector);
    public static Xamarin.Forms.DatePicker InputTransparent(this Xamarin.Forms.DatePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.InputTransparentProperty, value);
    public static Xamarin.Forms.DatePicker InputTransparent(this Xamarin.Forms.DatePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.DatePicker InputTransparent<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.DatePicker IsEnabled(this Xamarin.Forms.DatePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsEnabledProperty, value);
    public static Xamarin.Forms.DatePicker IsEnabled(this Xamarin.Forms.DatePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.DatePicker IsEnabled<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.DatePicker X(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.XProperty, value);
    public static Xamarin.Forms.DatePicker X(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.XProperty, value, mode);
    public static Xamarin.Forms.DatePicker X<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.XProperty, value, selector);
    public static Xamarin.Forms.DatePicker Y(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.YProperty, value);
    public static Xamarin.Forms.DatePicker Y(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.YProperty, value, mode);
    public static Xamarin.Forms.DatePicker Y<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.YProperty, value, selector);
    public static Xamarin.Forms.DatePicker AnchorX(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.AnchorXProperty, value);
    public static Xamarin.Forms.DatePicker AnchorX(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.AnchorXProperty, value, mode);
    public static Xamarin.Forms.DatePicker AnchorX<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.AnchorXProperty, value, selector);
    public static Xamarin.Forms.DatePicker AnchorY(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.AnchorYProperty, value);
    public static Xamarin.Forms.DatePicker AnchorY(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.AnchorYProperty, value, mode);
    public static Xamarin.Forms.DatePicker AnchorY<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.AnchorYProperty, value, selector);
    public static Xamarin.Forms.DatePicker TranslationX(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TranslationXProperty, value);
    public static Xamarin.Forms.DatePicker TranslationX(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TranslationXProperty, value, mode);
    public static Xamarin.Forms.DatePicker TranslationX<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TranslationXProperty, value, selector);
    public static Xamarin.Forms.DatePicker TranslationY(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TranslationYProperty, value);
    public static Xamarin.Forms.DatePicker TranslationY(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TranslationYProperty, value, mode);
    public static Xamarin.Forms.DatePicker TranslationY<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TranslationYProperty, value, selector);
    public static Xamarin.Forms.DatePicker Width(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.WidthProperty, value);
    public static Xamarin.Forms.DatePicker Width(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.WidthProperty, value, mode);
    public static Xamarin.Forms.DatePicker Width<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.WidthProperty, value, selector);
    public static Xamarin.Forms.DatePicker Height(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HeightProperty, value);
    public static Xamarin.Forms.DatePicker Height(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HeightProperty, value, mode);
    public static Xamarin.Forms.DatePicker Height<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HeightProperty, value, selector);
    public static Xamarin.Forms.DatePicker Rotation(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationProperty, value);
    public static Xamarin.Forms.DatePicker Rotation(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationProperty, value, mode);
    public static Xamarin.Forms.DatePicker Rotation<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationProperty, value, selector);
    public static Xamarin.Forms.DatePicker RotationX(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationXProperty, value);
    public static Xamarin.Forms.DatePicker RotationX(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationXProperty, value, mode);
    public static Xamarin.Forms.DatePicker RotationX<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationXProperty, value, selector);
    public static Xamarin.Forms.DatePicker RotationY(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationYProperty, value);
    public static Xamarin.Forms.DatePicker RotationY(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationYProperty, value, mode);
    public static Xamarin.Forms.DatePicker RotationY<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.RotationYProperty, value, selector);
    public static Xamarin.Forms.DatePicker Scale(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.ScaleProperty, value);
    public static Xamarin.Forms.DatePicker Scale(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.ScaleProperty, value, mode);
    public static Xamarin.Forms.DatePicker Scale<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.ScaleProperty, value, selector);
    public static Xamarin.Forms.DatePicker IsVisible(this Xamarin.Forms.DatePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsVisibleProperty, value);
    public static Xamarin.Forms.DatePicker IsVisible(this Xamarin.Forms.DatePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.DatePicker IsVisible<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.DatePicker Opacity(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.OpacityProperty, value);
    public static Xamarin.Forms.DatePicker Opacity(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.OpacityProperty, value, mode);
    public static Xamarin.Forms.DatePicker Opacity<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.OpacityProperty, value, selector);
    public static Xamarin.Forms.DatePicker BackgroundColor(this Xamarin.Forms.DatePicker obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BackgroundColorProperty, value);
    public static Xamarin.Forms.DatePicker BackgroundColor(this Xamarin.Forms.DatePicker obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.DatePicker BackgroundColor<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.DatePicker Behaviors(this Xamarin.Forms.DatePicker obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BehaviorsProperty, value);
    public static Xamarin.Forms.DatePicker Behaviors(this Xamarin.Forms.DatePicker obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.DatePicker Behaviors<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.DatePicker Triggers(this Xamarin.Forms.DatePicker obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TriggersProperty, value);
    public static Xamarin.Forms.DatePicker Triggers(this Xamarin.Forms.DatePicker obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TriggersProperty, value, mode);
    public static Xamarin.Forms.DatePicker Triggers<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.TriggersProperty, value, selector);
    public static Xamarin.Forms.DatePicker Style(this Xamarin.Forms.DatePicker obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.StyleProperty, value);
    public static Xamarin.Forms.DatePicker Style(this Xamarin.Forms.DatePicker obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.StyleProperty, value, mode);
    public static Xamarin.Forms.DatePicker Style<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.StyleProperty, value, selector);
    public static Xamarin.Forms.DatePicker WidthRequest(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.WidthRequestProperty, value);
    public static Xamarin.Forms.DatePicker WidthRequest(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.DatePicker WidthRequest<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.DatePicker HeightRequest(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HeightRequestProperty, value);
    public static Xamarin.Forms.DatePicker HeightRequest(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.DatePicker HeightRequest<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.DatePicker MinimumWidthRequest(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.DatePicker MinimumWidthRequest(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.DatePicker MinimumWidthRequest<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.DatePicker MinimumHeightRequest(this Xamarin.Forms.DatePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.DatePicker MinimumHeightRequest(this Xamarin.Forms.DatePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.DatePicker MinimumHeightRequest<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.DatePicker IsFocused(this Xamarin.Forms.DatePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsFocusedProperty, value);
    public static Xamarin.Forms.DatePicker IsFocused(this Xamarin.Forms.DatePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.DatePicker IsFocused<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.DatePicker ClassId(this Xamarin.Forms.DatePicker obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.ClassIdProperty, value);
    public static Xamarin.Forms.DatePicker ClassId(this Xamarin.Forms.DatePicker obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.ClassIdProperty, value, mode);
    public static Xamarin.Forms.DatePicker ClassId<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.ClassIdProperty, value, selector);
    public static Xamarin.Forms.DatePicker BindingContext(this Xamarin.Forms.DatePicker obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BindingContextProperty, value);
    public static Xamarin.Forms.DatePicker BindingContext(this Xamarin.Forms.DatePicker obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BindingContextProperty, value, mode);
    public static Xamarin.Forms.DatePicker BindingContext<TFrom>(this Xamarin.Forms.DatePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.DatePicker.BindingContextProperty, value, selector);
  }

  public static partial class ImageExtensions {
    public static Xamarin.Forms.Image Source(this Xamarin.Forms.Image obj, Xamarin.Forms.ImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.SourceProperty, value);
    public static Xamarin.Forms.Image Source(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.ImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.SourceProperty, value, mode);
    public static Xamarin.Forms.Image Source<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.SourceProperty, value, selector);
    public static Xamarin.Forms.Image Aspect(this Xamarin.Forms.Image obj, Xamarin.Forms.Aspect value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AspectProperty, value);
    public static Xamarin.Forms.Image Aspect(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.Aspect> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AspectProperty, value, mode);
    public static Xamarin.Forms.Image Aspect<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Aspect> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AspectProperty, value, selector);
    public static Xamarin.Forms.Image IsOpaque(this Xamarin.Forms.Image obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsOpaqueProperty, value);
    public static Xamarin.Forms.Image IsOpaque(this Xamarin.Forms.Image obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsOpaqueProperty, value, mode);
    public static Xamarin.Forms.Image IsOpaque<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsOpaqueProperty, value, selector);
    public static Xamarin.Forms.Image IsLoading(this Xamarin.Forms.Image obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsLoadingProperty, value);
    public static Xamarin.Forms.Image IsLoading(this Xamarin.Forms.Image obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsLoadingProperty, value, mode);
    public static Xamarin.Forms.Image IsLoading<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsLoadingProperty, value, selector);
    public static Xamarin.Forms.Image VerticalOptions(this Xamarin.Forms.Image obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Image VerticalOptions(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Image VerticalOptions<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Image HorizontalOptions(this Xamarin.Forms.Image obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Image HorizontalOptions(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Image HorizontalOptions<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Image Margin(this Xamarin.Forms.Image obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MarginProperty, value);
    public static Xamarin.Forms.Image Margin(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MarginProperty, value, mode);
    public static Xamarin.Forms.Image Margin<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MarginProperty, value, selector);
    public static Xamarin.Forms.Image Navigation(this Xamarin.Forms.Image obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.NavigationProperty, value);
    public static Xamarin.Forms.Image Navigation(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.NavigationProperty, value, mode);
    public static Xamarin.Forms.Image Navigation<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.NavigationProperty, value, selector);
    public static Xamarin.Forms.Image InputTransparent(this Xamarin.Forms.Image obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.InputTransparentProperty, value);
    public static Xamarin.Forms.Image InputTransparent(this Xamarin.Forms.Image obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Image InputTransparent<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Image IsEnabled(this Xamarin.Forms.Image obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsEnabledProperty, value);
    public static Xamarin.Forms.Image IsEnabled(this Xamarin.Forms.Image obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Image IsEnabled<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Image X(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.XProperty, value);
    public static Xamarin.Forms.Image X(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.XProperty, value, mode);
    public static Xamarin.Forms.Image X<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.XProperty, value, selector);
    public static Xamarin.Forms.Image Y(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.YProperty, value);
    public static Xamarin.Forms.Image Y(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.YProperty, value, mode);
    public static Xamarin.Forms.Image Y<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.YProperty, value, selector);
    public static Xamarin.Forms.Image AnchorX(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AnchorXProperty, value);
    public static Xamarin.Forms.Image AnchorX(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Image AnchorX<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Image AnchorY(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AnchorYProperty, value);
    public static Xamarin.Forms.Image AnchorY(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Image AnchorY<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Image TranslationX(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TranslationXProperty, value);
    public static Xamarin.Forms.Image TranslationX(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Image TranslationX<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Image TranslationY(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TranslationYProperty, value);
    public static Xamarin.Forms.Image TranslationY(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Image TranslationY<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Image Width(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.WidthProperty, value);
    public static Xamarin.Forms.Image Width(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.WidthProperty, value, mode);
    public static Xamarin.Forms.Image Width<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.WidthProperty, value, selector);
    public static Xamarin.Forms.Image Height(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HeightProperty, value);
    public static Xamarin.Forms.Image Height(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HeightProperty, value, mode);
    public static Xamarin.Forms.Image Height<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HeightProperty, value, selector);
    public static Xamarin.Forms.Image Rotation(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationProperty, value);
    public static Xamarin.Forms.Image Rotation(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationProperty, value, mode);
    public static Xamarin.Forms.Image Rotation<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationProperty, value, selector);
    public static Xamarin.Forms.Image RotationX(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationXProperty, value);
    public static Xamarin.Forms.Image RotationX(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationXProperty, value, mode);
    public static Xamarin.Forms.Image RotationX<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationXProperty, value, selector);
    public static Xamarin.Forms.Image RotationY(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationYProperty, value);
    public static Xamarin.Forms.Image RotationY(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationYProperty, value, mode);
    public static Xamarin.Forms.Image RotationY<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.RotationYProperty, value, selector);
    public static Xamarin.Forms.Image Scale(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.ScaleProperty, value);
    public static Xamarin.Forms.Image Scale(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.ScaleProperty, value, mode);
    public static Xamarin.Forms.Image Scale<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.ScaleProperty, value, selector);
    public static Xamarin.Forms.Image IsVisible(this Xamarin.Forms.Image obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsVisibleProperty, value);
    public static Xamarin.Forms.Image IsVisible(this Xamarin.Forms.Image obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Image IsVisible<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Image Opacity(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.OpacityProperty, value);
    public static Xamarin.Forms.Image Opacity(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.OpacityProperty, value, mode);
    public static Xamarin.Forms.Image Opacity<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.OpacityProperty, value, selector);
    public static Xamarin.Forms.Image BackgroundColor(this Xamarin.Forms.Image obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BackgroundColorProperty, value);
    public static Xamarin.Forms.Image BackgroundColor(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Image BackgroundColor<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Image Behaviors(this Xamarin.Forms.Image obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BehaviorsProperty, value);
    public static Xamarin.Forms.Image Behaviors(this Xamarin.Forms.Image obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Image Behaviors<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Image Triggers(this Xamarin.Forms.Image obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TriggersProperty, value);
    public static Xamarin.Forms.Image Triggers(this Xamarin.Forms.Image obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TriggersProperty, value, mode);
    public static Xamarin.Forms.Image Triggers<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.TriggersProperty, value, selector);
    public static Xamarin.Forms.Image Style(this Xamarin.Forms.Image obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.StyleProperty, value);
    public static Xamarin.Forms.Image Style(this Xamarin.Forms.Image obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.StyleProperty, value, mode);
    public static Xamarin.Forms.Image Style<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.StyleProperty, value, selector);
    public static Xamarin.Forms.Image WidthRequest(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.WidthRequestProperty, value);
    public static Xamarin.Forms.Image WidthRequest(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Image WidthRequest<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Image HeightRequest(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HeightRequestProperty, value);
    public static Xamarin.Forms.Image HeightRequest(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Image HeightRequest<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Image MinimumWidthRequest(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Image MinimumWidthRequest(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Image MinimumWidthRequest<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Image MinimumHeightRequest(this Xamarin.Forms.Image obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Image MinimumHeightRequest(this Xamarin.Forms.Image obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Image MinimumHeightRequest<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Image IsFocused(this Xamarin.Forms.Image obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsFocusedProperty, value);
    public static Xamarin.Forms.Image IsFocused(this Xamarin.Forms.Image obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Image IsFocused<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Image ClassId(this Xamarin.Forms.Image obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.ClassIdProperty, value);
    public static Xamarin.Forms.Image ClassId(this Xamarin.Forms.Image obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Image ClassId<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Image BindingContext(this Xamarin.Forms.Image obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BindingContextProperty, value);
    public static Xamarin.Forms.Image BindingContext(this Xamarin.Forms.Image obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Image BindingContext<TFrom>(this Xamarin.Forms.Image obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Image.BindingContextProperty, value, selector);
  }

  public static partial class InputViewExtensions {
    public static Xamarin.Forms.InputView Keyboard(this Xamarin.Forms.InputView obj, Xamarin.Forms.Keyboard value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.KeyboardProperty, value);
    public static Xamarin.Forms.InputView Keyboard(this Xamarin.Forms.InputView obj, BindableValue<Xamarin.Forms.Keyboard> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.KeyboardProperty, value, mode);
    public static Xamarin.Forms.InputView Keyboard<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Keyboard> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.KeyboardProperty, value, selector);
    public static Xamarin.Forms.InputView VerticalOptions(this Xamarin.Forms.InputView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.InputView VerticalOptions(this Xamarin.Forms.InputView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.InputView VerticalOptions<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.InputView HorizontalOptions(this Xamarin.Forms.InputView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.InputView HorizontalOptions(this Xamarin.Forms.InputView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.InputView HorizontalOptions<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.InputView Margin(this Xamarin.Forms.InputView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MarginProperty, value);
    public static Xamarin.Forms.InputView Margin(this Xamarin.Forms.InputView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MarginProperty, value, mode);
    public static Xamarin.Forms.InputView Margin<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MarginProperty, value, selector);
    public static Xamarin.Forms.InputView Navigation(this Xamarin.Forms.InputView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.NavigationProperty, value);
    public static Xamarin.Forms.InputView Navigation(this Xamarin.Forms.InputView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.NavigationProperty, value, mode);
    public static Xamarin.Forms.InputView Navigation<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.NavigationProperty, value, selector);
    public static Xamarin.Forms.InputView InputTransparent(this Xamarin.Forms.InputView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.InputTransparentProperty, value);
    public static Xamarin.Forms.InputView InputTransparent(this Xamarin.Forms.InputView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.InputView InputTransparent<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.InputView IsEnabled(this Xamarin.Forms.InputView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsEnabledProperty, value);
    public static Xamarin.Forms.InputView IsEnabled(this Xamarin.Forms.InputView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.InputView IsEnabled<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.InputView X(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.XProperty, value);
    public static Xamarin.Forms.InputView X(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.XProperty, value, mode);
    public static Xamarin.Forms.InputView X<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.XProperty, value, selector);
    public static Xamarin.Forms.InputView Y(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.YProperty, value);
    public static Xamarin.Forms.InputView Y(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.YProperty, value, mode);
    public static Xamarin.Forms.InputView Y<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.YProperty, value, selector);
    public static Xamarin.Forms.InputView AnchorX(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.AnchorXProperty, value);
    public static Xamarin.Forms.InputView AnchorX(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.InputView AnchorX<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.InputView AnchorY(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.AnchorYProperty, value);
    public static Xamarin.Forms.InputView AnchorY(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.InputView AnchorY<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.InputView TranslationX(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TranslationXProperty, value);
    public static Xamarin.Forms.InputView TranslationX(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.InputView TranslationX<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.InputView TranslationY(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TranslationYProperty, value);
    public static Xamarin.Forms.InputView TranslationY(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.InputView TranslationY<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.InputView Width(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.WidthProperty, value);
    public static Xamarin.Forms.InputView Width(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.WidthProperty, value, mode);
    public static Xamarin.Forms.InputView Width<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.WidthProperty, value, selector);
    public static Xamarin.Forms.InputView Height(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HeightProperty, value);
    public static Xamarin.Forms.InputView Height(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HeightProperty, value, mode);
    public static Xamarin.Forms.InputView Height<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HeightProperty, value, selector);
    public static Xamarin.Forms.InputView Rotation(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationProperty, value);
    public static Xamarin.Forms.InputView Rotation(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationProperty, value, mode);
    public static Xamarin.Forms.InputView Rotation<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationProperty, value, selector);
    public static Xamarin.Forms.InputView RotationX(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationXProperty, value);
    public static Xamarin.Forms.InputView RotationX(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationXProperty, value, mode);
    public static Xamarin.Forms.InputView RotationX<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationXProperty, value, selector);
    public static Xamarin.Forms.InputView RotationY(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationYProperty, value);
    public static Xamarin.Forms.InputView RotationY(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationYProperty, value, mode);
    public static Xamarin.Forms.InputView RotationY<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.RotationYProperty, value, selector);
    public static Xamarin.Forms.InputView Scale(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.ScaleProperty, value);
    public static Xamarin.Forms.InputView Scale(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.ScaleProperty, value, mode);
    public static Xamarin.Forms.InputView Scale<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.ScaleProperty, value, selector);
    public static Xamarin.Forms.InputView IsVisible(this Xamarin.Forms.InputView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsVisibleProperty, value);
    public static Xamarin.Forms.InputView IsVisible(this Xamarin.Forms.InputView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.InputView IsVisible<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.InputView Opacity(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.OpacityProperty, value);
    public static Xamarin.Forms.InputView Opacity(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.OpacityProperty, value, mode);
    public static Xamarin.Forms.InputView Opacity<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.OpacityProperty, value, selector);
    public static Xamarin.Forms.InputView BackgroundColor(this Xamarin.Forms.InputView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BackgroundColorProperty, value);
    public static Xamarin.Forms.InputView BackgroundColor(this Xamarin.Forms.InputView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.InputView BackgroundColor<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.InputView Behaviors(this Xamarin.Forms.InputView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BehaviorsProperty, value);
    public static Xamarin.Forms.InputView Behaviors(this Xamarin.Forms.InputView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.InputView Behaviors<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.InputView Triggers(this Xamarin.Forms.InputView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TriggersProperty, value);
    public static Xamarin.Forms.InputView Triggers(this Xamarin.Forms.InputView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TriggersProperty, value, mode);
    public static Xamarin.Forms.InputView Triggers<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.TriggersProperty, value, selector);
    public static Xamarin.Forms.InputView Style(this Xamarin.Forms.InputView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.StyleProperty, value);
    public static Xamarin.Forms.InputView Style(this Xamarin.Forms.InputView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.StyleProperty, value, mode);
    public static Xamarin.Forms.InputView Style<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.StyleProperty, value, selector);
    public static Xamarin.Forms.InputView WidthRequest(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.WidthRequestProperty, value);
    public static Xamarin.Forms.InputView WidthRequest(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.InputView WidthRequest<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.InputView HeightRequest(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HeightRequestProperty, value);
    public static Xamarin.Forms.InputView HeightRequest(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.InputView HeightRequest<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.InputView MinimumWidthRequest(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.InputView MinimumWidthRequest(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.InputView MinimumWidthRequest<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.InputView MinimumHeightRequest(this Xamarin.Forms.InputView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.InputView MinimumHeightRequest(this Xamarin.Forms.InputView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.InputView MinimumHeightRequest<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.InputView IsFocused(this Xamarin.Forms.InputView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsFocusedProperty, value);
    public static Xamarin.Forms.InputView IsFocused(this Xamarin.Forms.InputView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.InputView IsFocused<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.InputView ClassId(this Xamarin.Forms.InputView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.ClassIdProperty, value);
    public static Xamarin.Forms.InputView ClassId(this Xamarin.Forms.InputView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.InputView ClassId<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.InputView BindingContext(this Xamarin.Forms.InputView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BindingContextProperty, value);
    public static Xamarin.Forms.InputView BindingContext(this Xamarin.Forms.InputView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.InputView BindingContext<TFrom>(this Xamarin.Forms.InputView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.InputView.BindingContextProperty, value, selector);
  }

  public static partial class LabelExtensions {
    public static Xamarin.Forms.Label HorizontalTextAlignment(this Xamarin.Forms.Label obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HorizontalTextAlignmentProperty, value);
    public static Xamarin.Forms.Label HorizontalTextAlignment(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HorizontalTextAlignmentProperty, value, mode);
    public static Xamarin.Forms.Label HorizontalTextAlignment<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HorizontalTextAlignmentProperty, value, selector);
    public static Xamarin.Forms.Label XAlign(this Xamarin.Forms.Label obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.XAlignProperty, value);
    public static Xamarin.Forms.Label XAlign(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.XAlignProperty, value, mode);
    public static Xamarin.Forms.Label XAlign<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.XAlignProperty, value, selector);
    public static Xamarin.Forms.Label VerticalTextAlignment(this Xamarin.Forms.Label obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.VerticalTextAlignmentProperty, value);
    public static Xamarin.Forms.Label VerticalTextAlignment(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.VerticalTextAlignmentProperty, value, mode);
    public static Xamarin.Forms.Label VerticalTextAlignment<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.VerticalTextAlignmentProperty, value, selector);
    public static Xamarin.Forms.Label YAlign(this Xamarin.Forms.Label obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.YAlignProperty, value);
    public static Xamarin.Forms.Label YAlign(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.YAlignProperty, value, mode);
    public static Xamarin.Forms.Label YAlign<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.YAlignProperty, value, selector);
    public static Xamarin.Forms.Label TextColor(this Xamarin.Forms.Label obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TextColorProperty, value);
    public static Xamarin.Forms.Label TextColor(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TextColorProperty, value, mode);
    public static Xamarin.Forms.Label TextColor<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TextColorProperty, value, selector);
    public static Xamarin.Forms.Label Font(this Xamarin.Forms.Label obj, Xamarin.Forms.Font value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontProperty, value);
    public static Xamarin.Forms.Label Font(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.Font> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontProperty, value, mode);
    public static Xamarin.Forms.Label Font<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Font> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontProperty, value, selector);
    public static Xamarin.Forms.Label Text(this Xamarin.Forms.Label obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TextProperty, value);
    public static Xamarin.Forms.Label Text(this Xamarin.Forms.Label obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TextProperty, value, mode);
    public static Xamarin.Forms.Label Text<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TextProperty, value, selector);
    public static Xamarin.Forms.Label FontFamily(this Xamarin.Forms.Label obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontFamilyProperty, value);
    public static Xamarin.Forms.Label FontFamily(this Xamarin.Forms.Label obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontFamilyProperty, value, mode);
    public static Xamarin.Forms.Label FontFamily<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontFamilyProperty, value, selector);
    public static Xamarin.Forms.Label FontSize(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontSizeProperty, value);
    public static Xamarin.Forms.Label FontSize(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontSizeProperty, value, mode);
    public static Xamarin.Forms.Label FontSize<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontSizeProperty, value, selector);
    public static Xamarin.Forms.Label FontAttributes(this Xamarin.Forms.Label obj, Xamarin.Forms.FontAttributes value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontAttributesProperty, value);
    public static Xamarin.Forms.Label FontAttributes(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.FontAttributes> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontAttributesProperty, value, mode);
    public static Xamarin.Forms.Label FontAttributes<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FontAttributes> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FontAttributesProperty, value, selector);
    public static Xamarin.Forms.Label FormattedText(this Xamarin.Forms.Label obj, Xamarin.Forms.FormattedString value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FormattedTextProperty, value);
    public static Xamarin.Forms.Label FormattedText(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.FormattedString> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FormattedTextProperty, value, mode);
    public static Xamarin.Forms.Label FormattedText<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FormattedString> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.FormattedTextProperty, value, selector);
    public static Xamarin.Forms.Label LineBreakMode(this Xamarin.Forms.Label obj, Xamarin.Forms.LineBreakMode value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.LineBreakModeProperty, value);
    public static Xamarin.Forms.Label LineBreakMode(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.LineBreakMode> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.LineBreakModeProperty, value, mode);
    public static Xamarin.Forms.Label LineBreakMode<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LineBreakMode> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.LineBreakModeProperty, value, selector);
    public static Xamarin.Forms.Label VerticalOptions(this Xamarin.Forms.Label obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Label VerticalOptions(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Label VerticalOptions<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Label HorizontalOptions(this Xamarin.Forms.Label obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Label HorizontalOptions(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Label HorizontalOptions<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Label Margin(this Xamarin.Forms.Label obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MarginProperty, value);
    public static Xamarin.Forms.Label Margin(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MarginProperty, value, mode);
    public static Xamarin.Forms.Label Margin<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MarginProperty, value, selector);
    public static Xamarin.Forms.Label Navigation(this Xamarin.Forms.Label obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.NavigationProperty, value);
    public static Xamarin.Forms.Label Navigation(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.NavigationProperty, value, mode);
    public static Xamarin.Forms.Label Navigation<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.NavigationProperty, value, selector);
    public static Xamarin.Forms.Label InputTransparent(this Xamarin.Forms.Label obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.InputTransparentProperty, value);
    public static Xamarin.Forms.Label InputTransparent(this Xamarin.Forms.Label obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Label InputTransparent<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Label IsEnabled(this Xamarin.Forms.Label obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsEnabledProperty, value);
    public static Xamarin.Forms.Label IsEnabled(this Xamarin.Forms.Label obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Label IsEnabled<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Label X(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.XProperty, value);
    public static Xamarin.Forms.Label X(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.XProperty, value, mode);
    public static Xamarin.Forms.Label X<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.XProperty, value, selector);
    public static Xamarin.Forms.Label Y(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.YProperty, value);
    public static Xamarin.Forms.Label Y(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.YProperty, value, mode);
    public static Xamarin.Forms.Label Y<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.YProperty, value, selector);
    public static Xamarin.Forms.Label AnchorX(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.AnchorXProperty, value);
    public static Xamarin.Forms.Label AnchorX(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Label AnchorX<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Label AnchorY(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.AnchorYProperty, value);
    public static Xamarin.Forms.Label AnchorY(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Label AnchorY<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Label TranslationX(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TranslationXProperty, value);
    public static Xamarin.Forms.Label TranslationX(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Label TranslationX<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Label TranslationY(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TranslationYProperty, value);
    public static Xamarin.Forms.Label TranslationY(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Label TranslationY<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Label Width(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.WidthProperty, value);
    public static Xamarin.Forms.Label Width(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.WidthProperty, value, mode);
    public static Xamarin.Forms.Label Width<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.WidthProperty, value, selector);
    public static Xamarin.Forms.Label Height(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HeightProperty, value);
    public static Xamarin.Forms.Label Height(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HeightProperty, value, mode);
    public static Xamarin.Forms.Label Height<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HeightProperty, value, selector);
    public static Xamarin.Forms.Label Rotation(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationProperty, value);
    public static Xamarin.Forms.Label Rotation(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationProperty, value, mode);
    public static Xamarin.Forms.Label Rotation<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationProperty, value, selector);
    public static Xamarin.Forms.Label RotationX(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationXProperty, value);
    public static Xamarin.Forms.Label RotationX(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationXProperty, value, mode);
    public static Xamarin.Forms.Label RotationX<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationXProperty, value, selector);
    public static Xamarin.Forms.Label RotationY(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationYProperty, value);
    public static Xamarin.Forms.Label RotationY(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationYProperty, value, mode);
    public static Xamarin.Forms.Label RotationY<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.RotationYProperty, value, selector);
    public static Xamarin.Forms.Label Scale(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.ScaleProperty, value);
    public static Xamarin.Forms.Label Scale(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.ScaleProperty, value, mode);
    public static Xamarin.Forms.Label Scale<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.ScaleProperty, value, selector);
    public static Xamarin.Forms.Label IsVisible(this Xamarin.Forms.Label obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsVisibleProperty, value);
    public static Xamarin.Forms.Label IsVisible(this Xamarin.Forms.Label obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Label IsVisible<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Label Opacity(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.OpacityProperty, value);
    public static Xamarin.Forms.Label Opacity(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.OpacityProperty, value, mode);
    public static Xamarin.Forms.Label Opacity<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.OpacityProperty, value, selector);
    public static Xamarin.Forms.Label BackgroundColor(this Xamarin.Forms.Label obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BackgroundColorProperty, value);
    public static Xamarin.Forms.Label BackgroundColor(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Label BackgroundColor<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Label Behaviors(this Xamarin.Forms.Label obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BehaviorsProperty, value);
    public static Xamarin.Forms.Label Behaviors(this Xamarin.Forms.Label obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Label Behaviors<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Label Triggers(this Xamarin.Forms.Label obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TriggersProperty, value);
    public static Xamarin.Forms.Label Triggers(this Xamarin.Forms.Label obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TriggersProperty, value, mode);
    public static Xamarin.Forms.Label Triggers<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.TriggersProperty, value, selector);
    public static Xamarin.Forms.Label Style(this Xamarin.Forms.Label obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.StyleProperty, value);
    public static Xamarin.Forms.Label Style(this Xamarin.Forms.Label obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.StyleProperty, value, mode);
    public static Xamarin.Forms.Label Style<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.StyleProperty, value, selector);
    public static Xamarin.Forms.Label WidthRequest(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.WidthRequestProperty, value);
    public static Xamarin.Forms.Label WidthRequest(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Label WidthRequest<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Label HeightRequest(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HeightRequestProperty, value);
    public static Xamarin.Forms.Label HeightRequest(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Label HeightRequest<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Label MinimumWidthRequest(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Label MinimumWidthRequest(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Label MinimumWidthRequest<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Label MinimumHeightRequest(this Xamarin.Forms.Label obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Label MinimumHeightRequest(this Xamarin.Forms.Label obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Label MinimumHeightRequest<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Label IsFocused(this Xamarin.Forms.Label obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsFocusedProperty, value);
    public static Xamarin.Forms.Label IsFocused(this Xamarin.Forms.Label obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Label IsFocused<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Label ClassId(this Xamarin.Forms.Label obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.ClassIdProperty, value);
    public static Xamarin.Forms.Label ClassId(this Xamarin.Forms.Label obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Label ClassId<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Label BindingContext(this Xamarin.Forms.Label obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BindingContextProperty, value);
    public static Xamarin.Forms.Label BindingContext(this Xamarin.Forms.Label obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Label BindingContext<TFrom>(this Xamarin.Forms.Label obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Label.BindingContextProperty, value, selector);
  }

  public static partial class MasterDetailPageExtensions {
    public static Xamarin.Forms.MasterDetailPage IsGestureEnabled(this Xamarin.Forms.MasterDetailPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsGestureEnabledProperty, value);
    public static Xamarin.Forms.MasterDetailPage IsGestureEnabled(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsGestureEnabledProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage IsGestureEnabled<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsGestureEnabledProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage IsPresented(this Xamarin.Forms.MasterDetailPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsPresentedProperty, value);
    public static Xamarin.Forms.MasterDetailPage IsPresented(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsPresentedProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage IsPresented<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsPresentedProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage MasterBehavior(this Xamarin.Forms.MasterDetailPage obj, Xamarin.Forms.MasterBehavior value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MasterBehaviorProperty, value);
    public static Xamarin.Forms.MasterDetailPage MasterBehavior(this Xamarin.Forms.MasterDetailPage obj, BindableValue<Xamarin.Forms.MasterBehavior> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MasterBehaviorProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage MasterBehavior<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.MasterBehavior> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MasterBehaviorProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage BackgroundImage(this Xamarin.Forms.MasterDetailPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BackgroundImageProperty, value);
    public static Xamarin.Forms.MasterDetailPage BackgroundImage(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BackgroundImageProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage BackgroundImage<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BackgroundImageProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage IsBusy(this Xamarin.Forms.MasterDetailPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsBusyProperty, value);
    public static Xamarin.Forms.MasterDetailPage IsBusy(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsBusyProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage IsBusy<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsBusyProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Padding(this Xamarin.Forms.MasterDetailPage obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.PaddingProperty, value);
    public static Xamarin.Forms.MasterDetailPage Padding(this Xamarin.Forms.MasterDetailPage obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.PaddingProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Padding<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.PaddingProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Title(this Xamarin.Forms.MasterDetailPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TitleProperty, value);
    public static Xamarin.Forms.MasterDetailPage Title(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TitleProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Title<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TitleProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Icon(this Xamarin.Forms.MasterDetailPage obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IconProperty, value);
    public static Xamarin.Forms.MasterDetailPage Icon(this Xamarin.Forms.MasterDetailPage obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IconProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Icon<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IconProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Navigation(this Xamarin.Forms.MasterDetailPage obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.NavigationProperty, value);
    public static Xamarin.Forms.MasterDetailPage Navigation(this Xamarin.Forms.MasterDetailPage obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.NavigationProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Navigation<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.NavigationProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage InputTransparent(this Xamarin.Forms.MasterDetailPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.InputTransparentProperty, value);
    public static Xamarin.Forms.MasterDetailPage InputTransparent(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage InputTransparent<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage IsEnabled(this Xamarin.Forms.MasterDetailPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsEnabledProperty, value);
    public static Xamarin.Forms.MasterDetailPage IsEnabled(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage IsEnabled<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage X(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.XProperty, value);
    public static Xamarin.Forms.MasterDetailPage X(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.XProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage X<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.XProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Y(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.YProperty, value);
    public static Xamarin.Forms.MasterDetailPage Y(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.YProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Y<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.YProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage AnchorX(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.AnchorXProperty, value);
    public static Xamarin.Forms.MasterDetailPage AnchorX(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.AnchorXProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage AnchorX<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.AnchorXProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage AnchorY(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.AnchorYProperty, value);
    public static Xamarin.Forms.MasterDetailPage AnchorY(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.AnchorYProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage AnchorY<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.AnchorYProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage TranslationX(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TranslationXProperty, value);
    public static Xamarin.Forms.MasterDetailPage TranslationX(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TranslationXProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage TranslationX<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TranslationXProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage TranslationY(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TranslationYProperty, value);
    public static Xamarin.Forms.MasterDetailPage TranslationY(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TranslationYProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage TranslationY<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TranslationYProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Width(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.WidthProperty, value);
    public static Xamarin.Forms.MasterDetailPage Width(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.WidthProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Width<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.WidthProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Height(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.HeightProperty, value);
    public static Xamarin.Forms.MasterDetailPage Height(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.HeightProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Height<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.HeightProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Rotation(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationProperty, value);
    public static Xamarin.Forms.MasterDetailPage Rotation(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Rotation<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage RotationX(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationXProperty, value);
    public static Xamarin.Forms.MasterDetailPage RotationX(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationXProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage RotationX<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationXProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage RotationY(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationYProperty, value);
    public static Xamarin.Forms.MasterDetailPage RotationY(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationYProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage RotationY<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.RotationYProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Scale(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.ScaleProperty, value);
    public static Xamarin.Forms.MasterDetailPage Scale(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.ScaleProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Scale<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.ScaleProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage IsVisible(this Xamarin.Forms.MasterDetailPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsVisibleProperty, value);
    public static Xamarin.Forms.MasterDetailPage IsVisible(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage IsVisible<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Opacity(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.OpacityProperty, value);
    public static Xamarin.Forms.MasterDetailPage Opacity(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.OpacityProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Opacity<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.OpacityProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage BackgroundColor(this Xamarin.Forms.MasterDetailPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BackgroundColorProperty, value);
    public static Xamarin.Forms.MasterDetailPage BackgroundColor(this Xamarin.Forms.MasterDetailPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage BackgroundColor<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Behaviors(this Xamarin.Forms.MasterDetailPage obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BehaviorsProperty, value);
    public static Xamarin.Forms.MasterDetailPage Behaviors(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Behaviors<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Triggers(this Xamarin.Forms.MasterDetailPage obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TriggersProperty, value);
    public static Xamarin.Forms.MasterDetailPage Triggers(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TriggersProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Triggers<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.TriggersProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage Style(this Xamarin.Forms.MasterDetailPage obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.StyleProperty, value);
    public static Xamarin.Forms.MasterDetailPage Style(this Xamarin.Forms.MasterDetailPage obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.StyleProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage Style<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.StyleProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage WidthRequest(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.WidthRequestProperty, value);
    public static Xamarin.Forms.MasterDetailPage WidthRequest(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage WidthRequest<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage HeightRequest(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.HeightRequestProperty, value);
    public static Xamarin.Forms.MasterDetailPage HeightRequest(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage HeightRequest<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage MinimumWidthRequest(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.MasterDetailPage MinimumWidthRequest(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage MinimumWidthRequest<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage MinimumHeightRequest(this Xamarin.Forms.MasterDetailPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.MasterDetailPage MinimumHeightRequest(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage MinimumHeightRequest<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage IsFocused(this Xamarin.Forms.MasterDetailPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsFocusedProperty, value);
    public static Xamarin.Forms.MasterDetailPage IsFocused(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage IsFocused<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage ClassId(this Xamarin.Forms.MasterDetailPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.ClassIdProperty, value);
    public static Xamarin.Forms.MasterDetailPage ClassId(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.ClassIdProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage ClassId<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.ClassIdProperty, value, selector);
    public static Xamarin.Forms.MasterDetailPage BindingContext(this Xamarin.Forms.MasterDetailPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BindingContextProperty, value);
    public static Xamarin.Forms.MasterDetailPage BindingContext(this Xamarin.Forms.MasterDetailPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BindingContextProperty, value, mode);
    public static Xamarin.Forms.MasterDetailPage BindingContext<TFrom>(this Xamarin.Forms.MasterDetailPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.MasterDetailPage.BindingContextProperty, value, selector);
  }

  public static partial class OpenGLViewExtensions {
    public static Xamarin.Forms.OpenGLView HasRenderLoop(this Xamarin.Forms.OpenGLView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HasRenderLoopProperty, value);
    public static Xamarin.Forms.OpenGLView HasRenderLoop(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HasRenderLoopProperty, value, mode);
    public static Xamarin.Forms.OpenGLView HasRenderLoop<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HasRenderLoopProperty, value, selector);
    public static Xamarin.Forms.OpenGLView VerticalOptions(this Xamarin.Forms.OpenGLView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.OpenGLView VerticalOptions(this Xamarin.Forms.OpenGLView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.OpenGLView VerticalOptions<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.OpenGLView HorizontalOptions(this Xamarin.Forms.OpenGLView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.OpenGLView HorizontalOptions(this Xamarin.Forms.OpenGLView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.OpenGLView HorizontalOptions<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Margin(this Xamarin.Forms.OpenGLView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MarginProperty, value);
    public static Xamarin.Forms.OpenGLView Margin(this Xamarin.Forms.OpenGLView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MarginProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Margin<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MarginProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Navigation(this Xamarin.Forms.OpenGLView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.NavigationProperty, value);
    public static Xamarin.Forms.OpenGLView Navigation(this Xamarin.Forms.OpenGLView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.NavigationProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Navigation<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.NavigationProperty, value, selector);
    public static Xamarin.Forms.OpenGLView InputTransparent(this Xamarin.Forms.OpenGLView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.InputTransparentProperty, value);
    public static Xamarin.Forms.OpenGLView InputTransparent(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.OpenGLView InputTransparent<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.OpenGLView IsEnabled(this Xamarin.Forms.OpenGLView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsEnabledProperty, value);
    public static Xamarin.Forms.OpenGLView IsEnabled(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.OpenGLView IsEnabled<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.OpenGLView X(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.XProperty, value);
    public static Xamarin.Forms.OpenGLView X(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.XProperty, value, mode);
    public static Xamarin.Forms.OpenGLView X<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.XProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Y(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.YProperty, value);
    public static Xamarin.Forms.OpenGLView Y(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.YProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Y<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.YProperty, value, selector);
    public static Xamarin.Forms.OpenGLView AnchorX(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.AnchorXProperty, value);
    public static Xamarin.Forms.OpenGLView AnchorX(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.OpenGLView AnchorX<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.OpenGLView AnchorY(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.AnchorYProperty, value);
    public static Xamarin.Forms.OpenGLView AnchorY(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.OpenGLView AnchorY<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.OpenGLView TranslationX(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TranslationXProperty, value);
    public static Xamarin.Forms.OpenGLView TranslationX(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.OpenGLView TranslationX<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.OpenGLView TranslationY(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TranslationYProperty, value);
    public static Xamarin.Forms.OpenGLView TranslationY(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.OpenGLView TranslationY<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Width(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.WidthProperty, value);
    public static Xamarin.Forms.OpenGLView Width(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.WidthProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Width<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.WidthProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Height(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HeightProperty, value);
    public static Xamarin.Forms.OpenGLView Height(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HeightProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Height<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HeightProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Rotation(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationProperty, value);
    public static Xamarin.Forms.OpenGLView Rotation(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Rotation<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationProperty, value, selector);
    public static Xamarin.Forms.OpenGLView RotationX(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationXProperty, value);
    public static Xamarin.Forms.OpenGLView RotationX(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationXProperty, value, mode);
    public static Xamarin.Forms.OpenGLView RotationX<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationXProperty, value, selector);
    public static Xamarin.Forms.OpenGLView RotationY(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationYProperty, value);
    public static Xamarin.Forms.OpenGLView RotationY(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationYProperty, value, mode);
    public static Xamarin.Forms.OpenGLView RotationY<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.RotationYProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Scale(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.ScaleProperty, value);
    public static Xamarin.Forms.OpenGLView Scale(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.ScaleProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Scale<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.ScaleProperty, value, selector);
    public static Xamarin.Forms.OpenGLView IsVisible(this Xamarin.Forms.OpenGLView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsVisibleProperty, value);
    public static Xamarin.Forms.OpenGLView IsVisible(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.OpenGLView IsVisible<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Opacity(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.OpacityProperty, value);
    public static Xamarin.Forms.OpenGLView Opacity(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.OpacityProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Opacity<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.OpacityProperty, value, selector);
    public static Xamarin.Forms.OpenGLView BackgroundColor(this Xamarin.Forms.OpenGLView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BackgroundColorProperty, value);
    public static Xamarin.Forms.OpenGLView BackgroundColor(this Xamarin.Forms.OpenGLView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.OpenGLView BackgroundColor<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Behaviors(this Xamarin.Forms.OpenGLView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BehaviorsProperty, value);
    public static Xamarin.Forms.OpenGLView Behaviors(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Behaviors<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Triggers(this Xamarin.Forms.OpenGLView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TriggersProperty, value);
    public static Xamarin.Forms.OpenGLView Triggers(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TriggersProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Triggers<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.TriggersProperty, value, selector);
    public static Xamarin.Forms.OpenGLView Style(this Xamarin.Forms.OpenGLView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.StyleProperty, value);
    public static Xamarin.Forms.OpenGLView Style(this Xamarin.Forms.OpenGLView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.StyleProperty, value, mode);
    public static Xamarin.Forms.OpenGLView Style<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.StyleProperty, value, selector);
    public static Xamarin.Forms.OpenGLView WidthRequest(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.WidthRequestProperty, value);
    public static Xamarin.Forms.OpenGLView WidthRequest(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.OpenGLView WidthRequest<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.OpenGLView HeightRequest(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HeightRequestProperty, value);
    public static Xamarin.Forms.OpenGLView HeightRequest(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.OpenGLView HeightRequest<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.OpenGLView MinimumWidthRequest(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.OpenGLView MinimumWidthRequest(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.OpenGLView MinimumWidthRequest<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.OpenGLView MinimumHeightRequest(this Xamarin.Forms.OpenGLView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.OpenGLView MinimumHeightRequest(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.OpenGLView MinimumHeightRequest<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.OpenGLView IsFocused(this Xamarin.Forms.OpenGLView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsFocusedProperty, value);
    public static Xamarin.Forms.OpenGLView IsFocused(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.OpenGLView IsFocused<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.OpenGLView ClassId(this Xamarin.Forms.OpenGLView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.ClassIdProperty, value);
    public static Xamarin.Forms.OpenGLView ClassId(this Xamarin.Forms.OpenGLView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.OpenGLView ClassId<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.OpenGLView BindingContext(this Xamarin.Forms.OpenGLView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BindingContextProperty, value);
    public static Xamarin.Forms.OpenGLView BindingContext(this Xamarin.Forms.OpenGLView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.OpenGLView BindingContext<TFrom>(this Xamarin.Forms.OpenGLView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.OpenGLView.BindingContextProperty, value, selector);
  }

  public static partial class ProgressBarExtensions {
    public static Xamarin.Forms.ProgressBar Progress(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ProgressProperty, value);
    public static Xamarin.Forms.ProgressBar Progress(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ProgressProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Progress<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ProgressProperty, value, selector);
    public static Xamarin.Forms.ProgressBar VerticalOptions(this Xamarin.Forms.ProgressBar obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.VerticalOptionsProperty, value);
    public static Xamarin.Forms.ProgressBar VerticalOptions(this Xamarin.Forms.ProgressBar obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.ProgressBar VerticalOptions<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.ProgressBar HorizontalOptions(this Xamarin.Forms.ProgressBar obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.ProgressBar HorizontalOptions(this Xamarin.Forms.ProgressBar obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.ProgressBar HorizontalOptions<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Margin(this Xamarin.Forms.ProgressBar obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MarginProperty, value);
    public static Xamarin.Forms.ProgressBar Margin(this Xamarin.Forms.ProgressBar obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MarginProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Margin<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MarginProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Navigation(this Xamarin.Forms.ProgressBar obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.NavigationProperty, value);
    public static Xamarin.Forms.ProgressBar Navigation(this Xamarin.Forms.ProgressBar obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.NavigationProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Navigation<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.NavigationProperty, value, selector);
    public static Xamarin.Forms.ProgressBar InputTransparent(this Xamarin.Forms.ProgressBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.InputTransparentProperty, value);
    public static Xamarin.Forms.ProgressBar InputTransparent(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.ProgressBar InputTransparent<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.ProgressBar IsEnabled(this Xamarin.Forms.ProgressBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsEnabledProperty, value);
    public static Xamarin.Forms.ProgressBar IsEnabled(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ProgressBar IsEnabled<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ProgressBar X(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.XProperty, value);
    public static Xamarin.Forms.ProgressBar X(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.XProperty, value, mode);
    public static Xamarin.Forms.ProgressBar X<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.XProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Y(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.YProperty, value);
    public static Xamarin.Forms.ProgressBar Y(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.YProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Y<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.YProperty, value, selector);
    public static Xamarin.Forms.ProgressBar AnchorX(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.AnchorXProperty, value);
    public static Xamarin.Forms.ProgressBar AnchorX(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.AnchorXProperty, value, mode);
    public static Xamarin.Forms.ProgressBar AnchorX<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.AnchorXProperty, value, selector);
    public static Xamarin.Forms.ProgressBar AnchorY(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.AnchorYProperty, value);
    public static Xamarin.Forms.ProgressBar AnchorY(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.AnchorYProperty, value, mode);
    public static Xamarin.Forms.ProgressBar AnchorY<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.AnchorYProperty, value, selector);
    public static Xamarin.Forms.ProgressBar TranslationX(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TranslationXProperty, value);
    public static Xamarin.Forms.ProgressBar TranslationX(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TranslationXProperty, value, mode);
    public static Xamarin.Forms.ProgressBar TranslationX<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TranslationXProperty, value, selector);
    public static Xamarin.Forms.ProgressBar TranslationY(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TranslationYProperty, value);
    public static Xamarin.Forms.ProgressBar TranslationY(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TranslationYProperty, value, mode);
    public static Xamarin.Forms.ProgressBar TranslationY<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TranslationYProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Width(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.WidthProperty, value);
    public static Xamarin.Forms.ProgressBar Width(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.WidthProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Width<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.WidthProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Height(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HeightProperty, value);
    public static Xamarin.Forms.ProgressBar Height(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HeightProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Height<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HeightProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Rotation(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationProperty, value);
    public static Xamarin.Forms.ProgressBar Rotation(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Rotation<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationProperty, value, selector);
    public static Xamarin.Forms.ProgressBar RotationX(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationXProperty, value);
    public static Xamarin.Forms.ProgressBar RotationX(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationXProperty, value, mode);
    public static Xamarin.Forms.ProgressBar RotationX<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationXProperty, value, selector);
    public static Xamarin.Forms.ProgressBar RotationY(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationYProperty, value);
    public static Xamarin.Forms.ProgressBar RotationY(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationYProperty, value, mode);
    public static Xamarin.Forms.ProgressBar RotationY<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.RotationYProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Scale(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ScaleProperty, value);
    public static Xamarin.Forms.ProgressBar Scale(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ScaleProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Scale<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ScaleProperty, value, selector);
    public static Xamarin.Forms.ProgressBar IsVisible(this Xamarin.Forms.ProgressBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsVisibleProperty, value);
    public static Xamarin.Forms.ProgressBar IsVisible(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.ProgressBar IsVisible<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Opacity(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.OpacityProperty, value);
    public static Xamarin.Forms.ProgressBar Opacity(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.OpacityProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Opacity<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.OpacityProperty, value, selector);
    public static Xamarin.Forms.ProgressBar BackgroundColor(this Xamarin.Forms.ProgressBar obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BackgroundColorProperty, value);
    public static Xamarin.Forms.ProgressBar BackgroundColor(this Xamarin.Forms.ProgressBar obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.ProgressBar BackgroundColor<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Behaviors(this Xamarin.Forms.ProgressBar obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BehaviorsProperty, value);
    public static Xamarin.Forms.ProgressBar Behaviors(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Behaviors<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Triggers(this Xamarin.Forms.ProgressBar obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TriggersProperty, value);
    public static Xamarin.Forms.ProgressBar Triggers(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TriggersProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Triggers<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.TriggersProperty, value, selector);
    public static Xamarin.Forms.ProgressBar Style(this Xamarin.Forms.ProgressBar obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.StyleProperty, value);
    public static Xamarin.Forms.ProgressBar Style(this Xamarin.Forms.ProgressBar obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.StyleProperty, value, mode);
    public static Xamarin.Forms.ProgressBar Style<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.StyleProperty, value, selector);
    public static Xamarin.Forms.ProgressBar WidthRequest(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.WidthRequestProperty, value);
    public static Xamarin.Forms.ProgressBar WidthRequest(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.ProgressBar WidthRequest<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.ProgressBar HeightRequest(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HeightRequestProperty, value);
    public static Xamarin.Forms.ProgressBar HeightRequest(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.ProgressBar HeightRequest<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.ProgressBar MinimumWidthRequest(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.ProgressBar MinimumWidthRequest(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.ProgressBar MinimumWidthRequest<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.ProgressBar MinimumHeightRequest(this Xamarin.Forms.ProgressBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.ProgressBar MinimumHeightRequest(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.ProgressBar MinimumHeightRequest<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.ProgressBar IsFocused(this Xamarin.Forms.ProgressBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsFocusedProperty, value);
    public static Xamarin.Forms.ProgressBar IsFocused(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.ProgressBar IsFocused<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.ProgressBar ClassId(this Xamarin.Forms.ProgressBar obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ClassIdProperty, value);
    public static Xamarin.Forms.ProgressBar ClassId(this Xamarin.Forms.ProgressBar obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ProgressBar ClassId<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ProgressBar BindingContext(this Xamarin.Forms.ProgressBar obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BindingContextProperty, value);
    public static Xamarin.Forms.ProgressBar BindingContext(this Xamarin.Forms.ProgressBar obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ProgressBar BindingContext<TFrom>(this Xamarin.Forms.ProgressBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ProgressBar.BindingContextProperty, value, selector);
  }

  public static partial class SearchBarExtensions {
    public static Xamarin.Forms.SearchBar SearchCommand(this Xamarin.Forms.SearchBar obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.SearchCommandProperty, value);
    public static Xamarin.Forms.SearchBar SearchCommand(this Xamarin.Forms.SearchBar obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.SearchCommandProperty, value, mode);
    public static Xamarin.Forms.SearchBar SearchCommand<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.SearchCommandProperty, value, selector);
 public static Xamarin.Forms.SearchBar SearchCommand(this Xamarin.Forms.SearchBar obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.SearchCommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.SearchBar SearchCommandParameter(this Xamarin.Forms.SearchBar obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.SearchCommandParameterProperty, value);
    public static Xamarin.Forms.SearchBar SearchCommandParameter(this Xamarin.Forms.SearchBar obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.SearchCommandParameterProperty, value, mode);
    public static Xamarin.Forms.SearchBar SearchCommandParameter<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.SearchCommandParameterProperty, value, selector);
    public static Xamarin.Forms.SearchBar Text(this Xamarin.Forms.SearchBar obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TextProperty, value);
    public static Xamarin.Forms.SearchBar Text(this Xamarin.Forms.SearchBar obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TextProperty, value, mode);
    public static Xamarin.Forms.SearchBar Text<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TextProperty, value, selector);
    public static Xamarin.Forms.SearchBar CancelButtonColor(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.CancelButtonColorProperty, value);
    public static Xamarin.Forms.SearchBar CancelButtonColor(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.CancelButtonColorProperty, value, mode);
    public static Xamarin.Forms.SearchBar CancelButtonColor<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.CancelButtonColorProperty, value, selector);
    public static Xamarin.Forms.SearchBar Placeholder(this Xamarin.Forms.SearchBar obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.PlaceholderProperty, value);
    public static Xamarin.Forms.SearchBar Placeholder(this Xamarin.Forms.SearchBar obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.PlaceholderProperty, value, mode);
    public static Xamarin.Forms.SearchBar Placeholder<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.PlaceholderProperty, value, selector);
    public static Xamarin.Forms.SearchBar FontFamily(this Xamarin.Forms.SearchBar obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontFamilyProperty, value);
    public static Xamarin.Forms.SearchBar FontFamily(this Xamarin.Forms.SearchBar obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontFamilyProperty, value, mode);
    public static Xamarin.Forms.SearchBar FontFamily<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontFamilyProperty, value, selector);
    public static Xamarin.Forms.SearchBar FontSize(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontSizeProperty, value);
    public static Xamarin.Forms.SearchBar FontSize(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontSizeProperty, value, mode);
    public static Xamarin.Forms.SearchBar FontSize<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontSizeProperty, value, selector);
    public static Xamarin.Forms.SearchBar FontAttributes(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.FontAttributes value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontAttributesProperty, value);
    public static Xamarin.Forms.SearchBar FontAttributes(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.FontAttributes> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontAttributesProperty, value, mode);
    public static Xamarin.Forms.SearchBar FontAttributes<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FontAttributes> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.FontAttributesProperty, value, selector);
    public static Xamarin.Forms.SearchBar HorizontalTextAlignment(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HorizontalTextAlignmentProperty, value);
    public static Xamarin.Forms.SearchBar HorizontalTextAlignment(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HorizontalTextAlignmentProperty, value, mode);
    public static Xamarin.Forms.SearchBar HorizontalTextAlignment<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HorizontalTextAlignmentProperty, value, selector);
    public static Xamarin.Forms.SearchBar TextColor(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TextColorProperty, value);
    public static Xamarin.Forms.SearchBar TextColor(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TextColorProperty, value, mode);
    public static Xamarin.Forms.SearchBar TextColor<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TextColorProperty, value, selector);
    public static Xamarin.Forms.SearchBar PlaceholderColor(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.PlaceholderColorProperty, value);
    public static Xamarin.Forms.SearchBar PlaceholderColor(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.PlaceholderColorProperty, value, mode);
    public static Xamarin.Forms.SearchBar PlaceholderColor<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.PlaceholderColorProperty, value, selector);
    public static Xamarin.Forms.SearchBar VerticalOptions(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.VerticalOptionsProperty, value);
    public static Xamarin.Forms.SearchBar VerticalOptions(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.SearchBar VerticalOptions<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.SearchBar HorizontalOptions(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.SearchBar HorizontalOptions(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.SearchBar HorizontalOptions<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.SearchBar Margin(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MarginProperty, value);
    public static Xamarin.Forms.SearchBar Margin(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MarginProperty, value, mode);
    public static Xamarin.Forms.SearchBar Margin<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MarginProperty, value, selector);
    public static Xamarin.Forms.SearchBar Navigation(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.NavigationProperty, value);
    public static Xamarin.Forms.SearchBar Navigation(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.NavigationProperty, value, mode);
    public static Xamarin.Forms.SearchBar Navigation<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.NavigationProperty, value, selector);
    public static Xamarin.Forms.SearchBar InputTransparent(this Xamarin.Forms.SearchBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.InputTransparentProperty, value);
    public static Xamarin.Forms.SearchBar InputTransparent(this Xamarin.Forms.SearchBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.SearchBar InputTransparent<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.SearchBar IsEnabled(this Xamarin.Forms.SearchBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsEnabledProperty, value);
    public static Xamarin.Forms.SearchBar IsEnabled(this Xamarin.Forms.SearchBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.SearchBar IsEnabled<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.SearchBar X(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.XProperty, value);
    public static Xamarin.Forms.SearchBar X(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.XProperty, value, mode);
    public static Xamarin.Forms.SearchBar X<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.XProperty, value, selector);
    public static Xamarin.Forms.SearchBar Y(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.YProperty, value);
    public static Xamarin.Forms.SearchBar Y(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.YProperty, value, mode);
    public static Xamarin.Forms.SearchBar Y<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.YProperty, value, selector);
    public static Xamarin.Forms.SearchBar AnchorX(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.AnchorXProperty, value);
    public static Xamarin.Forms.SearchBar AnchorX(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.AnchorXProperty, value, mode);
    public static Xamarin.Forms.SearchBar AnchorX<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.AnchorXProperty, value, selector);
    public static Xamarin.Forms.SearchBar AnchorY(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.AnchorYProperty, value);
    public static Xamarin.Forms.SearchBar AnchorY(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.AnchorYProperty, value, mode);
    public static Xamarin.Forms.SearchBar AnchorY<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.AnchorYProperty, value, selector);
    public static Xamarin.Forms.SearchBar TranslationX(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TranslationXProperty, value);
    public static Xamarin.Forms.SearchBar TranslationX(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TranslationXProperty, value, mode);
    public static Xamarin.Forms.SearchBar TranslationX<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TranslationXProperty, value, selector);
    public static Xamarin.Forms.SearchBar TranslationY(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TranslationYProperty, value);
    public static Xamarin.Forms.SearchBar TranslationY(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TranslationYProperty, value, mode);
    public static Xamarin.Forms.SearchBar TranslationY<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TranslationYProperty, value, selector);
    public static Xamarin.Forms.SearchBar Width(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.WidthProperty, value);
    public static Xamarin.Forms.SearchBar Width(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.WidthProperty, value, mode);
    public static Xamarin.Forms.SearchBar Width<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.WidthProperty, value, selector);
    public static Xamarin.Forms.SearchBar Height(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HeightProperty, value);
    public static Xamarin.Forms.SearchBar Height(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HeightProperty, value, mode);
    public static Xamarin.Forms.SearchBar Height<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HeightProperty, value, selector);
    public static Xamarin.Forms.SearchBar Rotation(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationProperty, value);
    public static Xamarin.Forms.SearchBar Rotation(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationProperty, value, mode);
    public static Xamarin.Forms.SearchBar Rotation<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationProperty, value, selector);
    public static Xamarin.Forms.SearchBar RotationX(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationXProperty, value);
    public static Xamarin.Forms.SearchBar RotationX(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationXProperty, value, mode);
    public static Xamarin.Forms.SearchBar RotationX<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationXProperty, value, selector);
    public static Xamarin.Forms.SearchBar RotationY(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationYProperty, value);
    public static Xamarin.Forms.SearchBar RotationY(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationYProperty, value, mode);
    public static Xamarin.Forms.SearchBar RotationY<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.RotationYProperty, value, selector);
    public static Xamarin.Forms.SearchBar Scale(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.ScaleProperty, value);
    public static Xamarin.Forms.SearchBar Scale(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.ScaleProperty, value, mode);
    public static Xamarin.Forms.SearchBar Scale<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.ScaleProperty, value, selector);
    public static Xamarin.Forms.SearchBar IsVisible(this Xamarin.Forms.SearchBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsVisibleProperty, value);
    public static Xamarin.Forms.SearchBar IsVisible(this Xamarin.Forms.SearchBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.SearchBar IsVisible<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.SearchBar Opacity(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.OpacityProperty, value);
    public static Xamarin.Forms.SearchBar Opacity(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.OpacityProperty, value, mode);
    public static Xamarin.Forms.SearchBar Opacity<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.OpacityProperty, value, selector);
    public static Xamarin.Forms.SearchBar BackgroundColor(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BackgroundColorProperty, value);
    public static Xamarin.Forms.SearchBar BackgroundColor(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.SearchBar BackgroundColor<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.SearchBar Behaviors(this Xamarin.Forms.SearchBar obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BehaviorsProperty, value);
    public static Xamarin.Forms.SearchBar Behaviors(this Xamarin.Forms.SearchBar obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.SearchBar Behaviors<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.SearchBar Triggers(this Xamarin.Forms.SearchBar obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TriggersProperty, value);
    public static Xamarin.Forms.SearchBar Triggers(this Xamarin.Forms.SearchBar obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TriggersProperty, value, mode);
    public static Xamarin.Forms.SearchBar Triggers<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.TriggersProperty, value, selector);
    public static Xamarin.Forms.SearchBar Style(this Xamarin.Forms.SearchBar obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.StyleProperty, value);
    public static Xamarin.Forms.SearchBar Style(this Xamarin.Forms.SearchBar obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.StyleProperty, value, mode);
    public static Xamarin.Forms.SearchBar Style<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.StyleProperty, value, selector);
    public static Xamarin.Forms.SearchBar WidthRequest(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.WidthRequestProperty, value);
    public static Xamarin.Forms.SearchBar WidthRequest(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.SearchBar WidthRequest<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.SearchBar HeightRequest(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HeightRequestProperty, value);
    public static Xamarin.Forms.SearchBar HeightRequest(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.SearchBar HeightRequest<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.SearchBar MinimumWidthRequest(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.SearchBar MinimumWidthRequest(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.SearchBar MinimumWidthRequest<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.SearchBar MinimumHeightRequest(this Xamarin.Forms.SearchBar obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.SearchBar MinimumHeightRequest(this Xamarin.Forms.SearchBar obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.SearchBar MinimumHeightRequest<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.SearchBar IsFocused(this Xamarin.Forms.SearchBar obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsFocusedProperty, value);
    public static Xamarin.Forms.SearchBar IsFocused(this Xamarin.Forms.SearchBar obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.SearchBar IsFocused<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.SearchBar ClassId(this Xamarin.Forms.SearchBar obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.ClassIdProperty, value);
    public static Xamarin.Forms.SearchBar ClassId(this Xamarin.Forms.SearchBar obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.ClassIdProperty, value, mode);
    public static Xamarin.Forms.SearchBar ClassId<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.ClassIdProperty, value, selector);
    public static Xamarin.Forms.SearchBar BindingContext(this Xamarin.Forms.SearchBar obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BindingContextProperty, value);
    public static Xamarin.Forms.SearchBar BindingContext(this Xamarin.Forms.SearchBar obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BindingContextProperty, value, mode);
    public static Xamarin.Forms.SearchBar BindingContext<TFrom>(this Xamarin.Forms.SearchBar obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.SearchBar.BindingContextProperty, value, selector);
  }

  public static partial class SliderExtensions {
    public static Xamarin.Forms.Slider Minimum(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumProperty, value);
    public static Xamarin.Forms.Slider Minimum(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumProperty, value, mode);
    public static Xamarin.Forms.Slider Minimum<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumProperty, value, selector);
    public static Xamarin.Forms.Slider Maximum(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MaximumProperty, value);
    public static Xamarin.Forms.Slider Maximum(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MaximumProperty, value, mode);
    public static Xamarin.Forms.Slider Maximum<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MaximumProperty, value, selector);
    public static Xamarin.Forms.Slider Value(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ValueProperty, value);
    public static Xamarin.Forms.Slider Value(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ValueProperty, value, mode);
    public static Xamarin.Forms.Slider Value<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ValueProperty, value, selector);
    public static Xamarin.Forms.Slider VerticalOptions(this Xamarin.Forms.Slider obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Slider VerticalOptions(this Xamarin.Forms.Slider obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Slider VerticalOptions<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Slider HorizontalOptions(this Xamarin.Forms.Slider obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Slider HorizontalOptions(this Xamarin.Forms.Slider obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Slider HorizontalOptions<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Slider Margin(this Xamarin.Forms.Slider obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MarginProperty, value);
    public static Xamarin.Forms.Slider Margin(this Xamarin.Forms.Slider obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MarginProperty, value, mode);
    public static Xamarin.Forms.Slider Margin<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MarginProperty, value, selector);
    public static Xamarin.Forms.Slider Navigation(this Xamarin.Forms.Slider obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.NavigationProperty, value);
    public static Xamarin.Forms.Slider Navigation(this Xamarin.Forms.Slider obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.NavigationProperty, value, mode);
    public static Xamarin.Forms.Slider Navigation<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.NavigationProperty, value, selector);
    public static Xamarin.Forms.Slider InputTransparent(this Xamarin.Forms.Slider obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.InputTransparentProperty, value);
    public static Xamarin.Forms.Slider InputTransparent(this Xamarin.Forms.Slider obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Slider InputTransparent<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Slider IsEnabled(this Xamarin.Forms.Slider obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsEnabledProperty, value);
    public static Xamarin.Forms.Slider IsEnabled(this Xamarin.Forms.Slider obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Slider IsEnabled<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Slider X(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.XProperty, value);
    public static Xamarin.Forms.Slider X(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.XProperty, value, mode);
    public static Xamarin.Forms.Slider X<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.XProperty, value, selector);
    public static Xamarin.Forms.Slider Y(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.YProperty, value);
    public static Xamarin.Forms.Slider Y(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.YProperty, value, mode);
    public static Xamarin.Forms.Slider Y<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.YProperty, value, selector);
    public static Xamarin.Forms.Slider AnchorX(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.AnchorXProperty, value);
    public static Xamarin.Forms.Slider AnchorX(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Slider AnchorX<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Slider AnchorY(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.AnchorYProperty, value);
    public static Xamarin.Forms.Slider AnchorY(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Slider AnchorY<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Slider TranslationX(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TranslationXProperty, value);
    public static Xamarin.Forms.Slider TranslationX(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Slider TranslationX<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Slider TranslationY(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TranslationYProperty, value);
    public static Xamarin.Forms.Slider TranslationY(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Slider TranslationY<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Slider Width(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.WidthProperty, value);
    public static Xamarin.Forms.Slider Width(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.WidthProperty, value, mode);
    public static Xamarin.Forms.Slider Width<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.WidthProperty, value, selector);
    public static Xamarin.Forms.Slider Height(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HeightProperty, value);
    public static Xamarin.Forms.Slider Height(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HeightProperty, value, mode);
    public static Xamarin.Forms.Slider Height<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HeightProperty, value, selector);
    public static Xamarin.Forms.Slider Rotation(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationProperty, value);
    public static Xamarin.Forms.Slider Rotation(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationProperty, value, mode);
    public static Xamarin.Forms.Slider Rotation<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationProperty, value, selector);
    public static Xamarin.Forms.Slider RotationX(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationXProperty, value);
    public static Xamarin.Forms.Slider RotationX(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationXProperty, value, mode);
    public static Xamarin.Forms.Slider RotationX<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationXProperty, value, selector);
    public static Xamarin.Forms.Slider RotationY(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationYProperty, value);
    public static Xamarin.Forms.Slider RotationY(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationYProperty, value, mode);
    public static Xamarin.Forms.Slider RotationY<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.RotationYProperty, value, selector);
    public static Xamarin.Forms.Slider Scale(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ScaleProperty, value);
    public static Xamarin.Forms.Slider Scale(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ScaleProperty, value, mode);
    public static Xamarin.Forms.Slider Scale<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ScaleProperty, value, selector);
    public static Xamarin.Forms.Slider IsVisible(this Xamarin.Forms.Slider obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsVisibleProperty, value);
    public static Xamarin.Forms.Slider IsVisible(this Xamarin.Forms.Slider obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Slider IsVisible<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Slider Opacity(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.OpacityProperty, value);
    public static Xamarin.Forms.Slider Opacity(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.OpacityProperty, value, mode);
    public static Xamarin.Forms.Slider Opacity<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.OpacityProperty, value, selector);
    public static Xamarin.Forms.Slider BackgroundColor(this Xamarin.Forms.Slider obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BackgroundColorProperty, value);
    public static Xamarin.Forms.Slider BackgroundColor(this Xamarin.Forms.Slider obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Slider BackgroundColor<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Slider Behaviors(this Xamarin.Forms.Slider obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BehaviorsProperty, value);
    public static Xamarin.Forms.Slider Behaviors(this Xamarin.Forms.Slider obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Slider Behaviors<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Slider Triggers(this Xamarin.Forms.Slider obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TriggersProperty, value);
    public static Xamarin.Forms.Slider Triggers(this Xamarin.Forms.Slider obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TriggersProperty, value, mode);
    public static Xamarin.Forms.Slider Triggers<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.TriggersProperty, value, selector);
    public static Xamarin.Forms.Slider Style(this Xamarin.Forms.Slider obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.StyleProperty, value);
    public static Xamarin.Forms.Slider Style(this Xamarin.Forms.Slider obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.StyleProperty, value, mode);
    public static Xamarin.Forms.Slider Style<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.StyleProperty, value, selector);
    public static Xamarin.Forms.Slider WidthRequest(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.WidthRequestProperty, value);
    public static Xamarin.Forms.Slider WidthRequest(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Slider WidthRequest<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Slider HeightRequest(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HeightRequestProperty, value);
    public static Xamarin.Forms.Slider HeightRequest(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Slider HeightRequest<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Slider MinimumWidthRequest(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Slider MinimumWidthRequest(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Slider MinimumWidthRequest<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Slider MinimumHeightRequest(this Xamarin.Forms.Slider obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Slider MinimumHeightRequest(this Xamarin.Forms.Slider obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Slider MinimumHeightRequest<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Slider IsFocused(this Xamarin.Forms.Slider obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsFocusedProperty, value);
    public static Xamarin.Forms.Slider IsFocused(this Xamarin.Forms.Slider obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Slider IsFocused<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Slider ClassId(this Xamarin.Forms.Slider obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ClassIdProperty, value);
    public static Xamarin.Forms.Slider ClassId(this Xamarin.Forms.Slider obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Slider ClassId<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Slider BindingContext(this Xamarin.Forms.Slider obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BindingContextProperty, value);
    public static Xamarin.Forms.Slider BindingContext(this Xamarin.Forms.Slider obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Slider BindingContext<TFrom>(this Xamarin.Forms.Slider obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Slider.BindingContextProperty, value, selector);
  }

  public static partial class StepperExtensions {
    public static Xamarin.Forms.Stepper Maximum(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MaximumProperty, value);
    public static Xamarin.Forms.Stepper Maximum(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MaximumProperty, value, mode);
    public static Xamarin.Forms.Stepper Maximum<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MaximumProperty, value, selector);
    public static Xamarin.Forms.Stepper Minimum(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumProperty, value);
    public static Xamarin.Forms.Stepper Minimum(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumProperty, value, mode);
    public static Xamarin.Forms.Stepper Minimum<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumProperty, value, selector);
    public static Xamarin.Forms.Stepper Value(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ValueProperty, value);
    public static Xamarin.Forms.Stepper Value(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ValueProperty, value, mode);
    public static Xamarin.Forms.Stepper Value<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ValueProperty, value, selector);
    public static Xamarin.Forms.Stepper Increment(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IncrementProperty, value);
    public static Xamarin.Forms.Stepper Increment(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IncrementProperty, value, mode);
    public static Xamarin.Forms.Stepper Increment<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IncrementProperty, value, selector);
    public static Xamarin.Forms.Stepper VerticalOptions(this Xamarin.Forms.Stepper obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Stepper VerticalOptions(this Xamarin.Forms.Stepper obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Stepper VerticalOptions<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Stepper HorizontalOptions(this Xamarin.Forms.Stepper obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Stepper HorizontalOptions(this Xamarin.Forms.Stepper obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Stepper HorizontalOptions<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Stepper Margin(this Xamarin.Forms.Stepper obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MarginProperty, value);
    public static Xamarin.Forms.Stepper Margin(this Xamarin.Forms.Stepper obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MarginProperty, value, mode);
    public static Xamarin.Forms.Stepper Margin<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MarginProperty, value, selector);
    public static Xamarin.Forms.Stepper Navigation(this Xamarin.Forms.Stepper obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.NavigationProperty, value);
    public static Xamarin.Forms.Stepper Navigation(this Xamarin.Forms.Stepper obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.NavigationProperty, value, mode);
    public static Xamarin.Forms.Stepper Navigation<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.NavigationProperty, value, selector);
    public static Xamarin.Forms.Stepper InputTransparent(this Xamarin.Forms.Stepper obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.InputTransparentProperty, value);
    public static Xamarin.Forms.Stepper InputTransparent(this Xamarin.Forms.Stepper obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Stepper InputTransparent<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Stepper IsEnabled(this Xamarin.Forms.Stepper obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsEnabledProperty, value);
    public static Xamarin.Forms.Stepper IsEnabled(this Xamarin.Forms.Stepper obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Stepper IsEnabled<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Stepper X(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.XProperty, value);
    public static Xamarin.Forms.Stepper X(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.XProperty, value, mode);
    public static Xamarin.Forms.Stepper X<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.XProperty, value, selector);
    public static Xamarin.Forms.Stepper Y(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.YProperty, value);
    public static Xamarin.Forms.Stepper Y(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.YProperty, value, mode);
    public static Xamarin.Forms.Stepper Y<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.YProperty, value, selector);
    public static Xamarin.Forms.Stepper AnchorX(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.AnchorXProperty, value);
    public static Xamarin.Forms.Stepper AnchorX(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Stepper AnchorX<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Stepper AnchorY(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.AnchorYProperty, value);
    public static Xamarin.Forms.Stepper AnchorY(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Stepper AnchorY<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Stepper TranslationX(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TranslationXProperty, value);
    public static Xamarin.Forms.Stepper TranslationX(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Stepper TranslationX<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Stepper TranslationY(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TranslationYProperty, value);
    public static Xamarin.Forms.Stepper TranslationY(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Stepper TranslationY<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Stepper Width(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.WidthProperty, value);
    public static Xamarin.Forms.Stepper Width(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.WidthProperty, value, mode);
    public static Xamarin.Forms.Stepper Width<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.WidthProperty, value, selector);
    public static Xamarin.Forms.Stepper Height(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HeightProperty, value);
    public static Xamarin.Forms.Stepper Height(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HeightProperty, value, mode);
    public static Xamarin.Forms.Stepper Height<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HeightProperty, value, selector);
    public static Xamarin.Forms.Stepper Rotation(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationProperty, value);
    public static Xamarin.Forms.Stepper Rotation(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationProperty, value, mode);
    public static Xamarin.Forms.Stepper Rotation<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationProperty, value, selector);
    public static Xamarin.Forms.Stepper RotationX(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationXProperty, value);
    public static Xamarin.Forms.Stepper RotationX(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationXProperty, value, mode);
    public static Xamarin.Forms.Stepper RotationX<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationXProperty, value, selector);
    public static Xamarin.Forms.Stepper RotationY(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationYProperty, value);
    public static Xamarin.Forms.Stepper RotationY(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationYProperty, value, mode);
    public static Xamarin.Forms.Stepper RotationY<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.RotationYProperty, value, selector);
    public static Xamarin.Forms.Stepper Scale(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ScaleProperty, value);
    public static Xamarin.Forms.Stepper Scale(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ScaleProperty, value, mode);
    public static Xamarin.Forms.Stepper Scale<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ScaleProperty, value, selector);
    public static Xamarin.Forms.Stepper IsVisible(this Xamarin.Forms.Stepper obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsVisibleProperty, value);
    public static Xamarin.Forms.Stepper IsVisible(this Xamarin.Forms.Stepper obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Stepper IsVisible<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Stepper Opacity(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.OpacityProperty, value);
    public static Xamarin.Forms.Stepper Opacity(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.OpacityProperty, value, mode);
    public static Xamarin.Forms.Stepper Opacity<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.OpacityProperty, value, selector);
    public static Xamarin.Forms.Stepper BackgroundColor(this Xamarin.Forms.Stepper obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BackgroundColorProperty, value);
    public static Xamarin.Forms.Stepper BackgroundColor(this Xamarin.Forms.Stepper obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Stepper BackgroundColor<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Stepper Behaviors(this Xamarin.Forms.Stepper obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BehaviorsProperty, value);
    public static Xamarin.Forms.Stepper Behaviors(this Xamarin.Forms.Stepper obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Stepper Behaviors<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Stepper Triggers(this Xamarin.Forms.Stepper obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TriggersProperty, value);
    public static Xamarin.Forms.Stepper Triggers(this Xamarin.Forms.Stepper obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TriggersProperty, value, mode);
    public static Xamarin.Forms.Stepper Triggers<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.TriggersProperty, value, selector);
    public static Xamarin.Forms.Stepper Style(this Xamarin.Forms.Stepper obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.StyleProperty, value);
    public static Xamarin.Forms.Stepper Style(this Xamarin.Forms.Stepper obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.StyleProperty, value, mode);
    public static Xamarin.Forms.Stepper Style<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.StyleProperty, value, selector);
    public static Xamarin.Forms.Stepper WidthRequest(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.WidthRequestProperty, value);
    public static Xamarin.Forms.Stepper WidthRequest(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Stepper WidthRequest<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Stepper HeightRequest(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HeightRequestProperty, value);
    public static Xamarin.Forms.Stepper HeightRequest(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Stepper HeightRequest<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Stepper MinimumWidthRequest(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Stepper MinimumWidthRequest(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Stepper MinimumWidthRequest<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Stepper MinimumHeightRequest(this Xamarin.Forms.Stepper obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Stepper MinimumHeightRequest(this Xamarin.Forms.Stepper obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Stepper MinimumHeightRequest<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Stepper IsFocused(this Xamarin.Forms.Stepper obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsFocusedProperty, value);
    public static Xamarin.Forms.Stepper IsFocused(this Xamarin.Forms.Stepper obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Stepper IsFocused<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Stepper ClassId(this Xamarin.Forms.Stepper obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ClassIdProperty, value);
    public static Xamarin.Forms.Stepper ClassId(this Xamarin.Forms.Stepper obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Stepper ClassId<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Stepper BindingContext(this Xamarin.Forms.Stepper obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BindingContextProperty, value);
    public static Xamarin.Forms.Stepper BindingContext(this Xamarin.Forms.Stepper obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Stepper BindingContext<TFrom>(this Xamarin.Forms.Stepper obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Stepper.BindingContextProperty, value, selector);
  }

  public static partial class SwitchExtensions {
    public static Xamarin.Forms.Switch IsToggled(this Xamarin.Forms.Switch obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsToggledProperty, value);
    public static Xamarin.Forms.Switch IsToggled(this Xamarin.Forms.Switch obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsToggledProperty, value, mode);
    public static Xamarin.Forms.Switch IsToggled<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsToggledProperty, value, selector);
    public static Xamarin.Forms.Switch VerticalOptions(this Xamarin.Forms.Switch obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Switch VerticalOptions(this Xamarin.Forms.Switch obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Switch VerticalOptions<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Switch HorizontalOptions(this Xamarin.Forms.Switch obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Switch HorizontalOptions(this Xamarin.Forms.Switch obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Switch HorizontalOptions<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Switch Margin(this Xamarin.Forms.Switch obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MarginProperty, value);
    public static Xamarin.Forms.Switch Margin(this Xamarin.Forms.Switch obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MarginProperty, value, mode);
    public static Xamarin.Forms.Switch Margin<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MarginProperty, value, selector);
    public static Xamarin.Forms.Switch Navigation(this Xamarin.Forms.Switch obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.NavigationProperty, value);
    public static Xamarin.Forms.Switch Navigation(this Xamarin.Forms.Switch obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.NavigationProperty, value, mode);
    public static Xamarin.Forms.Switch Navigation<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.NavigationProperty, value, selector);
    public static Xamarin.Forms.Switch InputTransparent(this Xamarin.Forms.Switch obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.InputTransparentProperty, value);
    public static Xamarin.Forms.Switch InputTransparent(this Xamarin.Forms.Switch obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Switch InputTransparent<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Switch IsEnabled(this Xamarin.Forms.Switch obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsEnabledProperty, value);
    public static Xamarin.Forms.Switch IsEnabled(this Xamarin.Forms.Switch obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Switch IsEnabled<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Switch X(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.XProperty, value);
    public static Xamarin.Forms.Switch X(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.XProperty, value, mode);
    public static Xamarin.Forms.Switch X<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.XProperty, value, selector);
    public static Xamarin.Forms.Switch Y(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.YProperty, value);
    public static Xamarin.Forms.Switch Y(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.YProperty, value, mode);
    public static Xamarin.Forms.Switch Y<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.YProperty, value, selector);
    public static Xamarin.Forms.Switch AnchorX(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.AnchorXProperty, value);
    public static Xamarin.Forms.Switch AnchorX(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Switch AnchorX<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Switch AnchorY(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.AnchorYProperty, value);
    public static Xamarin.Forms.Switch AnchorY(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Switch AnchorY<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Switch TranslationX(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TranslationXProperty, value);
    public static Xamarin.Forms.Switch TranslationX(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Switch TranslationX<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Switch TranslationY(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TranslationYProperty, value);
    public static Xamarin.Forms.Switch TranslationY(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Switch TranslationY<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Switch Width(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.WidthProperty, value);
    public static Xamarin.Forms.Switch Width(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.WidthProperty, value, mode);
    public static Xamarin.Forms.Switch Width<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.WidthProperty, value, selector);
    public static Xamarin.Forms.Switch Height(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HeightProperty, value);
    public static Xamarin.Forms.Switch Height(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HeightProperty, value, mode);
    public static Xamarin.Forms.Switch Height<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HeightProperty, value, selector);
    public static Xamarin.Forms.Switch Rotation(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationProperty, value);
    public static Xamarin.Forms.Switch Rotation(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationProperty, value, mode);
    public static Xamarin.Forms.Switch Rotation<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationProperty, value, selector);
    public static Xamarin.Forms.Switch RotationX(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationXProperty, value);
    public static Xamarin.Forms.Switch RotationX(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationXProperty, value, mode);
    public static Xamarin.Forms.Switch RotationX<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationXProperty, value, selector);
    public static Xamarin.Forms.Switch RotationY(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationYProperty, value);
    public static Xamarin.Forms.Switch RotationY(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationYProperty, value, mode);
    public static Xamarin.Forms.Switch RotationY<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.RotationYProperty, value, selector);
    public static Xamarin.Forms.Switch Scale(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.ScaleProperty, value);
    public static Xamarin.Forms.Switch Scale(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.ScaleProperty, value, mode);
    public static Xamarin.Forms.Switch Scale<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.ScaleProperty, value, selector);
    public static Xamarin.Forms.Switch IsVisible(this Xamarin.Forms.Switch obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsVisibleProperty, value);
    public static Xamarin.Forms.Switch IsVisible(this Xamarin.Forms.Switch obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Switch IsVisible<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Switch Opacity(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.OpacityProperty, value);
    public static Xamarin.Forms.Switch Opacity(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.OpacityProperty, value, mode);
    public static Xamarin.Forms.Switch Opacity<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.OpacityProperty, value, selector);
    public static Xamarin.Forms.Switch BackgroundColor(this Xamarin.Forms.Switch obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BackgroundColorProperty, value);
    public static Xamarin.Forms.Switch BackgroundColor(this Xamarin.Forms.Switch obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Switch BackgroundColor<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Switch Behaviors(this Xamarin.Forms.Switch obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BehaviorsProperty, value);
    public static Xamarin.Forms.Switch Behaviors(this Xamarin.Forms.Switch obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Switch Behaviors<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Switch Triggers(this Xamarin.Forms.Switch obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TriggersProperty, value);
    public static Xamarin.Forms.Switch Triggers(this Xamarin.Forms.Switch obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TriggersProperty, value, mode);
    public static Xamarin.Forms.Switch Triggers<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.TriggersProperty, value, selector);
    public static Xamarin.Forms.Switch Style(this Xamarin.Forms.Switch obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.StyleProperty, value);
    public static Xamarin.Forms.Switch Style(this Xamarin.Forms.Switch obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.StyleProperty, value, mode);
    public static Xamarin.Forms.Switch Style<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.StyleProperty, value, selector);
    public static Xamarin.Forms.Switch WidthRequest(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.WidthRequestProperty, value);
    public static Xamarin.Forms.Switch WidthRequest(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Switch WidthRequest<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Switch HeightRequest(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HeightRequestProperty, value);
    public static Xamarin.Forms.Switch HeightRequest(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Switch HeightRequest<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Switch MinimumWidthRequest(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Switch MinimumWidthRequest(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Switch MinimumWidthRequest<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Switch MinimumHeightRequest(this Xamarin.Forms.Switch obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Switch MinimumHeightRequest(this Xamarin.Forms.Switch obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Switch MinimumHeightRequest<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Switch IsFocused(this Xamarin.Forms.Switch obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsFocusedProperty, value);
    public static Xamarin.Forms.Switch IsFocused(this Xamarin.Forms.Switch obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Switch IsFocused<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Switch ClassId(this Xamarin.Forms.Switch obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.ClassIdProperty, value);
    public static Xamarin.Forms.Switch ClassId(this Xamarin.Forms.Switch obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Switch ClassId<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Switch BindingContext(this Xamarin.Forms.Switch obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BindingContextProperty, value);
    public static Xamarin.Forms.Switch BindingContext(this Xamarin.Forms.Switch obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Switch BindingContext<TFrom>(this Xamarin.Forms.Switch obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Switch.BindingContextProperty, value, selector);
  }

  public static partial class TimePickerExtensions {
    public static Xamarin.Forms.TimePicker Format(this Xamarin.Forms.TimePicker obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.FormatProperty, value);
    public static Xamarin.Forms.TimePicker Format(this Xamarin.Forms.TimePicker obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.FormatProperty, value, mode);
    public static Xamarin.Forms.TimePicker Format<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.FormatProperty, value, selector);
    public static Xamarin.Forms.TimePicker TextColor(this Xamarin.Forms.TimePicker obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TextColorProperty, value);
    public static Xamarin.Forms.TimePicker TextColor(this Xamarin.Forms.TimePicker obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TextColorProperty, value, mode);
    public static Xamarin.Forms.TimePicker TextColor<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TextColorProperty, value, selector);
    public static Xamarin.Forms.TimePicker Time(this Xamarin.Forms.TimePicker obj, System.TimeSpan value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TimeProperty, value);
    public static Xamarin.Forms.TimePicker Time(this Xamarin.Forms.TimePicker obj, BindableValue<System.TimeSpan> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TimeProperty, value, mode);
    public static Xamarin.Forms.TimePicker Time<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.TimeSpan> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TimeProperty, value, selector);
    public static Xamarin.Forms.TimePicker VerticalOptions(this Xamarin.Forms.TimePicker obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.VerticalOptionsProperty, value);
    public static Xamarin.Forms.TimePicker VerticalOptions(this Xamarin.Forms.TimePicker obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.TimePicker VerticalOptions<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.TimePicker HorizontalOptions(this Xamarin.Forms.TimePicker obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.TimePicker HorizontalOptions(this Xamarin.Forms.TimePicker obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.TimePicker HorizontalOptions<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.TimePicker Margin(this Xamarin.Forms.TimePicker obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MarginProperty, value);
    public static Xamarin.Forms.TimePicker Margin(this Xamarin.Forms.TimePicker obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MarginProperty, value, mode);
    public static Xamarin.Forms.TimePicker Margin<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MarginProperty, value, selector);
    public static Xamarin.Forms.TimePicker Navigation(this Xamarin.Forms.TimePicker obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.NavigationProperty, value);
    public static Xamarin.Forms.TimePicker Navigation(this Xamarin.Forms.TimePicker obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.NavigationProperty, value, mode);
    public static Xamarin.Forms.TimePicker Navigation<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.NavigationProperty, value, selector);
    public static Xamarin.Forms.TimePicker InputTransparent(this Xamarin.Forms.TimePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.InputTransparentProperty, value);
    public static Xamarin.Forms.TimePicker InputTransparent(this Xamarin.Forms.TimePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.TimePicker InputTransparent<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.TimePicker IsEnabled(this Xamarin.Forms.TimePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsEnabledProperty, value);
    public static Xamarin.Forms.TimePicker IsEnabled(this Xamarin.Forms.TimePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.TimePicker IsEnabled<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.TimePicker X(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.XProperty, value);
    public static Xamarin.Forms.TimePicker X(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.XProperty, value, mode);
    public static Xamarin.Forms.TimePicker X<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.XProperty, value, selector);
    public static Xamarin.Forms.TimePicker Y(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.YProperty, value);
    public static Xamarin.Forms.TimePicker Y(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.YProperty, value, mode);
    public static Xamarin.Forms.TimePicker Y<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.YProperty, value, selector);
    public static Xamarin.Forms.TimePicker AnchorX(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.AnchorXProperty, value);
    public static Xamarin.Forms.TimePicker AnchorX(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.AnchorXProperty, value, mode);
    public static Xamarin.Forms.TimePicker AnchorX<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.AnchorXProperty, value, selector);
    public static Xamarin.Forms.TimePicker AnchorY(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.AnchorYProperty, value);
    public static Xamarin.Forms.TimePicker AnchorY(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.AnchorYProperty, value, mode);
    public static Xamarin.Forms.TimePicker AnchorY<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.AnchorYProperty, value, selector);
    public static Xamarin.Forms.TimePicker TranslationX(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TranslationXProperty, value);
    public static Xamarin.Forms.TimePicker TranslationX(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TranslationXProperty, value, mode);
    public static Xamarin.Forms.TimePicker TranslationX<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TranslationXProperty, value, selector);
    public static Xamarin.Forms.TimePicker TranslationY(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TranslationYProperty, value);
    public static Xamarin.Forms.TimePicker TranslationY(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TranslationYProperty, value, mode);
    public static Xamarin.Forms.TimePicker TranslationY<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TranslationYProperty, value, selector);
    public static Xamarin.Forms.TimePicker Width(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.WidthProperty, value);
    public static Xamarin.Forms.TimePicker Width(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.WidthProperty, value, mode);
    public static Xamarin.Forms.TimePicker Width<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.WidthProperty, value, selector);
    public static Xamarin.Forms.TimePicker Height(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HeightProperty, value);
    public static Xamarin.Forms.TimePicker Height(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HeightProperty, value, mode);
    public static Xamarin.Forms.TimePicker Height<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HeightProperty, value, selector);
    public static Xamarin.Forms.TimePicker Rotation(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationProperty, value);
    public static Xamarin.Forms.TimePicker Rotation(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationProperty, value, mode);
    public static Xamarin.Forms.TimePicker Rotation<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationProperty, value, selector);
    public static Xamarin.Forms.TimePicker RotationX(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationXProperty, value);
    public static Xamarin.Forms.TimePicker RotationX(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationXProperty, value, mode);
    public static Xamarin.Forms.TimePicker RotationX<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationXProperty, value, selector);
    public static Xamarin.Forms.TimePicker RotationY(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationYProperty, value);
    public static Xamarin.Forms.TimePicker RotationY(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationYProperty, value, mode);
    public static Xamarin.Forms.TimePicker RotationY<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.RotationYProperty, value, selector);
    public static Xamarin.Forms.TimePicker Scale(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.ScaleProperty, value);
    public static Xamarin.Forms.TimePicker Scale(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.ScaleProperty, value, mode);
    public static Xamarin.Forms.TimePicker Scale<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.ScaleProperty, value, selector);
    public static Xamarin.Forms.TimePicker IsVisible(this Xamarin.Forms.TimePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsVisibleProperty, value);
    public static Xamarin.Forms.TimePicker IsVisible(this Xamarin.Forms.TimePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.TimePicker IsVisible<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.TimePicker Opacity(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.OpacityProperty, value);
    public static Xamarin.Forms.TimePicker Opacity(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.OpacityProperty, value, mode);
    public static Xamarin.Forms.TimePicker Opacity<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.OpacityProperty, value, selector);
    public static Xamarin.Forms.TimePicker BackgroundColor(this Xamarin.Forms.TimePicker obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BackgroundColorProperty, value);
    public static Xamarin.Forms.TimePicker BackgroundColor(this Xamarin.Forms.TimePicker obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.TimePicker BackgroundColor<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.TimePicker Behaviors(this Xamarin.Forms.TimePicker obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BehaviorsProperty, value);
    public static Xamarin.Forms.TimePicker Behaviors(this Xamarin.Forms.TimePicker obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.TimePicker Behaviors<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.TimePicker Triggers(this Xamarin.Forms.TimePicker obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TriggersProperty, value);
    public static Xamarin.Forms.TimePicker Triggers(this Xamarin.Forms.TimePicker obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TriggersProperty, value, mode);
    public static Xamarin.Forms.TimePicker Triggers<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.TriggersProperty, value, selector);
    public static Xamarin.Forms.TimePicker Style(this Xamarin.Forms.TimePicker obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.StyleProperty, value);
    public static Xamarin.Forms.TimePicker Style(this Xamarin.Forms.TimePicker obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.StyleProperty, value, mode);
    public static Xamarin.Forms.TimePicker Style<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.StyleProperty, value, selector);
    public static Xamarin.Forms.TimePicker WidthRequest(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.WidthRequestProperty, value);
    public static Xamarin.Forms.TimePicker WidthRequest(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.TimePicker WidthRequest<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.TimePicker HeightRequest(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HeightRequestProperty, value);
    public static Xamarin.Forms.TimePicker HeightRequest(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.TimePicker HeightRequest<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.TimePicker MinimumWidthRequest(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.TimePicker MinimumWidthRequest(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.TimePicker MinimumWidthRequest<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.TimePicker MinimumHeightRequest(this Xamarin.Forms.TimePicker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.TimePicker MinimumHeightRequest(this Xamarin.Forms.TimePicker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.TimePicker MinimumHeightRequest<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.TimePicker IsFocused(this Xamarin.Forms.TimePicker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsFocusedProperty, value);
    public static Xamarin.Forms.TimePicker IsFocused(this Xamarin.Forms.TimePicker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.TimePicker IsFocused<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.TimePicker ClassId(this Xamarin.Forms.TimePicker obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.ClassIdProperty, value);
    public static Xamarin.Forms.TimePicker ClassId(this Xamarin.Forms.TimePicker obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.ClassIdProperty, value, mode);
    public static Xamarin.Forms.TimePicker ClassId<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.ClassIdProperty, value, selector);
    public static Xamarin.Forms.TimePicker BindingContext(this Xamarin.Forms.TimePicker obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BindingContextProperty, value);
    public static Xamarin.Forms.TimePicker BindingContext(this Xamarin.Forms.TimePicker obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TimePicker BindingContext<TFrom>(this Xamarin.Forms.TimePicker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TimePicker.BindingContextProperty, value, selector);
  }

  public static partial class WebViewExtensions {
    public static Xamarin.Forms.WebView Source(this Xamarin.Forms.WebView obj, Xamarin.Forms.WebViewSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.SourceProperty, value);
    public static Xamarin.Forms.WebView Source(this Xamarin.Forms.WebView obj, BindableValue<Xamarin.Forms.WebViewSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.SourceProperty, value, mode);
    public static Xamarin.Forms.WebView Source<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.WebViewSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.SourceProperty, value, selector);
    public static Xamarin.Forms.WebView CanGoBack(this Xamarin.Forms.WebView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.CanGoBackProperty, value);
    public static Xamarin.Forms.WebView CanGoBack(this Xamarin.Forms.WebView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.CanGoBackProperty, value, mode);
    public static Xamarin.Forms.WebView CanGoBack<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.CanGoBackProperty, value, selector);
    public static Xamarin.Forms.WebView CanGoForward(this Xamarin.Forms.WebView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.CanGoForwardProperty, value);
    public static Xamarin.Forms.WebView CanGoForward(this Xamarin.Forms.WebView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.CanGoForwardProperty, value, mode);
    public static Xamarin.Forms.WebView CanGoForward<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.CanGoForwardProperty, value, selector);
    public static Xamarin.Forms.WebView VerticalOptions(this Xamarin.Forms.WebView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.WebView VerticalOptions(this Xamarin.Forms.WebView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.WebView VerticalOptions<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.WebView HorizontalOptions(this Xamarin.Forms.WebView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.WebView HorizontalOptions(this Xamarin.Forms.WebView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.WebView HorizontalOptions<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.WebView Margin(this Xamarin.Forms.WebView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MarginProperty, value);
    public static Xamarin.Forms.WebView Margin(this Xamarin.Forms.WebView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MarginProperty, value, mode);
    public static Xamarin.Forms.WebView Margin<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MarginProperty, value, selector);
    public static Xamarin.Forms.WebView Navigation(this Xamarin.Forms.WebView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.NavigationProperty, value);
    public static Xamarin.Forms.WebView Navigation(this Xamarin.Forms.WebView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.NavigationProperty, value, mode);
    public static Xamarin.Forms.WebView Navigation<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.NavigationProperty, value, selector);
    public static Xamarin.Forms.WebView InputTransparent(this Xamarin.Forms.WebView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.InputTransparentProperty, value);
    public static Xamarin.Forms.WebView InputTransparent(this Xamarin.Forms.WebView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.WebView InputTransparent<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.WebView IsEnabled(this Xamarin.Forms.WebView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsEnabledProperty, value);
    public static Xamarin.Forms.WebView IsEnabled(this Xamarin.Forms.WebView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.WebView IsEnabled<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.WebView X(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.XProperty, value);
    public static Xamarin.Forms.WebView X(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.XProperty, value, mode);
    public static Xamarin.Forms.WebView X<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.XProperty, value, selector);
    public static Xamarin.Forms.WebView Y(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.YProperty, value);
    public static Xamarin.Forms.WebView Y(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.YProperty, value, mode);
    public static Xamarin.Forms.WebView Y<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.YProperty, value, selector);
    public static Xamarin.Forms.WebView AnchorX(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.AnchorXProperty, value);
    public static Xamarin.Forms.WebView AnchorX(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.WebView AnchorX<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.WebView AnchorY(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.AnchorYProperty, value);
    public static Xamarin.Forms.WebView AnchorY(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.WebView AnchorY<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.WebView TranslationX(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TranslationXProperty, value);
    public static Xamarin.Forms.WebView TranslationX(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.WebView TranslationX<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.WebView TranslationY(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TranslationYProperty, value);
    public static Xamarin.Forms.WebView TranslationY(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.WebView TranslationY<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.WebView Width(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.WidthProperty, value);
    public static Xamarin.Forms.WebView Width(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.WidthProperty, value, mode);
    public static Xamarin.Forms.WebView Width<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.WidthProperty, value, selector);
    public static Xamarin.Forms.WebView Height(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HeightProperty, value);
    public static Xamarin.Forms.WebView Height(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HeightProperty, value, mode);
    public static Xamarin.Forms.WebView Height<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HeightProperty, value, selector);
    public static Xamarin.Forms.WebView Rotation(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationProperty, value);
    public static Xamarin.Forms.WebView Rotation(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationProperty, value, mode);
    public static Xamarin.Forms.WebView Rotation<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationProperty, value, selector);
    public static Xamarin.Forms.WebView RotationX(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationXProperty, value);
    public static Xamarin.Forms.WebView RotationX(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationXProperty, value, mode);
    public static Xamarin.Forms.WebView RotationX<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationXProperty, value, selector);
    public static Xamarin.Forms.WebView RotationY(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationYProperty, value);
    public static Xamarin.Forms.WebView RotationY(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationYProperty, value, mode);
    public static Xamarin.Forms.WebView RotationY<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.RotationYProperty, value, selector);
    public static Xamarin.Forms.WebView Scale(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.ScaleProperty, value);
    public static Xamarin.Forms.WebView Scale(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.ScaleProperty, value, mode);
    public static Xamarin.Forms.WebView Scale<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.ScaleProperty, value, selector);
    public static Xamarin.Forms.WebView IsVisible(this Xamarin.Forms.WebView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsVisibleProperty, value);
    public static Xamarin.Forms.WebView IsVisible(this Xamarin.Forms.WebView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.WebView IsVisible<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.WebView Opacity(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.OpacityProperty, value);
    public static Xamarin.Forms.WebView Opacity(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.OpacityProperty, value, mode);
    public static Xamarin.Forms.WebView Opacity<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.OpacityProperty, value, selector);
    public static Xamarin.Forms.WebView BackgroundColor(this Xamarin.Forms.WebView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BackgroundColorProperty, value);
    public static Xamarin.Forms.WebView BackgroundColor(this Xamarin.Forms.WebView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.WebView BackgroundColor<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.WebView Behaviors(this Xamarin.Forms.WebView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BehaviorsProperty, value);
    public static Xamarin.Forms.WebView Behaviors(this Xamarin.Forms.WebView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.WebView Behaviors<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.WebView Triggers(this Xamarin.Forms.WebView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TriggersProperty, value);
    public static Xamarin.Forms.WebView Triggers(this Xamarin.Forms.WebView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TriggersProperty, value, mode);
    public static Xamarin.Forms.WebView Triggers<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.TriggersProperty, value, selector);
    public static Xamarin.Forms.WebView Style(this Xamarin.Forms.WebView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.StyleProperty, value);
    public static Xamarin.Forms.WebView Style(this Xamarin.Forms.WebView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.StyleProperty, value, mode);
    public static Xamarin.Forms.WebView Style<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.StyleProperty, value, selector);
    public static Xamarin.Forms.WebView WidthRequest(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.WidthRequestProperty, value);
    public static Xamarin.Forms.WebView WidthRequest(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.WebView WidthRequest<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.WebView HeightRequest(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HeightRequestProperty, value);
    public static Xamarin.Forms.WebView HeightRequest(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.WebView HeightRequest<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.WebView MinimumWidthRequest(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.WebView MinimumWidthRequest(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.WebView MinimumWidthRequest<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.WebView MinimumHeightRequest(this Xamarin.Forms.WebView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.WebView MinimumHeightRequest(this Xamarin.Forms.WebView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.WebView MinimumHeightRequest<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.WebView IsFocused(this Xamarin.Forms.WebView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsFocusedProperty, value);
    public static Xamarin.Forms.WebView IsFocused(this Xamarin.Forms.WebView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.WebView IsFocused<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.WebView ClassId(this Xamarin.Forms.WebView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.ClassIdProperty, value);
    public static Xamarin.Forms.WebView ClassId(this Xamarin.Forms.WebView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.WebView ClassId<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.WebView BindingContext(this Xamarin.Forms.WebView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BindingContextProperty, value);
    public static Xamarin.Forms.WebView BindingContext(this Xamarin.Forms.WebView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.WebView BindingContext<TFrom>(this Xamarin.Forms.WebView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.WebView.BindingContextProperty, value, selector);
  }

  public static partial class PickerExtensions {
    public static Xamarin.Forms.Picker TextColor(this Xamarin.Forms.Picker obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TextColorProperty, value);
    public static Xamarin.Forms.Picker TextColor(this Xamarin.Forms.Picker obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TextColorProperty, value, mode);
    public static Xamarin.Forms.Picker TextColor<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TextColorProperty, value, selector);
    public static Xamarin.Forms.Picker Title(this Xamarin.Forms.Picker obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TitleProperty, value);
    public static Xamarin.Forms.Picker Title(this Xamarin.Forms.Picker obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TitleProperty, value, mode);
    public static Xamarin.Forms.Picker Title<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TitleProperty, value, selector);
    public static Xamarin.Forms.Picker SelectedIndex(this Xamarin.Forms.Picker obj, System.Int32 value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.SelectedIndexProperty, value);
    public static Xamarin.Forms.Picker SelectedIndex(this Xamarin.Forms.Picker obj, BindableValue<System.Int32> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.SelectedIndexProperty, value, mode);
    public static Xamarin.Forms.Picker SelectedIndex<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Int32> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.SelectedIndexProperty, value, selector);
    public static Xamarin.Forms.Picker ItemsSource(this Xamarin.Forms.Picker obj, System.Collections.IList value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ItemsSourceProperty, value);
    public static Xamarin.Forms.Picker ItemsSource(this Xamarin.Forms.Picker obj, BindableValue<System.Collections.IList> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ItemsSourceProperty, value, mode);
    public static Xamarin.Forms.Picker ItemsSource<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.IList> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ItemsSourceProperty, value, selector);
    public static Xamarin.Forms.Picker SelectedItem(this Xamarin.Forms.Picker obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.SelectedItemProperty, value);
    public static Xamarin.Forms.Picker SelectedItem(this Xamarin.Forms.Picker obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.SelectedItemProperty, value, mode);
    public static Xamarin.Forms.Picker SelectedItem<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.SelectedItemProperty, value, selector);
    public static Xamarin.Forms.Picker VerticalOptions(this Xamarin.Forms.Picker obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Picker VerticalOptions(this Xamarin.Forms.Picker obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Picker VerticalOptions<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Picker HorizontalOptions(this Xamarin.Forms.Picker obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Picker HorizontalOptions(this Xamarin.Forms.Picker obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Picker HorizontalOptions<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Picker Margin(this Xamarin.Forms.Picker obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MarginProperty, value);
    public static Xamarin.Forms.Picker Margin(this Xamarin.Forms.Picker obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MarginProperty, value, mode);
    public static Xamarin.Forms.Picker Margin<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MarginProperty, value, selector);
    public static Xamarin.Forms.Picker Navigation(this Xamarin.Forms.Picker obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.NavigationProperty, value);
    public static Xamarin.Forms.Picker Navigation(this Xamarin.Forms.Picker obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.NavigationProperty, value, mode);
    public static Xamarin.Forms.Picker Navigation<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.NavigationProperty, value, selector);
    public static Xamarin.Forms.Picker InputTransparent(this Xamarin.Forms.Picker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.InputTransparentProperty, value);
    public static Xamarin.Forms.Picker InputTransparent(this Xamarin.Forms.Picker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Picker InputTransparent<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Picker IsEnabled(this Xamarin.Forms.Picker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsEnabledProperty, value);
    public static Xamarin.Forms.Picker IsEnabled(this Xamarin.Forms.Picker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Picker IsEnabled<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Picker X(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.XProperty, value);
    public static Xamarin.Forms.Picker X(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.XProperty, value, mode);
    public static Xamarin.Forms.Picker X<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.XProperty, value, selector);
    public static Xamarin.Forms.Picker Y(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.YProperty, value);
    public static Xamarin.Forms.Picker Y(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.YProperty, value, mode);
    public static Xamarin.Forms.Picker Y<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.YProperty, value, selector);
    public static Xamarin.Forms.Picker AnchorX(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.AnchorXProperty, value);
    public static Xamarin.Forms.Picker AnchorX(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Picker AnchorX<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Picker AnchorY(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.AnchorYProperty, value);
    public static Xamarin.Forms.Picker AnchorY(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Picker AnchorY<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Picker TranslationX(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TranslationXProperty, value);
    public static Xamarin.Forms.Picker TranslationX(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Picker TranslationX<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Picker TranslationY(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TranslationYProperty, value);
    public static Xamarin.Forms.Picker TranslationY(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Picker TranslationY<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Picker Width(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.WidthProperty, value);
    public static Xamarin.Forms.Picker Width(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.WidthProperty, value, mode);
    public static Xamarin.Forms.Picker Width<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.WidthProperty, value, selector);
    public static Xamarin.Forms.Picker Height(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HeightProperty, value);
    public static Xamarin.Forms.Picker Height(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HeightProperty, value, mode);
    public static Xamarin.Forms.Picker Height<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HeightProperty, value, selector);
    public static Xamarin.Forms.Picker Rotation(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationProperty, value);
    public static Xamarin.Forms.Picker Rotation(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationProperty, value, mode);
    public static Xamarin.Forms.Picker Rotation<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationProperty, value, selector);
    public static Xamarin.Forms.Picker RotationX(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationXProperty, value);
    public static Xamarin.Forms.Picker RotationX(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationXProperty, value, mode);
    public static Xamarin.Forms.Picker RotationX<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationXProperty, value, selector);
    public static Xamarin.Forms.Picker RotationY(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationYProperty, value);
    public static Xamarin.Forms.Picker RotationY(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationYProperty, value, mode);
    public static Xamarin.Forms.Picker RotationY<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.RotationYProperty, value, selector);
    public static Xamarin.Forms.Picker Scale(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ScaleProperty, value);
    public static Xamarin.Forms.Picker Scale(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ScaleProperty, value, mode);
    public static Xamarin.Forms.Picker Scale<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ScaleProperty, value, selector);
    public static Xamarin.Forms.Picker IsVisible(this Xamarin.Forms.Picker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsVisibleProperty, value);
    public static Xamarin.Forms.Picker IsVisible(this Xamarin.Forms.Picker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Picker IsVisible<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Picker Opacity(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.OpacityProperty, value);
    public static Xamarin.Forms.Picker Opacity(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.OpacityProperty, value, mode);
    public static Xamarin.Forms.Picker Opacity<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.OpacityProperty, value, selector);
    public static Xamarin.Forms.Picker BackgroundColor(this Xamarin.Forms.Picker obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BackgroundColorProperty, value);
    public static Xamarin.Forms.Picker BackgroundColor(this Xamarin.Forms.Picker obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Picker BackgroundColor<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Picker Behaviors(this Xamarin.Forms.Picker obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BehaviorsProperty, value);
    public static Xamarin.Forms.Picker Behaviors(this Xamarin.Forms.Picker obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Picker Behaviors<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Picker Triggers(this Xamarin.Forms.Picker obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TriggersProperty, value);
    public static Xamarin.Forms.Picker Triggers(this Xamarin.Forms.Picker obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TriggersProperty, value, mode);
    public static Xamarin.Forms.Picker Triggers<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.TriggersProperty, value, selector);
    public static Xamarin.Forms.Picker Style(this Xamarin.Forms.Picker obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.StyleProperty, value);
    public static Xamarin.Forms.Picker Style(this Xamarin.Forms.Picker obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.StyleProperty, value, mode);
    public static Xamarin.Forms.Picker Style<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.StyleProperty, value, selector);
    public static Xamarin.Forms.Picker WidthRequest(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.WidthRequestProperty, value);
    public static Xamarin.Forms.Picker WidthRequest(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Picker WidthRequest<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Picker HeightRequest(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HeightRequestProperty, value);
    public static Xamarin.Forms.Picker HeightRequest(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Picker HeightRequest<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Picker MinimumWidthRequest(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Picker MinimumWidthRequest(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Picker MinimumWidthRequest<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Picker MinimumHeightRequest(this Xamarin.Forms.Picker obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Picker MinimumHeightRequest(this Xamarin.Forms.Picker obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Picker MinimumHeightRequest<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Picker IsFocused(this Xamarin.Forms.Picker obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsFocusedProperty, value);
    public static Xamarin.Forms.Picker IsFocused(this Xamarin.Forms.Picker obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Picker IsFocused<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Picker ClassId(this Xamarin.Forms.Picker obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ClassIdProperty, value);
    public static Xamarin.Forms.Picker ClassId(this Xamarin.Forms.Picker obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Picker ClassId<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Picker BindingContext(this Xamarin.Forms.Picker obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BindingContextProperty, value);
    public static Xamarin.Forms.Picker BindingContext(this Xamarin.Forms.Picker obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Picker BindingContext<TFrom>(this Xamarin.Forms.Picker obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Picker.BindingContextProperty, value, selector);
  }

  public static partial class NavigationMenuExtensions {
    public static Xamarin.Forms.Internals.NavigationMenu VerticalOptions(this Xamarin.Forms.Internals.NavigationMenu obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu VerticalOptions(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu VerticalOptions<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu HorizontalOptions(this Xamarin.Forms.Internals.NavigationMenu obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu HorizontalOptions(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu HorizontalOptions<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Margin(this Xamarin.Forms.Internals.NavigationMenu obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MarginProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Margin(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MarginProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Margin<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MarginProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Navigation(this Xamarin.Forms.Internals.NavigationMenu obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.NavigationProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Navigation(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.NavigationProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Navigation<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.NavigationProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu InputTransparent(this Xamarin.Forms.Internals.NavigationMenu obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.InputTransparentProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu InputTransparent(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu InputTransparent<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu IsEnabled(this Xamarin.Forms.Internals.NavigationMenu obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsEnabledProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu IsEnabled(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu IsEnabled<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu X(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.XProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu X(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.XProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu X<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.XProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Y(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.YProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Y(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.YProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Y<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.YProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu AnchorX(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.AnchorXProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu AnchorX(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu AnchorX<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu AnchorY(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.AnchorYProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu AnchorY(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu AnchorY<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu TranslationX(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TranslationXProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu TranslationX(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu TranslationX<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu TranslationY(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TranslationYProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu TranslationY(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu TranslationY<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Width(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.WidthProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Width(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.WidthProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Width<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.WidthProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Height(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HeightProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Height(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HeightProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Height<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HeightProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Rotation(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Rotation(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Rotation<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu RotationX(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationXProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu RotationX(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationXProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu RotationX<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationXProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu RotationY(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationYProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu RotationY(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationYProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu RotationY<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.RotationYProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Scale(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.ScaleProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Scale(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.ScaleProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Scale<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.ScaleProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu IsVisible(this Xamarin.Forms.Internals.NavigationMenu obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsVisibleProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu IsVisible(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu IsVisible<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Opacity(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.OpacityProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Opacity(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.OpacityProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Opacity<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.OpacityProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu BackgroundColor(this Xamarin.Forms.Internals.NavigationMenu obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BackgroundColorProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu BackgroundColor(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu BackgroundColor<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Behaviors(this Xamarin.Forms.Internals.NavigationMenu obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BehaviorsProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Behaviors(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Behaviors<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Triggers(this Xamarin.Forms.Internals.NavigationMenu obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TriggersProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Triggers(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TriggersProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Triggers<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.TriggersProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu Style(this Xamarin.Forms.Internals.NavigationMenu obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.StyleProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu Style(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.StyleProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu Style<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.StyleProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu WidthRequest(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.WidthRequestProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu WidthRequest(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu WidthRequest<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu HeightRequest(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HeightRequestProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu HeightRequest(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu HeightRequest<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu MinimumWidthRequest(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu MinimumWidthRequest(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu MinimumWidthRequest<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu MinimumHeightRequest(this Xamarin.Forms.Internals.NavigationMenu obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu MinimumHeightRequest(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu MinimumHeightRequest<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu IsFocused(this Xamarin.Forms.Internals.NavigationMenu obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsFocusedProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu IsFocused(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu IsFocused<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu ClassId(this Xamarin.Forms.Internals.NavigationMenu obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.ClassIdProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu ClassId(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu ClassId<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Internals.NavigationMenu BindingContext(this Xamarin.Forms.Internals.NavigationMenu obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BindingContextProperty, value);
    public static Xamarin.Forms.Internals.NavigationMenu BindingContext(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Internals.NavigationMenu BindingContext<TFrom>(this Xamarin.Forms.Internals.NavigationMenu obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Internals.NavigationMenu.BindingContextProperty, value, selector);
  }

  public static partial class ContentPresenterExtensions {
    public static Xamarin.Forms.ContentPresenter Content(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.View value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ContentProperty, value);
    public static Xamarin.Forms.ContentPresenter Content(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.View> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ContentProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Content<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.View> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ContentProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter IsClippedToBounds(this Xamarin.Forms.ContentPresenter obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.ContentPresenter IsClippedToBounds(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter IsClippedToBounds<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Padding(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.PaddingProperty, value);
    public static Xamarin.Forms.ContentPresenter Padding(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.PaddingProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Padding<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.PaddingProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter VerticalOptions(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.VerticalOptionsProperty, value);
    public static Xamarin.Forms.ContentPresenter VerticalOptions(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter VerticalOptions<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter HorizontalOptions(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.ContentPresenter HorizontalOptions(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter HorizontalOptions<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Margin(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MarginProperty, value);
    public static Xamarin.Forms.ContentPresenter Margin(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MarginProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Margin<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MarginProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Navigation(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.NavigationProperty, value);
    public static Xamarin.Forms.ContentPresenter Navigation(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.NavigationProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Navigation<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.NavigationProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter InputTransparent(this Xamarin.Forms.ContentPresenter obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.InputTransparentProperty, value);
    public static Xamarin.Forms.ContentPresenter InputTransparent(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter InputTransparent<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter IsEnabled(this Xamarin.Forms.ContentPresenter obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsEnabledProperty, value);
    public static Xamarin.Forms.ContentPresenter IsEnabled(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter IsEnabled<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter X(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.XProperty, value);
    public static Xamarin.Forms.ContentPresenter X(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.XProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter X<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.XProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Y(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.YProperty, value);
    public static Xamarin.Forms.ContentPresenter Y(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.YProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Y<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.YProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter AnchorX(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.AnchorXProperty, value);
    public static Xamarin.Forms.ContentPresenter AnchorX(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.AnchorXProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter AnchorX<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.AnchorXProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter AnchorY(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.AnchorYProperty, value);
    public static Xamarin.Forms.ContentPresenter AnchorY(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.AnchorYProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter AnchorY<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.AnchorYProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter TranslationX(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TranslationXProperty, value);
    public static Xamarin.Forms.ContentPresenter TranslationX(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TranslationXProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter TranslationX<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TranslationXProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter TranslationY(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TranslationYProperty, value);
    public static Xamarin.Forms.ContentPresenter TranslationY(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TranslationYProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter TranslationY<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TranslationYProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Width(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.WidthProperty, value);
    public static Xamarin.Forms.ContentPresenter Width(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.WidthProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Width<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.WidthProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Height(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HeightProperty, value);
    public static Xamarin.Forms.ContentPresenter Height(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HeightProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Height<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HeightProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Rotation(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationProperty, value);
    public static Xamarin.Forms.ContentPresenter Rotation(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Rotation<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter RotationX(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationXProperty, value);
    public static Xamarin.Forms.ContentPresenter RotationX(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationXProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter RotationX<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationXProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter RotationY(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationYProperty, value);
    public static Xamarin.Forms.ContentPresenter RotationY(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationYProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter RotationY<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.RotationYProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Scale(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ScaleProperty, value);
    public static Xamarin.Forms.ContentPresenter Scale(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ScaleProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Scale<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ScaleProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter IsVisible(this Xamarin.Forms.ContentPresenter obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsVisibleProperty, value);
    public static Xamarin.Forms.ContentPresenter IsVisible(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter IsVisible<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Opacity(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.OpacityProperty, value);
    public static Xamarin.Forms.ContentPresenter Opacity(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.OpacityProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Opacity<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.OpacityProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter BackgroundColor(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BackgroundColorProperty, value);
    public static Xamarin.Forms.ContentPresenter BackgroundColor(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter BackgroundColor<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Behaviors(this Xamarin.Forms.ContentPresenter obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BehaviorsProperty, value);
    public static Xamarin.Forms.ContentPresenter Behaviors(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Behaviors<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Triggers(this Xamarin.Forms.ContentPresenter obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TriggersProperty, value);
    public static Xamarin.Forms.ContentPresenter Triggers(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TriggersProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Triggers<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.TriggersProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter Style(this Xamarin.Forms.ContentPresenter obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.StyleProperty, value);
    public static Xamarin.Forms.ContentPresenter Style(this Xamarin.Forms.ContentPresenter obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.StyleProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter Style<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.StyleProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter WidthRequest(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.WidthRequestProperty, value);
    public static Xamarin.Forms.ContentPresenter WidthRequest(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter WidthRequest<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter HeightRequest(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HeightRequestProperty, value);
    public static Xamarin.Forms.ContentPresenter HeightRequest(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter HeightRequest<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter MinimumWidthRequest(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.ContentPresenter MinimumWidthRequest(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter MinimumWidthRequest<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter MinimumHeightRequest(this Xamarin.Forms.ContentPresenter obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.ContentPresenter MinimumHeightRequest(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter MinimumHeightRequest<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter IsFocused(this Xamarin.Forms.ContentPresenter obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsFocusedProperty, value);
    public static Xamarin.Forms.ContentPresenter IsFocused(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter IsFocused<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter ClassId(this Xamarin.Forms.ContentPresenter obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ClassIdProperty, value);
    public static Xamarin.Forms.ContentPresenter ClassId(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter ClassId<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ContentPresenter BindingContext(this Xamarin.Forms.ContentPresenter obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BindingContextProperty, value);
    public static Xamarin.Forms.ContentPresenter BindingContext(this Xamarin.Forms.ContentPresenter obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ContentPresenter BindingContext<TFrom>(this Xamarin.Forms.ContentPresenter obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPresenter.BindingContextProperty, value, selector);
  }

  public static partial class TemplatedViewExtensions {
    public static Xamarin.Forms.TemplatedView ControlTemplate(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.ControlTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ControlTemplateProperty, value);
    public static Xamarin.Forms.TemplatedView ControlTemplate(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.ControlTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ControlTemplateProperty, value, mode);
    public static Xamarin.Forms.TemplatedView ControlTemplate<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ControlTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ControlTemplateProperty, value, selector);
    public static Xamarin.Forms.TemplatedView IsClippedToBounds(this Xamarin.Forms.TemplatedView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.TemplatedView IsClippedToBounds(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.TemplatedView IsClippedToBounds<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Padding(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.PaddingProperty, value);
    public static Xamarin.Forms.TemplatedView Padding(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.PaddingProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Padding<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.PaddingProperty, value, selector);
    public static Xamarin.Forms.TemplatedView VerticalOptions(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.TemplatedView VerticalOptions(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.TemplatedView VerticalOptions<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.TemplatedView HorizontalOptions(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.TemplatedView HorizontalOptions(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.TemplatedView HorizontalOptions<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Margin(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MarginProperty, value);
    public static Xamarin.Forms.TemplatedView Margin(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MarginProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Margin<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MarginProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Navigation(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.NavigationProperty, value);
    public static Xamarin.Forms.TemplatedView Navigation(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.NavigationProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Navigation<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.NavigationProperty, value, selector);
    public static Xamarin.Forms.TemplatedView InputTransparent(this Xamarin.Forms.TemplatedView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.InputTransparentProperty, value);
    public static Xamarin.Forms.TemplatedView InputTransparent(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.TemplatedView InputTransparent<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.TemplatedView IsEnabled(this Xamarin.Forms.TemplatedView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsEnabledProperty, value);
    public static Xamarin.Forms.TemplatedView IsEnabled(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.TemplatedView IsEnabled<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.TemplatedView X(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.XProperty, value);
    public static Xamarin.Forms.TemplatedView X(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.XProperty, value, mode);
    public static Xamarin.Forms.TemplatedView X<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.XProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Y(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.YProperty, value);
    public static Xamarin.Forms.TemplatedView Y(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.YProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Y<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.YProperty, value, selector);
    public static Xamarin.Forms.TemplatedView AnchorX(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.AnchorXProperty, value);
    public static Xamarin.Forms.TemplatedView AnchorX(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.TemplatedView AnchorX<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.TemplatedView AnchorY(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.AnchorYProperty, value);
    public static Xamarin.Forms.TemplatedView AnchorY(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.TemplatedView AnchorY<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.TemplatedView TranslationX(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TranslationXProperty, value);
    public static Xamarin.Forms.TemplatedView TranslationX(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.TemplatedView TranslationX<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.TemplatedView TranslationY(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TranslationYProperty, value);
    public static Xamarin.Forms.TemplatedView TranslationY(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.TemplatedView TranslationY<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Width(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.WidthProperty, value);
    public static Xamarin.Forms.TemplatedView Width(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.WidthProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Width<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.WidthProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Height(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HeightProperty, value);
    public static Xamarin.Forms.TemplatedView Height(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HeightProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Height<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HeightProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Rotation(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationProperty, value);
    public static Xamarin.Forms.TemplatedView Rotation(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Rotation<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationProperty, value, selector);
    public static Xamarin.Forms.TemplatedView RotationX(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationXProperty, value);
    public static Xamarin.Forms.TemplatedView RotationX(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationXProperty, value, mode);
    public static Xamarin.Forms.TemplatedView RotationX<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationXProperty, value, selector);
    public static Xamarin.Forms.TemplatedView RotationY(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationYProperty, value);
    public static Xamarin.Forms.TemplatedView RotationY(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationYProperty, value, mode);
    public static Xamarin.Forms.TemplatedView RotationY<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.RotationYProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Scale(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ScaleProperty, value);
    public static Xamarin.Forms.TemplatedView Scale(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ScaleProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Scale<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ScaleProperty, value, selector);
    public static Xamarin.Forms.TemplatedView IsVisible(this Xamarin.Forms.TemplatedView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsVisibleProperty, value);
    public static Xamarin.Forms.TemplatedView IsVisible(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.TemplatedView IsVisible<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Opacity(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.OpacityProperty, value);
    public static Xamarin.Forms.TemplatedView Opacity(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.OpacityProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Opacity<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.OpacityProperty, value, selector);
    public static Xamarin.Forms.TemplatedView BackgroundColor(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BackgroundColorProperty, value);
    public static Xamarin.Forms.TemplatedView BackgroundColor(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.TemplatedView BackgroundColor<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Behaviors(this Xamarin.Forms.TemplatedView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BehaviorsProperty, value);
    public static Xamarin.Forms.TemplatedView Behaviors(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Behaviors<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Triggers(this Xamarin.Forms.TemplatedView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TriggersProperty, value);
    public static Xamarin.Forms.TemplatedView Triggers(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TriggersProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Triggers<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.TriggersProperty, value, selector);
    public static Xamarin.Forms.TemplatedView Style(this Xamarin.Forms.TemplatedView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.StyleProperty, value);
    public static Xamarin.Forms.TemplatedView Style(this Xamarin.Forms.TemplatedView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.StyleProperty, value, mode);
    public static Xamarin.Forms.TemplatedView Style<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.StyleProperty, value, selector);
    public static Xamarin.Forms.TemplatedView WidthRequest(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.WidthRequestProperty, value);
    public static Xamarin.Forms.TemplatedView WidthRequest(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedView WidthRequest<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedView HeightRequest(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HeightRequestProperty, value);
    public static Xamarin.Forms.TemplatedView HeightRequest(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedView HeightRequest<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedView MinimumWidthRequest(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.TemplatedView MinimumWidthRequest(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedView MinimumWidthRequest<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedView MinimumHeightRequest(this Xamarin.Forms.TemplatedView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.TemplatedView MinimumHeightRequest(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.TemplatedView MinimumHeightRequest<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.TemplatedView IsFocused(this Xamarin.Forms.TemplatedView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsFocusedProperty, value);
    public static Xamarin.Forms.TemplatedView IsFocused(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.TemplatedView IsFocused<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.TemplatedView ClassId(this Xamarin.Forms.TemplatedView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ClassIdProperty, value);
    public static Xamarin.Forms.TemplatedView ClassId(this Xamarin.Forms.TemplatedView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.TemplatedView ClassId<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.TemplatedView BindingContext(this Xamarin.Forms.TemplatedView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BindingContextProperty, value);
    public static Xamarin.Forms.TemplatedView BindingContext(this Xamarin.Forms.TemplatedView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TemplatedView BindingContext<TFrom>(this Xamarin.Forms.TemplatedView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TemplatedView.BindingContextProperty, value, selector);
  }

  public static partial class CarouselPageExtensions {
    public static Xamarin.Forms.CarouselPage ItemsSource(this Xamarin.Forms.CarouselPage obj, System.Collections.IEnumerable value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ItemsSourceProperty, value);
    public static Xamarin.Forms.CarouselPage ItemsSource(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Collections.IEnumerable> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ItemsSourceProperty, value, mode);
    public static Xamarin.Forms.CarouselPage ItemsSource<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.IEnumerable> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ItemsSourceProperty, value, selector);
    public static Xamarin.Forms.CarouselPage ItemTemplate(this Xamarin.Forms.CarouselPage obj, Xamarin.Forms.DataTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ItemTemplateProperty, value);
    public static Xamarin.Forms.CarouselPage ItemTemplate(this Xamarin.Forms.CarouselPage obj, BindableValue<Xamarin.Forms.DataTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ItemTemplateProperty, value, mode);
    public static Xamarin.Forms.CarouselPage ItemTemplate<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.DataTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ItemTemplateProperty, value, selector);
    public static Xamarin.Forms.CarouselPage SelectedItem(this Xamarin.Forms.CarouselPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.SelectedItemProperty, value);
    public static Xamarin.Forms.CarouselPage SelectedItem(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.SelectedItemProperty, value, mode);
    public static Xamarin.Forms.CarouselPage SelectedItem<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.SelectedItemProperty, value, selector);
    public static Xamarin.Forms.CarouselPage BackgroundImage(this Xamarin.Forms.CarouselPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BackgroundImageProperty, value);
    public static Xamarin.Forms.CarouselPage BackgroundImage(this Xamarin.Forms.CarouselPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BackgroundImageProperty, value, mode);
    public static Xamarin.Forms.CarouselPage BackgroundImage<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BackgroundImageProperty, value, selector);
    public static Xamarin.Forms.CarouselPage IsBusy(this Xamarin.Forms.CarouselPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsBusyProperty, value);
    public static Xamarin.Forms.CarouselPage IsBusy(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsBusyProperty, value, mode);
    public static Xamarin.Forms.CarouselPage IsBusy<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsBusyProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Padding(this Xamarin.Forms.CarouselPage obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.PaddingProperty, value);
    public static Xamarin.Forms.CarouselPage Padding(this Xamarin.Forms.CarouselPage obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.PaddingProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Padding<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.PaddingProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Title(this Xamarin.Forms.CarouselPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TitleProperty, value);
    public static Xamarin.Forms.CarouselPage Title(this Xamarin.Forms.CarouselPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TitleProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Title<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TitleProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Icon(this Xamarin.Forms.CarouselPage obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IconProperty, value);
    public static Xamarin.Forms.CarouselPage Icon(this Xamarin.Forms.CarouselPage obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IconProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Icon<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IconProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Navigation(this Xamarin.Forms.CarouselPage obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.NavigationProperty, value);
    public static Xamarin.Forms.CarouselPage Navigation(this Xamarin.Forms.CarouselPage obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.NavigationProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Navigation<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.NavigationProperty, value, selector);
    public static Xamarin.Forms.CarouselPage InputTransparent(this Xamarin.Forms.CarouselPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.InputTransparentProperty, value);
    public static Xamarin.Forms.CarouselPage InputTransparent(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.CarouselPage InputTransparent<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.CarouselPage IsEnabled(this Xamarin.Forms.CarouselPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsEnabledProperty, value);
    public static Xamarin.Forms.CarouselPage IsEnabled(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.CarouselPage IsEnabled<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.CarouselPage X(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.XProperty, value);
    public static Xamarin.Forms.CarouselPage X(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.XProperty, value, mode);
    public static Xamarin.Forms.CarouselPage X<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.XProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Y(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.YProperty, value);
    public static Xamarin.Forms.CarouselPage Y(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.YProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Y<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.YProperty, value, selector);
    public static Xamarin.Forms.CarouselPage AnchorX(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.AnchorXProperty, value);
    public static Xamarin.Forms.CarouselPage AnchorX(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.AnchorXProperty, value, mode);
    public static Xamarin.Forms.CarouselPage AnchorX<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.AnchorXProperty, value, selector);
    public static Xamarin.Forms.CarouselPage AnchorY(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.AnchorYProperty, value);
    public static Xamarin.Forms.CarouselPage AnchorY(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.AnchorYProperty, value, mode);
    public static Xamarin.Forms.CarouselPage AnchorY<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.AnchorYProperty, value, selector);
    public static Xamarin.Forms.CarouselPage TranslationX(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TranslationXProperty, value);
    public static Xamarin.Forms.CarouselPage TranslationX(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TranslationXProperty, value, mode);
    public static Xamarin.Forms.CarouselPage TranslationX<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TranslationXProperty, value, selector);
    public static Xamarin.Forms.CarouselPage TranslationY(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TranslationYProperty, value);
    public static Xamarin.Forms.CarouselPage TranslationY(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TranslationYProperty, value, mode);
    public static Xamarin.Forms.CarouselPage TranslationY<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TranslationYProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Width(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.WidthProperty, value);
    public static Xamarin.Forms.CarouselPage Width(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.WidthProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Width<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.WidthProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Height(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.HeightProperty, value);
    public static Xamarin.Forms.CarouselPage Height(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.HeightProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Height<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.HeightProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Rotation(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationProperty, value);
    public static Xamarin.Forms.CarouselPage Rotation(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Rotation<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationProperty, value, selector);
    public static Xamarin.Forms.CarouselPage RotationX(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationXProperty, value);
    public static Xamarin.Forms.CarouselPage RotationX(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationXProperty, value, mode);
    public static Xamarin.Forms.CarouselPage RotationX<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationXProperty, value, selector);
    public static Xamarin.Forms.CarouselPage RotationY(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationYProperty, value);
    public static Xamarin.Forms.CarouselPage RotationY(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationYProperty, value, mode);
    public static Xamarin.Forms.CarouselPage RotationY<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.RotationYProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Scale(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ScaleProperty, value);
    public static Xamarin.Forms.CarouselPage Scale(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ScaleProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Scale<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ScaleProperty, value, selector);
    public static Xamarin.Forms.CarouselPage IsVisible(this Xamarin.Forms.CarouselPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsVisibleProperty, value);
    public static Xamarin.Forms.CarouselPage IsVisible(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.CarouselPage IsVisible<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Opacity(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.OpacityProperty, value);
    public static Xamarin.Forms.CarouselPage Opacity(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.OpacityProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Opacity<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.OpacityProperty, value, selector);
    public static Xamarin.Forms.CarouselPage BackgroundColor(this Xamarin.Forms.CarouselPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BackgroundColorProperty, value);
    public static Xamarin.Forms.CarouselPage BackgroundColor(this Xamarin.Forms.CarouselPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.CarouselPage BackgroundColor<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Behaviors(this Xamarin.Forms.CarouselPage obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BehaviorsProperty, value);
    public static Xamarin.Forms.CarouselPage Behaviors(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Behaviors<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Triggers(this Xamarin.Forms.CarouselPage obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TriggersProperty, value);
    public static Xamarin.Forms.CarouselPage Triggers(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TriggersProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Triggers<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.TriggersProperty, value, selector);
    public static Xamarin.Forms.CarouselPage Style(this Xamarin.Forms.CarouselPage obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.StyleProperty, value);
    public static Xamarin.Forms.CarouselPage Style(this Xamarin.Forms.CarouselPage obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.StyleProperty, value, mode);
    public static Xamarin.Forms.CarouselPage Style<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.StyleProperty, value, selector);
    public static Xamarin.Forms.CarouselPage WidthRequest(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.WidthRequestProperty, value);
    public static Xamarin.Forms.CarouselPage WidthRequest(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.CarouselPage WidthRequest<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.CarouselPage HeightRequest(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.HeightRequestProperty, value);
    public static Xamarin.Forms.CarouselPage HeightRequest(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.CarouselPage HeightRequest<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.CarouselPage MinimumWidthRequest(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.CarouselPage MinimumWidthRequest(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.CarouselPage MinimumWidthRequest<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.CarouselPage MinimumHeightRequest(this Xamarin.Forms.CarouselPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.CarouselPage MinimumHeightRequest(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.CarouselPage MinimumHeightRequest<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.CarouselPage IsFocused(this Xamarin.Forms.CarouselPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsFocusedProperty, value);
    public static Xamarin.Forms.CarouselPage IsFocused(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.CarouselPage IsFocused<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.CarouselPage ClassId(this Xamarin.Forms.CarouselPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ClassIdProperty, value);
    public static Xamarin.Forms.CarouselPage ClassId(this Xamarin.Forms.CarouselPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ClassIdProperty, value, mode);
    public static Xamarin.Forms.CarouselPage ClassId<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.ClassIdProperty, value, selector);
    public static Xamarin.Forms.CarouselPage BindingContext(this Xamarin.Forms.CarouselPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BindingContextProperty, value);
    public static Xamarin.Forms.CarouselPage BindingContext(this Xamarin.Forms.CarouselPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BindingContextProperty, value, mode);
    public static Xamarin.Forms.CarouselPage BindingContext<TFrom>(this Xamarin.Forms.CarouselPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.CarouselPage.BindingContextProperty, value, selector);
  }

  public static partial class ListViewExtensions {
    public static Xamarin.Forms.ListView IsPullToRefreshEnabled(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsPullToRefreshEnabledProperty, value);
    public static Xamarin.Forms.ListView IsPullToRefreshEnabled(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsPullToRefreshEnabledProperty, value, mode);
    public static Xamarin.Forms.ListView IsPullToRefreshEnabled<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsPullToRefreshEnabledProperty, value, selector);
    public static Xamarin.Forms.ListView IsRefreshing(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsRefreshingProperty, value);
    public static Xamarin.Forms.ListView IsRefreshing(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsRefreshingProperty, value, mode);
    public static Xamarin.Forms.ListView IsRefreshing<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsRefreshingProperty, value, selector);
    public static Xamarin.Forms.ListView RefreshCommand(this Xamarin.Forms.ListView obj, System.Windows.Input.ICommand value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RefreshCommandProperty, value);
    public static Xamarin.Forms.ListView RefreshCommand(this Xamarin.Forms.ListView obj, BindableValue<System.Windows.Input.ICommand> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RefreshCommandProperty, value, mode);
    public static Xamarin.Forms.ListView RefreshCommand<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Windows.Input.ICommand> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RefreshCommandProperty, value, selector);
 public static Xamarin.Forms.ListView RefreshCommand(this Xamarin.Forms.ListView obj, System.Action function) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RefreshCommandProperty, new Xamarin.Forms.Command(function));
    public static Xamarin.Forms.ListView Header(this Xamarin.Forms.ListView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeaderProperty, value);
    public static Xamarin.Forms.ListView Header(this Xamarin.Forms.ListView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeaderProperty, value, mode);
    public static Xamarin.Forms.ListView Header<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeaderProperty, value, selector);
    public static Xamarin.Forms.ListView HeaderTemplate(this Xamarin.Forms.ListView obj, Xamarin.Forms.DataTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeaderTemplateProperty, value);
    public static Xamarin.Forms.ListView HeaderTemplate(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.DataTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeaderTemplateProperty, value, mode);
    public static Xamarin.Forms.ListView HeaderTemplate<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.DataTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeaderTemplateProperty, value, selector);
    public static Xamarin.Forms.ListView Footer(this Xamarin.Forms.ListView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.FooterProperty, value);
    public static Xamarin.Forms.ListView Footer(this Xamarin.Forms.ListView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.FooterProperty, value, mode);
    public static Xamarin.Forms.ListView Footer<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.FooterProperty, value, selector);
    public static Xamarin.Forms.ListView FooterTemplate(this Xamarin.Forms.ListView obj, Xamarin.Forms.DataTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.FooterTemplateProperty, value);
    public static Xamarin.Forms.ListView FooterTemplate(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.DataTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.FooterTemplateProperty, value, mode);
    public static Xamarin.Forms.ListView FooterTemplate<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.DataTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.FooterTemplateProperty, value, selector);
    public static Xamarin.Forms.ListView SelectedItem(this Xamarin.Forms.ListView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SelectedItemProperty, value);
    public static Xamarin.Forms.ListView SelectedItem(this Xamarin.Forms.ListView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SelectedItemProperty, value, mode);
    public static Xamarin.Forms.ListView SelectedItem<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SelectedItemProperty, value, selector);
    public static Xamarin.Forms.ListView HasUnevenRows(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HasUnevenRowsProperty, value);
    public static Xamarin.Forms.ListView HasUnevenRows(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HasUnevenRowsProperty, value, mode);
    public static Xamarin.Forms.ListView HasUnevenRows<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HasUnevenRowsProperty, value, selector);
    public static Xamarin.Forms.ListView RowHeight(this Xamarin.Forms.ListView obj, System.Int32 value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RowHeightProperty, value);
    public static Xamarin.Forms.ListView RowHeight(this Xamarin.Forms.ListView obj, BindableValue<System.Int32> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RowHeightProperty, value, mode);
    public static Xamarin.Forms.ListView RowHeight<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Int32> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RowHeightProperty, value, selector);
    public static Xamarin.Forms.ListView GroupHeaderTemplate(this Xamarin.Forms.ListView obj, Xamarin.Forms.DataTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.GroupHeaderTemplateProperty, value);
    public static Xamarin.Forms.ListView GroupHeaderTemplate(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.DataTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.GroupHeaderTemplateProperty, value, mode);
    public static Xamarin.Forms.ListView GroupHeaderTemplate<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.DataTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.GroupHeaderTemplateProperty, value, selector);
    public static Xamarin.Forms.ListView IsGroupingEnabled(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsGroupingEnabledProperty, value);
    public static Xamarin.Forms.ListView IsGroupingEnabled(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsGroupingEnabledProperty, value, mode);
    public static Xamarin.Forms.ListView IsGroupingEnabled<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsGroupingEnabledProperty, value, selector);
    public static Xamarin.Forms.ListView SeparatorVisibility(this Xamarin.Forms.ListView obj, Xamarin.Forms.SeparatorVisibility value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SeparatorVisibilityProperty, value);
    public static Xamarin.Forms.ListView SeparatorVisibility(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.SeparatorVisibility> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SeparatorVisibilityProperty, value, mode);
    public static Xamarin.Forms.ListView SeparatorVisibility<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.SeparatorVisibility> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SeparatorVisibilityProperty, value, selector);
    public static Xamarin.Forms.ListView SeparatorColor(this Xamarin.Forms.ListView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SeparatorColorProperty, value);
    public static Xamarin.Forms.ListView SeparatorColor(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SeparatorColorProperty, value, mode);
    public static Xamarin.Forms.ListView SeparatorColor<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.SeparatorColorProperty, value, selector);
    public static Xamarin.Forms.ListView ItemsSource(this Xamarin.Forms.ListView obj, System.Collections.IEnumerable value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ItemsSourceProperty, value);
    public static Xamarin.Forms.ListView ItemsSource(this Xamarin.Forms.ListView obj, BindableValue<System.Collections.IEnumerable> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ItemsSourceProperty, value, mode);
    public static Xamarin.Forms.ListView ItemsSource<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.IEnumerable> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ItemsSourceProperty, value, selector);
    public static Xamarin.Forms.ListView ItemTemplate(this Xamarin.Forms.ListView obj, Xamarin.Forms.DataTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ItemTemplateProperty, value);
    public static Xamarin.Forms.ListView ItemTemplate(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.DataTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ItemTemplateProperty, value, mode);
    public static Xamarin.Forms.ListView ItemTemplate<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.DataTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ItemTemplateProperty, value, selector);
    public static Xamarin.Forms.ListView VerticalOptions(this Xamarin.Forms.ListView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.ListView VerticalOptions(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.ListView VerticalOptions<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.ListView HorizontalOptions(this Xamarin.Forms.ListView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.ListView HorizontalOptions(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.ListView HorizontalOptions<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.ListView Margin(this Xamarin.Forms.ListView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MarginProperty, value);
    public static Xamarin.Forms.ListView Margin(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MarginProperty, value, mode);
    public static Xamarin.Forms.ListView Margin<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MarginProperty, value, selector);
    public static Xamarin.Forms.ListView Navigation(this Xamarin.Forms.ListView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.NavigationProperty, value);
    public static Xamarin.Forms.ListView Navigation(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.NavigationProperty, value, mode);
    public static Xamarin.Forms.ListView Navigation<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.NavigationProperty, value, selector);
    public static Xamarin.Forms.ListView InputTransparent(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.InputTransparentProperty, value);
    public static Xamarin.Forms.ListView InputTransparent(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.ListView InputTransparent<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.ListView IsEnabled(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsEnabledProperty, value);
    public static Xamarin.Forms.ListView IsEnabled(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ListView IsEnabled<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ListView X(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.XProperty, value);
    public static Xamarin.Forms.ListView X(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.XProperty, value, mode);
    public static Xamarin.Forms.ListView X<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.XProperty, value, selector);
    public static Xamarin.Forms.ListView Y(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.YProperty, value);
    public static Xamarin.Forms.ListView Y(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.YProperty, value, mode);
    public static Xamarin.Forms.ListView Y<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.YProperty, value, selector);
    public static Xamarin.Forms.ListView AnchorX(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.AnchorXProperty, value);
    public static Xamarin.Forms.ListView AnchorX(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.ListView AnchorX<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.ListView AnchorY(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.AnchorYProperty, value);
    public static Xamarin.Forms.ListView AnchorY(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.ListView AnchorY<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.ListView TranslationX(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TranslationXProperty, value);
    public static Xamarin.Forms.ListView TranslationX(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.ListView TranslationX<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.ListView TranslationY(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TranslationYProperty, value);
    public static Xamarin.Forms.ListView TranslationY(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.ListView TranslationY<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.ListView Width(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.WidthProperty, value);
    public static Xamarin.Forms.ListView Width(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.WidthProperty, value, mode);
    public static Xamarin.Forms.ListView Width<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.WidthProperty, value, selector);
    public static Xamarin.Forms.ListView Height(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeightProperty, value);
    public static Xamarin.Forms.ListView Height(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeightProperty, value, mode);
    public static Xamarin.Forms.ListView Height<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeightProperty, value, selector);
    public static Xamarin.Forms.ListView Rotation(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationProperty, value);
    public static Xamarin.Forms.ListView Rotation(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationProperty, value, mode);
    public static Xamarin.Forms.ListView Rotation<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationProperty, value, selector);
    public static Xamarin.Forms.ListView RotationX(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationXProperty, value);
    public static Xamarin.Forms.ListView RotationX(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationXProperty, value, mode);
    public static Xamarin.Forms.ListView RotationX<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationXProperty, value, selector);
    public static Xamarin.Forms.ListView RotationY(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationYProperty, value);
    public static Xamarin.Forms.ListView RotationY(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationYProperty, value, mode);
    public static Xamarin.Forms.ListView RotationY<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.RotationYProperty, value, selector);
    public static Xamarin.Forms.ListView Scale(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ScaleProperty, value);
    public static Xamarin.Forms.ListView Scale(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ScaleProperty, value, mode);
    public static Xamarin.Forms.ListView Scale<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ScaleProperty, value, selector);
    public static Xamarin.Forms.ListView IsVisible(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsVisibleProperty, value);
    public static Xamarin.Forms.ListView IsVisible(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.ListView IsVisible<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.ListView Opacity(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.OpacityProperty, value);
    public static Xamarin.Forms.ListView Opacity(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.OpacityProperty, value, mode);
    public static Xamarin.Forms.ListView Opacity<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.OpacityProperty, value, selector);
    public static Xamarin.Forms.ListView BackgroundColor(this Xamarin.Forms.ListView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BackgroundColorProperty, value);
    public static Xamarin.Forms.ListView BackgroundColor(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.ListView BackgroundColor<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.ListView Behaviors(this Xamarin.Forms.ListView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BehaviorsProperty, value);
    public static Xamarin.Forms.ListView Behaviors(this Xamarin.Forms.ListView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.ListView Behaviors<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.ListView Triggers(this Xamarin.Forms.ListView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TriggersProperty, value);
    public static Xamarin.Forms.ListView Triggers(this Xamarin.Forms.ListView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TriggersProperty, value, mode);
    public static Xamarin.Forms.ListView Triggers<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.TriggersProperty, value, selector);
    public static Xamarin.Forms.ListView Style(this Xamarin.Forms.ListView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.StyleProperty, value);
    public static Xamarin.Forms.ListView Style(this Xamarin.Forms.ListView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.StyleProperty, value, mode);
    public static Xamarin.Forms.ListView Style<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.StyleProperty, value, selector);
    public static Xamarin.Forms.ListView WidthRequest(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.WidthRequestProperty, value);
    public static Xamarin.Forms.ListView WidthRequest(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.ListView WidthRequest<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.ListView HeightRequest(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeightRequestProperty, value);
    public static Xamarin.Forms.ListView HeightRequest(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.ListView HeightRequest<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.ListView MinimumWidthRequest(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.ListView MinimumWidthRequest(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.ListView MinimumWidthRequest<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.ListView MinimumHeightRequest(this Xamarin.Forms.ListView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.ListView MinimumHeightRequest(this Xamarin.Forms.ListView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.ListView MinimumHeightRequest<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.ListView IsFocused(this Xamarin.Forms.ListView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsFocusedProperty, value);
    public static Xamarin.Forms.ListView IsFocused(this Xamarin.Forms.ListView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.ListView IsFocused<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.ListView ClassId(this Xamarin.Forms.ListView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ClassIdProperty, value);
    public static Xamarin.Forms.ListView ClassId(this Xamarin.Forms.ListView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ListView ClassId<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ListView BindingContext(this Xamarin.Forms.ListView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BindingContextProperty, value);
    public static Xamarin.Forms.ListView BindingContext(this Xamarin.Forms.ListView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ListView BindingContext<TFrom>(this Xamarin.Forms.ListView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ListView.BindingContextProperty, value, selector);
  }

  public static partial class EditorExtensions {
    public static Xamarin.Forms.Editor Text(this Xamarin.Forms.Editor obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TextProperty, value);
    public static Xamarin.Forms.Editor Text(this Xamarin.Forms.Editor obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TextProperty, value, mode);
    public static Xamarin.Forms.Editor Text<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TextProperty, value, selector);
    public static Xamarin.Forms.Editor FontFamily(this Xamarin.Forms.Editor obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontFamilyProperty, value);
    public static Xamarin.Forms.Editor FontFamily(this Xamarin.Forms.Editor obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontFamilyProperty, value, mode);
    public static Xamarin.Forms.Editor FontFamily<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontFamilyProperty, value, selector);
    public static Xamarin.Forms.Editor FontSize(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontSizeProperty, value);
    public static Xamarin.Forms.Editor FontSize(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontSizeProperty, value, mode);
    public static Xamarin.Forms.Editor FontSize<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontSizeProperty, value, selector);
    public static Xamarin.Forms.Editor FontAttributes(this Xamarin.Forms.Editor obj, Xamarin.Forms.FontAttributes value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontAttributesProperty, value);
    public static Xamarin.Forms.Editor FontAttributes(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.FontAttributes> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontAttributesProperty, value, mode);
    public static Xamarin.Forms.Editor FontAttributes<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FontAttributes> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.FontAttributesProperty, value, selector);
    public static Xamarin.Forms.Editor TextColor(this Xamarin.Forms.Editor obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TextColorProperty, value);
    public static Xamarin.Forms.Editor TextColor(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TextColorProperty, value, mode);
    public static Xamarin.Forms.Editor TextColor<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TextColorProperty, value, selector);
    public static Xamarin.Forms.Editor Keyboard(this Xamarin.Forms.Editor obj, Xamarin.Forms.Keyboard value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.KeyboardProperty, value);
    public static Xamarin.Forms.Editor Keyboard(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.Keyboard> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.KeyboardProperty, value, mode);
    public static Xamarin.Forms.Editor Keyboard<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Keyboard> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.KeyboardProperty, value, selector);
    public static Xamarin.Forms.Editor VerticalOptions(this Xamarin.Forms.Editor obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Editor VerticalOptions(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Editor VerticalOptions<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Editor HorizontalOptions(this Xamarin.Forms.Editor obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Editor HorizontalOptions(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Editor HorizontalOptions<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Editor Margin(this Xamarin.Forms.Editor obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MarginProperty, value);
    public static Xamarin.Forms.Editor Margin(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MarginProperty, value, mode);
    public static Xamarin.Forms.Editor Margin<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MarginProperty, value, selector);
    public static Xamarin.Forms.Editor Navigation(this Xamarin.Forms.Editor obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.NavigationProperty, value);
    public static Xamarin.Forms.Editor Navigation(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.NavigationProperty, value, mode);
    public static Xamarin.Forms.Editor Navigation<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.NavigationProperty, value, selector);
    public static Xamarin.Forms.Editor InputTransparent(this Xamarin.Forms.Editor obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.InputTransparentProperty, value);
    public static Xamarin.Forms.Editor InputTransparent(this Xamarin.Forms.Editor obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Editor InputTransparent<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Editor IsEnabled(this Xamarin.Forms.Editor obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsEnabledProperty, value);
    public static Xamarin.Forms.Editor IsEnabled(this Xamarin.Forms.Editor obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Editor IsEnabled<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Editor X(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.XProperty, value);
    public static Xamarin.Forms.Editor X(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.XProperty, value, mode);
    public static Xamarin.Forms.Editor X<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.XProperty, value, selector);
    public static Xamarin.Forms.Editor Y(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.YProperty, value);
    public static Xamarin.Forms.Editor Y(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.YProperty, value, mode);
    public static Xamarin.Forms.Editor Y<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.YProperty, value, selector);
    public static Xamarin.Forms.Editor AnchorX(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.AnchorXProperty, value);
    public static Xamarin.Forms.Editor AnchorX(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Editor AnchorX<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Editor AnchorY(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.AnchorYProperty, value);
    public static Xamarin.Forms.Editor AnchorY(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Editor AnchorY<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Editor TranslationX(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TranslationXProperty, value);
    public static Xamarin.Forms.Editor TranslationX(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Editor TranslationX<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Editor TranslationY(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TranslationYProperty, value);
    public static Xamarin.Forms.Editor TranslationY(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Editor TranslationY<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Editor Width(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.WidthProperty, value);
    public static Xamarin.Forms.Editor Width(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.WidthProperty, value, mode);
    public static Xamarin.Forms.Editor Width<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.WidthProperty, value, selector);
    public static Xamarin.Forms.Editor Height(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HeightProperty, value);
    public static Xamarin.Forms.Editor Height(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HeightProperty, value, mode);
    public static Xamarin.Forms.Editor Height<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HeightProperty, value, selector);
    public static Xamarin.Forms.Editor Rotation(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationProperty, value);
    public static Xamarin.Forms.Editor Rotation(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationProperty, value, mode);
    public static Xamarin.Forms.Editor Rotation<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationProperty, value, selector);
    public static Xamarin.Forms.Editor RotationX(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationXProperty, value);
    public static Xamarin.Forms.Editor RotationX(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationXProperty, value, mode);
    public static Xamarin.Forms.Editor RotationX<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationXProperty, value, selector);
    public static Xamarin.Forms.Editor RotationY(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationYProperty, value);
    public static Xamarin.Forms.Editor RotationY(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationYProperty, value, mode);
    public static Xamarin.Forms.Editor RotationY<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.RotationYProperty, value, selector);
    public static Xamarin.Forms.Editor Scale(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.ScaleProperty, value);
    public static Xamarin.Forms.Editor Scale(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.ScaleProperty, value, mode);
    public static Xamarin.Forms.Editor Scale<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.ScaleProperty, value, selector);
    public static Xamarin.Forms.Editor IsVisible(this Xamarin.Forms.Editor obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsVisibleProperty, value);
    public static Xamarin.Forms.Editor IsVisible(this Xamarin.Forms.Editor obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Editor IsVisible<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Editor Opacity(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.OpacityProperty, value);
    public static Xamarin.Forms.Editor Opacity(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.OpacityProperty, value, mode);
    public static Xamarin.Forms.Editor Opacity<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.OpacityProperty, value, selector);
    public static Xamarin.Forms.Editor BackgroundColor(this Xamarin.Forms.Editor obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BackgroundColorProperty, value);
    public static Xamarin.Forms.Editor BackgroundColor(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Editor BackgroundColor<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Editor Behaviors(this Xamarin.Forms.Editor obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BehaviorsProperty, value);
    public static Xamarin.Forms.Editor Behaviors(this Xamarin.Forms.Editor obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Editor Behaviors<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Editor Triggers(this Xamarin.Forms.Editor obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TriggersProperty, value);
    public static Xamarin.Forms.Editor Triggers(this Xamarin.Forms.Editor obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TriggersProperty, value, mode);
    public static Xamarin.Forms.Editor Triggers<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.TriggersProperty, value, selector);
    public static Xamarin.Forms.Editor Style(this Xamarin.Forms.Editor obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.StyleProperty, value);
    public static Xamarin.Forms.Editor Style(this Xamarin.Forms.Editor obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.StyleProperty, value, mode);
    public static Xamarin.Forms.Editor Style<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.StyleProperty, value, selector);
    public static Xamarin.Forms.Editor WidthRequest(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.WidthRequestProperty, value);
    public static Xamarin.Forms.Editor WidthRequest(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Editor WidthRequest<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Editor HeightRequest(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HeightRequestProperty, value);
    public static Xamarin.Forms.Editor HeightRequest(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Editor HeightRequest<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Editor MinimumWidthRequest(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Editor MinimumWidthRequest(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Editor MinimumWidthRequest<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Editor MinimumHeightRequest(this Xamarin.Forms.Editor obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Editor MinimumHeightRequest(this Xamarin.Forms.Editor obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Editor MinimumHeightRequest<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Editor IsFocused(this Xamarin.Forms.Editor obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsFocusedProperty, value);
    public static Xamarin.Forms.Editor IsFocused(this Xamarin.Forms.Editor obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Editor IsFocused<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Editor ClassId(this Xamarin.Forms.Editor obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.ClassIdProperty, value);
    public static Xamarin.Forms.Editor ClassId(this Xamarin.Forms.Editor obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Editor ClassId<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Editor BindingContext(this Xamarin.Forms.Editor obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BindingContextProperty, value);
    public static Xamarin.Forms.Editor BindingContext(this Xamarin.Forms.Editor obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Editor BindingContext<TFrom>(this Xamarin.Forms.Editor obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Editor.BindingContextProperty, value, selector);
  }

  public static partial class EntryExtensions {
    public static Xamarin.Forms.Entry Placeholder(this Xamarin.Forms.Entry obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.PlaceholderProperty, value);
    public static Xamarin.Forms.Entry Placeholder(this Xamarin.Forms.Entry obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.PlaceholderProperty, value, mode);
    public static Xamarin.Forms.Entry Placeholder<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.PlaceholderProperty, value, selector);
    public static Xamarin.Forms.Entry IsPassword(this Xamarin.Forms.Entry obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsPasswordProperty, value);
    public static Xamarin.Forms.Entry IsPassword(this Xamarin.Forms.Entry obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsPasswordProperty, value, mode);
    public static Xamarin.Forms.Entry IsPassword<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsPasswordProperty, value, selector);
    public static Xamarin.Forms.Entry Text(this Xamarin.Forms.Entry obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TextProperty, value);
    public static Xamarin.Forms.Entry Text(this Xamarin.Forms.Entry obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TextProperty, value, mode);
    public static Xamarin.Forms.Entry Text<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TextProperty, value, selector);
    public static Xamarin.Forms.Entry TextColor(this Xamarin.Forms.Entry obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TextColorProperty, value);
    public static Xamarin.Forms.Entry TextColor(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TextColorProperty, value, mode);
    public static Xamarin.Forms.Entry TextColor<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TextColorProperty, value, selector);
    public static Xamarin.Forms.Entry HorizontalTextAlignment(this Xamarin.Forms.Entry obj, Xamarin.Forms.TextAlignment value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HorizontalTextAlignmentProperty, value);
    public static Xamarin.Forms.Entry HorizontalTextAlignment(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.TextAlignment> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HorizontalTextAlignmentProperty, value, mode);
    public static Xamarin.Forms.Entry HorizontalTextAlignment<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.TextAlignment> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HorizontalTextAlignmentProperty, value, selector);
    public static Xamarin.Forms.Entry PlaceholderColor(this Xamarin.Forms.Entry obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.PlaceholderColorProperty, value);
    public static Xamarin.Forms.Entry PlaceholderColor(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.PlaceholderColorProperty, value, mode);
    public static Xamarin.Forms.Entry PlaceholderColor<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.PlaceholderColorProperty, value, selector);
    public static Xamarin.Forms.Entry FontFamily(this Xamarin.Forms.Entry obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontFamilyProperty, value);
    public static Xamarin.Forms.Entry FontFamily(this Xamarin.Forms.Entry obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontFamilyProperty, value, mode);
    public static Xamarin.Forms.Entry FontFamily<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontFamilyProperty, value, selector);
    public static Xamarin.Forms.Entry FontSize(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontSizeProperty, value);
    public static Xamarin.Forms.Entry FontSize(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontSizeProperty, value, mode);
    public static Xamarin.Forms.Entry FontSize<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontSizeProperty, value, selector);
    public static Xamarin.Forms.Entry FontAttributes(this Xamarin.Forms.Entry obj, Xamarin.Forms.FontAttributes value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontAttributesProperty, value);
    public static Xamarin.Forms.Entry FontAttributes(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.FontAttributes> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontAttributesProperty, value, mode);
    public static Xamarin.Forms.Entry FontAttributes<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FontAttributes> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.FontAttributesProperty, value, selector);
    public static Xamarin.Forms.Entry Keyboard(this Xamarin.Forms.Entry obj, Xamarin.Forms.Keyboard value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.KeyboardProperty, value);
    public static Xamarin.Forms.Entry Keyboard(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.Keyboard> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.KeyboardProperty, value, mode);
    public static Xamarin.Forms.Entry Keyboard<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Keyboard> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.KeyboardProperty, value, selector);
    public static Xamarin.Forms.Entry VerticalOptions(this Xamarin.Forms.Entry obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Entry VerticalOptions(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Entry VerticalOptions<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Entry HorizontalOptions(this Xamarin.Forms.Entry obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Entry HorizontalOptions(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Entry HorizontalOptions<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Entry Margin(this Xamarin.Forms.Entry obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MarginProperty, value);
    public static Xamarin.Forms.Entry Margin(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MarginProperty, value, mode);
    public static Xamarin.Forms.Entry Margin<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MarginProperty, value, selector);
    public static Xamarin.Forms.Entry Navigation(this Xamarin.Forms.Entry obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.NavigationProperty, value);
    public static Xamarin.Forms.Entry Navigation(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.NavigationProperty, value, mode);
    public static Xamarin.Forms.Entry Navigation<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.NavigationProperty, value, selector);
    public static Xamarin.Forms.Entry InputTransparent(this Xamarin.Forms.Entry obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.InputTransparentProperty, value);
    public static Xamarin.Forms.Entry InputTransparent(this Xamarin.Forms.Entry obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Entry InputTransparent<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Entry IsEnabled(this Xamarin.Forms.Entry obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsEnabledProperty, value);
    public static Xamarin.Forms.Entry IsEnabled(this Xamarin.Forms.Entry obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Entry IsEnabled<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Entry X(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.XProperty, value);
    public static Xamarin.Forms.Entry X(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.XProperty, value, mode);
    public static Xamarin.Forms.Entry X<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.XProperty, value, selector);
    public static Xamarin.Forms.Entry Y(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.YProperty, value);
    public static Xamarin.Forms.Entry Y(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.YProperty, value, mode);
    public static Xamarin.Forms.Entry Y<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.YProperty, value, selector);
    public static Xamarin.Forms.Entry AnchorX(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.AnchorXProperty, value);
    public static Xamarin.Forms.Entry AnchorX(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Entry AnchorX<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Entry AnchorY(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.AnchorYProperty, value);
    public static Xamarin.Forms.Entry AnchorY(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Entry AnchorY<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Entry TranslationX(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TranslationXProperty, value);
    public static Xamarin.Forms.Entry TranslationX(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Entry TranslationX<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Entry TranslationY(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TranslationYProperty, value);
    public static Xamarin.Forms.Entry TranslationY(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Entry TranslationY<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Entry Width(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.WidthProperty, value);
    public static Xamarin.Forms.Entry Width(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.WidthProperty, value, mode);
    public static Xamarin.Forms.Entry Width<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.WidthProperty, value, selector);
    public static Xamarin.Forms.Entry Height(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HeightProperty, value);
    public static Xamarin.Forms.Entry Height(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HeightProperty, value, mode);
    public static Xamarin.Forms.Entry Height<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HeightProperty, value, selector);
    public static Xamarin.Forms.Entry Rotation(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationProperty, value);
    public static Xamarin.Forms.Entry Rotation(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationProperty, value, mode);
    public static Xamarin.Forms.Entry Rotation<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationProperty, value, selector);
    public static Xamarin.Forms.Entry RotationX(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationXProperty, value);
    public static Xamarin.Forms.Entry RotationX(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationXProperty, value, mode);
    public static Xamarin.Forms.Entry RotationX<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationXProperty, value, selector);
    public static Xamarin.Forms.Entry RotationY(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationYProperty, value);
    public static Xamarin.Forms.Entry RotationY(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationYProperty, value, mode);
    public static Xamarin.Forms.Entry RotationY<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.RotationYProperty, value, selector);
    public static Xamarin.Forms.Entry Scale(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.ScaleProperty, value);
    public static Xamarin.Forms.Entry Scale(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.ScaleProperty, value, mode);
    public static Xamarin.Forms.Entry Scale<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.ScaleProperty, value, selector);
    public static Xamarin.Forms.Entry IsVisible(this Xamarin.Forms.Entry obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsVisibleProperty, value);
    public static Xamarin.Forms.Entry IsVisible(this Xamarin.Forms.Entry obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Entry IsVisible<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Entry Opacity(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.OpacityProperty, value);
    public static Xamarin.Forms.Entry Opacity(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.OpacityProperty, value, mode);
    public static Xamarin.Forms.Entry Opacity<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.OpacityProperty, value, selector);
    public static Xamarin.Forms.Entry BackgroundColor(this Xamarin.Forms.Entry obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BackgroundColorProperty, value);
    public static Xamarin.Forms.Entry BackgroundColor(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Entry BackgroundColor<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Entry Behaviors(this Xamarin.Forms.Entry obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BehaviorsProperty, value);
    public static Xamarin.Forms.Entry Behaviors(this Xamarin.Forms.Entry obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Entry Behaviors<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Entry Triggers(this Xamarin.Forms.Entry obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TriggersProperty, value);
    public static Xamarin.Forms.Entry Triggers(this Xamarin.Forms.Entry obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TriggersProperty, value, mode);
    public static Xamarin.Forms.Entry Triggers<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.TriggersProperty, value, selector);
    public static Xamarin.Forms.Entry Style(this Xamarin.Forms.Entry obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.StyleProperty, value);
    public static Xamarin.Forms.Entry Style(this Xamarin.Forms.Entry obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.StyleProperty, value, mode);
    public static Xamarin.Forms.Entry Style<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.StyleProperty, value, selector);
    public static Xamarin.Forms.Entry WidthRequest(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.WidthRequestProperty, value);
    public static Xamarin.Forms.Entry WidthRequest(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Entry WidthRequest<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Entry HeightRequest(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HeightRequestProperty, value);
    public static Xamarin.Forms.Entry HeightRequest(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Entry HeightRequest<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Entry MinimumWidthRequest(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Entry MinimumWidthRequest(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Entry MinimumWidthRequest<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Entry MinimumHeightRequest(this Xamarin.Forms.Entry obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Entry MinimumHeightRequest(this Xamarin.Forms.Entry obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Entry MinimumHeightRequest<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Entry IsFocused(this Xamarin.Forms.Entry obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsFocusedProperty, value);
    public static Xamarin.Forms.Entry IsFocused(this Xamarin.Forms.Entry obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Entry IsFocused<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Entry ClassId(this Xamarin.Forms.Entry obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.ClassIdProperty, value);
    public static Xamarin.Forms.Entry ClassId(this Xamarin.Forms.Entry obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Entry ClassId<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Entry BindingContext(this Xamarin.Forms.Entry obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BindingContextProperty, value);
    public static Xamarin.Forms.Entry BindingContext(this Xamarin.Forms.Entry obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Entry BindingContext<TFrom>(this Xamarin.Forms.Entry obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Entry.BindingContextProperty, value, selector);
  }

  public static partial class ScrollViewExtensions {
    public static Xamarin.Forms.ScrollView Orientation(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.ScrollOrientation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.OrientationProperty, value);
    public static Xamarin.Forms.ScrollView Orientation(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.ScrollOrientation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.OrientationProperty, value, mode);
    public static Xamarin.Forms.ScrollView Orientation<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ScrollOrientation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.OrientationProperty, value, selector);
    public static Xamarin.Forms.ScrollView ScrollX(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScrollXProperty, value);
    public static Xamarin.Forms.ScrollView ScrollX(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScrollXProperty, value, mode);
    public static Xamarin.Forms.ScrollView ScrollX<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScrollXProperty, value, selector);
    public static Xamarin.Forms.ScrollView ScrollY(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScrollYProperty, value);
    public static Xamarin.Forms.ScrollView ScrollY(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScrollYProperty, value, mode);
    public static Xamarin.Forms.ScrollView ScrollY<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScrollYProperty, value, selector);
    public static Xamarin.Forms.ScrollView ContentSize(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.Size value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ContentSizeProperty, value);
    public static Xamarin.Forms.ScrollView ContentSize(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.Size> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ContentSizeProperty, value, mode);
    public static Xamarin.Forms.ScrollView ContentSize<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Size> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ContentSizeProperty, value, selector);
    public static Xamarin.Forms.ScrollView IsClippedToBounds(this Xamarin.Forms.ScrollView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.ScrollView IsClippedToBounds(this Xamarin.Forms.ScrollView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.ScrollView IsClippedToBounds<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.ScrollView Padding(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.PaddingProperty, value);
    public static Xamarin.Forms.ScrollView Padding(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.PaddingProperty, value, mode);
    public static Xamarin.Forms.ScrollView Padding<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.PaddingProperty, value, selector);
    public static Xamarin.Forms.ScrollView VerticalOptions(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.ScrollView VerticalOptions(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.ScrollView VerticalOptions<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.ScrollView HorizontalOptions(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.ScrollView HorizontalOptions(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.ScrollView HorizontalOptions<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.ScrollView Margin(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MarginProperty, value);
    public static Xamarin.Forms.ScrollView Margin(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MarginProperty, value, mode);
    public static Xamarin.Forms.ScrollView Margin<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MarginProperty, value, selector);
    public static Xamarin.Forms.ScrollView Navigation(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.NavigationProperty, value);
    public static Xamarin.Forms.ScrollView Navigation(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.NavigationProperty, value, mode);
    public static Xamarin.Forms.ScrollView Navigation<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.NavigationProperty, value, selector);
    public static Xamarin.Forms.ScrollView InputTransparent(this Xamarin.Forms.ScrollView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.InputTransparentProperty, value);
    public static Xamarin.Forms.ScrollView InputTransparent(this Xamarin.Forms.ScrollView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.ScrollView InputTransparent<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.ScrollView IsEnabled(this Xamarin.Forms.ScrollView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsEnabledProperty, value);
    public static Xamarin.Forms.ScrollView IsEnabled(this Xamarin.Forms.ScrollView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ScrollView IsEnabled<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ScrollView X(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.XProperty, value);
    public static Xamarin.Forms.ScrollView X(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.XProperty, value, mode);
    public static Xamarin.Forms.ScrollView X<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.XProperty, value, selector);
    public static Xamarin.Forms.ScrollView Y(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.YProperty, value);
    public static Xamarin.Forms.ScrollView Y(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.YProperty, value, mode);
    public static Xamarin.Forms.ScrollView Y<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.YProperty, value, selector);
    public static Xamarin.Forms.ScrollView AnchorX(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.AnchorXProperty, value);
    public static Xamarin.Forms.ScrollView AnchorX(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.ScrollView AnchorX<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.ScrollView AnchorY(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.AnchorYProperty, value);
    public static Xamarin.Forms.ScrollView AnchorY(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.ScrollView AnchorY<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.ScrollView TranslationX(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TranslationXProperty, value);
    public static Xamarin.Forms.ScrollView TranslationX(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.ScrollView TranslationX<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.ScrollView TranslationY(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TranslationYProperty, value);
    public static Xamarin.Forms.ScrollView TranslationY(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.ScrollView TranslationY<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.ScrollView Width(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.WidthProperty, value);
    public static Xamarin.Forms.ScrollView Width(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.WidthProperty, value, mode);
    public static Xamarin.Forms.ScrollView Width<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.WidthProperty, value, selector);
    public static Xamarin.Forms.ScrollView Height(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HeightProperty, value);
    public static Xamarin.Forms.ScrollView Height(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HeightProperty, value, mode);
    public static Xamarin.Forms.ScrollView Height<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HeightProperty, value, selector);
    public static Xamarin.Forms.ScrollView Rotation(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationProperty, value);
    public static Xamarin.Forms.ScrollView Rotation(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationProperty, value, mode);
    public static Xamarin.Forms.ScrollView Rotation<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationProperty, value, selector);
    public static Xamarin.Forms.ScrollView RotationX(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationXProperty, value);
    public static Xamarin.Forms.ScrollView RotationX(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationXProperty, value, mode);
    public static Xamarin.Forms.ScrollView RotationX<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationXProperty, value, selector);
    public static Xamarin.Forms.ScrollView RotationY(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationYProperty, value);
    public static Xamarin.Forms.ScrollView RotationY(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationYProperty, value, mode);
    public static Xamarin.Forms.ScrollView RotationY<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.RotationYProperty, value, selector);
    public static Xamarin.Forms.ScrollView Scale(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScaleProperty, value);
    public static Xamarin.Forms.ScrollView Scale(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScaleProperty, value, mode);
    public static Xamarin.Forms.ScrollView Scale<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ScaleProperty, value, selector);
    public static Xamarin.Forms.ScrollView IsVisible(this Xamarin.Forms.ScrollView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsVisibleProperty, value);
    public static Xamarin.Forms.ScrollView IsVisible(this Xamarin.Forms.ScrollView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.ScrollView IsVisible<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.ScrollView Opacity(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.OpacityProperty, value);
    public static Xamarin.Forms.ScrollView Opacity(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.OpacityProperty, value, mode);
    public static Xamarin.Forms.ScrollView Opacity<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.OpacityProperty, value, selector);
    public static Xamarin.Forms.ScrollView BackgroundColor(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BackgroundColorProperty, value);
    public static Xamarin.Forms.ScrollView BackgroundColor(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.ScrollView BackgroundColor<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.ScrollView Behaviors(this Xamarin.Forms.ScrollView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BehaviorsProperty, value);
    public static Xamarin.Forms.ScrollView Behaviors(this Xamarin.Forms.ScrollView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.ScrollView Behaviors<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.ScrollView Triggers(this Xamarin.Forms.ScrollView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TriggersProperty, value);
    public static Xamarin.Forms.ScrollView Triggers(this Xamarin.Forms.ScrollView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TriggersProperty, value, mode);
    public static Xamarin.Forms.ScrollView Triggers<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.TriggersProperty, value, selector);
    public static Xamarin.Forms.ScrollView Style(this Xamarin.Forms.ScrollView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.StyleProperty, value);
    public static Xamarin.Forms.ScrollView Style(this Xamarin.Forms.ScrollView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.StyleProperty, value, mode);
    public static Xamarin.Forms.ScrollView Style<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.StyleProperty, value, selector);
    public static Xamarin.Forms.ScrollView WidthRequest(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.WidthRequestProperty, value);
    public static Xamarin.Forms.ScrollView WidthRequest(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.ScrollView WidthRequest<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.ScrollView HeightRequest(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HeightRequestProperty, value);
    public static Xamarin.Forms.ScrollView HeightRequest(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.ScrollView HeightRequest<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.ScrollView MinimumWidthRequest(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.ScrollView MinimumWidthRequest(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.ScrollView MinimumWidthRequest<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.ScrollView MinimumHeightRequest(this Xamarin.Forms.ScrollView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.ScrollView MinimumHeightRequest(this Xamarin.Forms.ScrollView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.ScrollView MinimumHeightRequest<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.ScrollView IsFocused(this Xamarin.Forms.ScrollView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsFocusedProperty, value);
    public static Xamarin.Forms.ScrollView IsFocused(this Xamarin.Forms.ScrollView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.ScrollView IsFocused<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.ScrollView ClassId(this Xamarin.Forms.ScrollView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ClassIdProperty, value);
    public static Xamarin.Forms.ScrollView ClassId(this Xamarin.Forms.ScrollView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ScrollView ClassId<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ScrollView BindingContext(this Xamarin.Forms.ScrollView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BindingContextProperty, value);
    public static Xamarin.Forms.ScrollView BindingContext(this Xamarin.Forms.ScrollView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ScrollView BindingContext<TFrom>(this Xamarin.Forms.ScrollView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ScrollView.BindingContextProperty, value, selector);
  }

  public static partial class TabbedPageExtensions {
    public static Xamarin.Forms.TabbedPage BarBackgroundColor(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BarBackgroundColorProperty, value);
    public static Xamarin.Forms.TabbedPage BarBackgroundColor(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BarBackgroundColorProperty, value, mode);
    public static Xamarin.Forms.TabbedPage BarBackgroundColor<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BarBackgroundColorProperty, value, selector);
    public static Xamarin.Forms.TabbedPage BarTextColor(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BarTextColorProperty, value);
    public static Xamarin.Forms.TabbedPage BarTextColor(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BarTextColorProperty, value, mode);
    public static Xamarin.Forms.TabbedPage BarTextColor<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BarTextColorProperty, value, selector);
    public static Xamarin.Forms.TabbedPage ItemsSource(this Xamarin.Forms.TabbedPage obj, System.Collections.IEnumerable value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ItemsSourceProperty, value);
    public static Xamarin.Forms.TabbedPage ItemsSource(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Collections.IEnumerable> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ItemsSourceProperty, value, mode);
    public static Xamarin.Forms.TabbedPage ItemsSource<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.IEnumerable> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ItemsSourceProperty, value, selector);
    public static Xamarin.Forms.TabbedPage ItemTemplate(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.DataTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ItemTemplateProperty, value);
    public static Xamarin.Forms.TabbedPage ItemTemplate(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.DataTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ItemTemplateProperty, value, mode);
    public static Xamarin.Forms.TabbedPage ItemTemplate<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.DataTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ItemTemplateProperty, value, selector);
    public static Xamarin.Forms.TabbedPage SelectedItem(this Xamarin.Forms.TabbedPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.SelectedItemProperty, value);
    public static Xamarin.Forms.TabbedPage SelectedItem(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.SelectedItemProperty, value, mode);
    public static Xamarin.Forms.TabbedPage SelectedItem<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.SelectedItemProperty, value, selector);
    public static Xamarin.Forms.TabbedPage BackgroundImage(this Xamarin.Forms.TabbedPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BackgroundImageProperty, value);
    public static Xamarin.Forms.TabbedPage BackgroundImage(this Xamarin.Forms.TabbedPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BackgroundImageProperty, value, mode);
    public static Xamarin.Forms.TabbedPage BackgroundImage<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BackgroundImageProperty, value, selector);
    public static Xamarin.Forms.TabbedPage IsBusy(this Xamarin.Forms.TabbedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsBusyProperty, value);
    public static Xamarin.Forms.TabbedPage IsBusy(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsBusyProperty, value, mode);
    public static Xamarin.Forms.TabbedPage IsBusy<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsBusyProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Padding(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.PaddingProperty, value);
    public static Xamarin.Forms.TabbedPage Padding(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.PaddingProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Padding<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.PaddingProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Title(this Xamarin.Forms.TabbedPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TitleProperty, value);
    public static Xamarin.Forms.TabbedPage Title(this Xamarin.Forms.TabbedPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TitleProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Title<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TitleProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Icon(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IconProperty, value);
    public static Xamarin.Forms.TabbedPage Icon(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IconProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Icon<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IconProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Navigation(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.NavigationProperty, value);
    public static Xamarin.Forms.TabbedPage Navigation(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.NavigationProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Navigation<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.NavigationProperty, value, selector);
    public static Xamarin.Forms.TabbedPage InputTransparent(this Xamarin.Forms.TabbedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.InputTransparentProperty, value);
    public static Xamarin.Forms.TabbedPage InputTransparent(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.TabbedPage InputTransparent<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.TabbedPage IsEnabled(this Xamarin.Forms.TabbedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsEnabledProperty, value);
    public static Xamarin.Forms.TabbedPage IsEnabled(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.TabbedPage IsEnabled<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.TabbedPage X(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.XProperty, value);
    public static Xamarin.Forms.TabbedPage X(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.XProperty, value, mode);
    public static Xamarin.Forms.TabbedPage X<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.XProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Y(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.YProperty, value);
    public static Xamarin.Forms.TabbedPage Y(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.YProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Y<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.YProperty, value, selector);
    public static Xamarin.Forms.TabbedPage AnchorX(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.AnchorXProperty, value);
    public static Xamarin.Forms.TabbedPage AnchorX(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.AnchorXProperty, value, mode);
    public static Xamarin.Forms.TabbedPage AnchorX<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.AnchorXProperty, value, selector);
    public static Xamarin.Forms.TabbedPage AnchorY(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.AnchorYProperty, value);
    public static Xamarin.Forms.TabbedPage AnchorY(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.AnchorYProperty, value, mode);
    public static Xamarin.Forms.TabbedPage AnchorY<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.AnchorYProperty, value, selector);
    public static Xamarin.Forms.TabbedPage TranslationX(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TranslationXProperty, value);
    public static Xamarin.Forms.TabbedPage TranslationX(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TranslationXProperty, value, mode);
    public static Xamarin.Forms.TabbedPage TranslationX<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TranslationXProperty, value, selector);
    public static Xamarin.Forms.TabbedPage TranslationY(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TranslationYProperty, value);
    public static Xamarin.Forms.TabbedPage TranslationY(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TranslationYProperty, value, mode);
    public static Xamarin.Forms.TabbedPage TranslationY<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TranslationYProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Width(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.WidthProperty, value);
    public static Xamarin.Forms.TabbedPage Width(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.WidthProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Width<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.WidthProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Height(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.HeightProperty, value);
    public static Xamarin.Forms.TabbedPage Height(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.HeightProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Height<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.HeightProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Rotation(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationProperty, value);
    public static Xamarin.Forms.TabbedPage Rotation(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Rotation<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationProperty, value, selector);
    public static Xamarin.Forms.TabbedPage RotationX(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationXProperty, value);
    public static Xamarin.Forms.TabbedPage RotationX(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationXProperty, value, mode);
    public static Xamarin.Forms.TabbedPage RotationX<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationXProperty, value, selector);
    public static Xamarin.Forms.TabbedPage RotationY(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationYProperty, value);
    public static Xamarin.Forms.TabbedPage RotationY(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationYProperty, value, mode);
    public static Xamarin.Forms.TabbedPage RotationY<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.RotationYProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Scale(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ScaleProperty, value);
    public static Xamarin.Forms.TabbedPage Scale(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ScaleProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Scale<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ScaleProperty, value, selector);
    public static Xamarin.Forms.TabbedPage IsVisible(this Xamarin.Forms.TabbedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsVisibleProperty, value);
    public static Xamarin.Forms.TabbedPage IsVisible(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.TabbedPage IsVisible<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Opacity(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.OpacityProperty, value);
    public static Xamarin.Forms.TabbedPage Opacity(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.OpacityProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Opacity<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.OpacityProperty, value, selector);
    public static Xamarin.Forms.TabbedPage BackgroundColor(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BackgroundColorProperty, value);
    public static Xamarin.Forms.TabbedPage BackgroundColor(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.TabbedPage BackgroundColor<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Behaviors(this Xamarin.Forms.TabbedPage obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BehaviorsProperty, value);
    public static Xamarin.Forms.TabbedPage Behaviors(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Behaviors<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Triggers(this Xamarin.Forms.TabbedPage obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TriggersProperty, value);
    public static Xamarin.Forms.TabbedPage Triggers(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TriggersProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Triggers<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.TriggersProperty, value, selector);
    public static Xamarin.Forms.TabbedPage Style(this Xamarin.Forms.TabbedPage obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.StyleProperty, value);
    public static Xamarin.Forms.TabbedPage Style(this Xamarin.Forms.TabbedPage obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.StyleProperty, value, mode);
    public static Xamarin.Forms.TabbedPage Style<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.StyleProperty, value, selector);
    public static Xamarin.Forms.TabbedPage WidthRequest(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.WidthRequestProperty, value);
    public static Xamarin.Forms.TabbedPage WidthRequest(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.TabbedPage WidthRequest<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.TabbedPage HeightRequest(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.HeightRequestProperty, value);
    public static Xamarin.Forms.TabbedPage HeightRequest(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.TabbedPage HeightRequest<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.TabbedPage MinimumWidthRequest(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.TabbedPage MinimumWidthRequest(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.TabbedPage MinimumWidthRequest<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.TabbedPage MinimumHeightRequest(this Xamarin.Forms.TabbedPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.TabbedPage MinimumHeightRequest(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.TabbedPage MinimumHeightRequest<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.TabbedPage IsFocused(this Xamarin.Forms.TabbedPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsFocusedProperty, value);
    public static Xamarin.Forms.TabbedPage IsFocused(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.TabbedPage IsFocused<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.TabbedPage ClassId(this Xamarin.Forms.TabbedPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ClassIdProperty, value);
    public static Xamarin.Forms.TabbedPage ClassId(this Xamarin.Forms.TabbedPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ClassIdProperty, value, mode);
    public static Xamarin.Forms.TabbedPage ClassId<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.ClassIdProperty, value, selector);
    public static Xamarin.Forms.TabbedPage BindingContext(this Xamarin.Forms.TabbedPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BindingContextProperty, value);
    public static Xamarin.Forms.TabbedPage BindingContext(this Xamarin.Forms.TabbedPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BindingContextProperty, value, mode);
    public static Xamarin.Forms.TabbedPage BindingContext<TFrom>(this Xamarin.Forms.TabbedPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.TabbedPage.BindingContextProperty, value, selector);
  }

  public static partial class ContentPageExtensions {
    public static Xamarin.Forms.ContentPage Content(this Xamarin.Forms.ContentPage obj, Xamarin.Forms.View value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ContentProperty, value);
    public static Xamarin.Forms.ContentPage Content(this Xamarin.Forms.ContentPage obj, BindableValue<Xamarin.Forms.View> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ContentProperty, value, mode);
    public static Xamarin.Forms.ContentPage Content<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.View> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ContentProperty, value, selector);
    public static Xamarin.Forms.ContentPage ControlTemplate(this Xamarin.Forms.ContentPage obj, Xamarin.Forms.ControlTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ControlTemplateProperty, value);
    public static Xamarin.Forms.ContentPage ControlTemplate(this Xamarin.Forms.ContentPage obj, BindableValue<Xamarin.Forms.ControlTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ControlTemplateProperty, value, mode);
    public static Xamarin.Forms.ContentPage ControlTemplate<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ControlTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ControlTemplateProperty, value, selector);
    public static Xamarin.Forms.ContentPage BackgroundImage(this Xamarin.Forms.ContentPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BackgroundImageProperty, value);
    public static Xamarin.Forms.ContentPage BackgroundImage(this Xamarin.Forms.ContentPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BackgroundImageProperty, value, mode);
    public static Xamarin.Forms.ContentPage BackgroundImage<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BackgroundImageProperty, value, selector);
    public static Xamarin.Forms.ContentPage IsBusy(this Xamarin.Forms.ContentPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsBusyProperty, value);
    public static Xamarin.Forms.ContentPage IsBusy(this Xamarin.Forms.ContentPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsBusyProperty, value, mode);
    public static Xamarin.Forms.ContentPage IsBusy<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsBusyProperty, value, selector);
    public static Xamarin.Forms.ContentPage Padding(this Xamarin.Forms.ContentPage obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.PaddingProperty, value);
    public static Xamarin.Forms.ContentPage Padding(this Xamarin.Forms.ContentPage obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.PaddingProperty, value, mode);
    public static Xamarin.Forms.ContentPage Padding<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.PaddingProperty, value, selector);
    public static Xamarin.Forms.ContentPage Title(this Xamarin.Forms.ContentPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TitleProperty, value);
    public static Xamarin.Forms.ContentPage Title(this Xamarin.Forms.ContentPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TitleProperty, value, mode);
    public static Xamarin.Forms.ContentPage Title<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TitleProperty, value, selector);
    public static Xamarin.Forms.ContentPage Icon(this Xamarin.Forms.ContentPage obj, Xamarin.Forms.FileImageSource value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IconProperty, value);
    public static Xamarin.Forms.ContentPage Icon(this Xamarin.Forms.ContentPage obj, BindableValue<Xamarin.Forms.FileImageSource> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IconProperty, value, mode);
    public static Xamarin.Forms.ContentPage Icon<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.FileImageSource> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IconProperty, value, selector);
    public static Xamarin.Forms.ContentPage Navigation(this Xamarin.Forms.ContentPage obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.NavigationProperty, value);
    public static Xamarin.Forms.ContentPage Navigation(this Xamarin.Forms.ContentPage obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.NavigationProperty, value, mode);
    public static Xamarin.Forms.ContentPage Navigation<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.NavigationProperty, value, selector);
    public static Xamarin.Forms.ContentPage InputTransparent(this Xamarin.Forms.ContentPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.InputTransparentProperty, value);
    public static Xamarin.Forms.ContentPage InputTransparent(this Xamarin.Forms.ContentPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.ContentPage InputTransparent<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.ContentPage IsEnabled(this Xamarin.Forms.ContentPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsEnabledProperty, value);
    public static Xamarin.Forms.ContentPage IsEnabled(this Xamarin.Forms.ContentPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ContentPage IsEnabled<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ContentPage X(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.XProperty, value);
    public static Xamarin.Forms.ContentPage X(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.XProperty, value, mode);
    public static Xamarin.Forms.ContentPage X<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.XProperty, value, selector);
    public static Xamarin.Forms.ContentPage Y(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.YProperty, value);
    public static Xamarin.Forms.ContentPage Y(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.YProperty, value, mode);
    public static Xamarin.Forms.ContentPage Y<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.YProperty, value, selector);
    public static Xamarin.Forms.ContentPage AnchorX(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.AnchorXProperty, value);
    public static Xamarin.Forms.ContentPage AnchorX(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.AnchorXProperty, value, mode);
    public static Xamarin.Forms.ContentPage AnchorX<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.AnchorXProperty, value, selector);
    public static Xamarin.Forms.ContentPage AnchorY(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.AnchorYProperty, value);
    public static Xamarin.Forms.ContentPage AnchorY(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.AnchorYProperty, value, mode);
    public static Xamarin.Forms.ContentPage AnchorY<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.AnchorYProperty, value, selector);
    public static Xamarin.Forms.ContentPage TranslationX(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TranslationXProperty, value);
    public static Xamarin.Forms.ContentPage TranslationX(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TranslationXProperty, value, mode);
    public static Xamarin.Forms.ContentPage TranslationX<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TranslationXProperty, value, selector);
    public static Xamarin.Forms.ContentPage TranslationY(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TranslationYProperty, value);
    public static Xamarin.Forms.ContentPage TranslationY(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TranslationYProperty, value, mode);
    public static Xamarin.Forms.ContentPage TranslationY<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TranslationYProperty, value, selector);
    public static Xamarin.Forms.ContentPage Width(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.WidthProperty, value);
    public static Xamarin.Forms.ContentPage Width(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.WidthProperty, value, mode);
    public static Xamarin.Forms.ContentPage Width<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.WidthProperty, value, selector);
    public static Xamarin.Forms.ContentPage Height(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.HeightProperty, value);
    public static Xamarin.Forms.ContentPage Height(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.HeightProperty, value, mode);
    public static Xamarin.Forms.ContentPage Height<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.HeightProperty, value, selector);
    public static Xamarin.Forms.ContentPage Rotation(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationProperty, value);
    public static Xamarin.Forms.ContentPage Rotation(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationProperty, value, mode);
    public static Xamarin.Forms.ContentPage Rotation<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationProperty, value, selector);
    public static Xamarin.Forms.ContentPage RotationX(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationXProperty, value);
    public static Xamarin.Forms.ContentPage RotationX(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationXProperty, value, mode);
    public static Xamarin.Forms.ContentPage RotationX<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationXProperty, value, selector);
    public static Xamarin.Forms.ContentPage RotationY(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationYProperty, value);
    public static Xamarin.Forms.ContentPage RotationY(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationYProperty, value, mode);
    public static Xamarin.Forms.ContentPage RotationY<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.RotationYProperty, value, selector);
    public static Xamarin.Forms.ContentPage Scale(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ScaleProperty, value);
    public static Xamarin.Forms.ContentPage Scale(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ScaleProperty, value, mode);
    public static Xamarin.Forms.ContentPage Scale<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ScaleProperty, value, selector);
    public static Xamarin.Forms.ContentPage IsVisible(this Xamarin.Forms.ContentPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsVisibleProperty, value);
    public static Xamarin.Forms.ContentPage IsVisible(this Xamarin.Forms.ContentPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.ContentPage IsVisible<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.ContentPage Opacity(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.OpacityProperty, value);
    public static Xamarin.Forms.ContentPage Opacity(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.OpacityProperty, value, mode);
    public static Xamarin.Forms.ContentPage Opacity<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.OpacityProperty, value, selector);
    public static Xamarin.Forms.ContentPage BackgroundColor(this Xamarin.Forms.ContentPage obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BackgroundColorProperty, value);
    public static Xamarin.Forms.ContentPage BackgroundColor(this Xamarin.Forms.ContentPage obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.ContentPage BackgroundColor<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.ContentPage Behaviors(this Xamarin.Forms.ContentPage obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BehaviorsProperty, value);
    public static Xamarin.Forms.ContentPage Behaviors(this Xamarin.Forms.ContentPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.ContentPage Behaviors<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.ContentPage Triggers(this Xamarin.Forms.ContentPage obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TriggersProperty, value);
    public static Xamarin.Forms.ContentPage Triggers(this Xamarin.Forms.ContentPage obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TriggersProperty, value, mode);
    public static Xamarin.Forms.ContentPage Triggers<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.TriggersProperty, value, selector);
    public static Xamarin.Forms.ContentPage Style(this Xamarin.Forms.ContentPage obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.StyleProperty, value);
    public static Xamarin.Forms.ContentPage Style(this Xamarin.Forms.ContentPage obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.StyleProperty, value, mode);
    public static Xamarin.Forms.ContentPage Style<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.StyleProperty, value, selector);
    public static Xamarin.Forms.ContentPage WidthRequest(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.WidthRequestProperty, value);
    public static Xamarin.Forms.ContentPage WidthRequest(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPage WidthRequest<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPage HeightRequest(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.HeightRequestProperty, value);
    public static Xamarin.Forms.ContentPage HeightRequest(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPage HeightRequest<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPage MinimumWidthRequest(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.ContentPage MinimumWidthRequest(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPage MinimumWidthRequest<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPage MinimumHeightRequest(this Xamarin.Forms.ContentPage obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.ContentPage MinimumHeightRequest(this Xamarin.Forms.ContentPage obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.ContentPage MinimumHeightRequest<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.ContentPage IsFocused(this Xamarin.Forms.ContentPage obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsFocusedProperty, value);
    public static Xamarin.Forms.ContentPage IsFocused(this Xamarin.Forms.ContentPage obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.ContentPage IsFocused<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.ContentPage ClassId(this Xamarin.Forms.ContentPage obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ClassIdProperty, value);
    public static Xamarin.Forms.ContentPage ClassId(this Xamarin.Forms.ContentPage obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ContentPage ClassId<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ContentPage BindingContext(this Xamarin.Forms.ContentPage obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BindingContextProperty, value);
    public static Xamarin.Forms.ContentPage BindingContext(this Xamarin.Forms.ContentPage obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ContentPage BindingContext<TFrom>(this Xamarin.Forms.ContentPage obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentPage.BindingContextProperty, value, selector);
  }

  public static partial class AbsoluteLayoutExtensions {
    public static Xamarin.Forms.AbsoluteLayout IsClippedToBounds(this Xamarin.Forms.AbsoluteLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.AbsoluteLayout IsClippedToBounds(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout IsClippedToBounds<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Padding(this Xamarin.Forms.AbsoluteLayout obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.PaddingProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Padding(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.PaddingProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Padding<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.PaddingProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout VerticalOptions(this Xamarin.Forms.AbsoluteLayout obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.VerticalOptionsProperty, value);
    public static Xamarin.Forms.AbsoluteLayout VerticalOptions(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout VerticalOptions<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout HorizontalOptions(this Xamarin.Forms.AbsoluteLayout obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.AbsoluteLayout HorizontalOptions(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout HorizontalOptions<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Margin(this Xamarin.Forms.AbsoluteLayout obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MarginProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Margin(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MarginProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Margin<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MarginProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Navigation(this Xamarin.Forms.AbsoluteLayout obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.NavigationProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Navigation(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.NavigationProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Navigation<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.NavigationProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout InputTransparent(this Xamarin.Forms.AbsoluteLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.InputTransparentProperty, value);
    public static Xamarin.Forms.AbsoluteLayout InputTransparent(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout InputTransparent<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout IsEnabled(this Xamarin.Forms.AbsoluteLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsEnabledProperty, value);
    public static Xamarin.Forms.AbsoluteLayout IsEnabled(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout IsEnabled<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout X(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.XProperty, value);
    public static Xamarin.Forms.AbsoluteLayout X(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.XProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout X<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.XProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Y(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.YProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Y(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.YProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Y<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.YProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout AnchorX(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.AnchorXProperty, value);
    public static Xamarin.Forms.AbsoluteLayout AnchorX(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.AnchorXProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout AnchorX<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.AnchorXProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout AnchorY(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.AnchorYProperty, value);
    public static Xamarin.Forms.AbsoluteLayout AnchorY(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.AnchorYProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout AnchorY<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.AnchorYProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout TranslationX(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TranslationXProperty, value);
    public static Xamarin.Forms.AbsoluteLayout TranslationX(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TranslationXProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout TranslationX<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TranslationXProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout TranslationY(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TranslationYProperty, value);
    public static Xamarin.Forms.AbsoluteLayout TranslationY(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TranslationYProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout TranslationY<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TranslationYProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Width(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.WidthProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Width(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.WidthProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Width<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.WidthProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Height(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HeightProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Height(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HeightProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Height<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HeightProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Rotation(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Rotation(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Rotation<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout RotationX(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationXProperty, value);
    public static Xamarin.Forms.AbsoluteLayout RotationX(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationXProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout RotationX<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationXProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout RotationY(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationYProperty, value);
    public static Xamarin.Forms.AbsoluteLayout RotationY(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationYProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout RotationY<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.RotationYProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Scale(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.ScaleProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Scale(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.ScaleProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Scale<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.ScaleProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout IsVisible(this Xamarin.Forms.AbsoluteLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsVisibleProperty, value);
    public static Xamarin.Forms.AbsoluteLayout IsVisible(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout IsVisible<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Opacity(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.OpacityProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Opacity(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.OpacityProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Opacity<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.OpacityProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout BackgroundColor(this Xamarin.Forms.AbsoluteLayout obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BackgroundColorProperty, value);
    public static Xamarin.Forms.AbsoluteLayout BackgroundColor(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout BackgroundColor<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Behaviors(this Xamarin.Forms.AbsoluteLayout obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BehaviorsProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Behaviors(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Behaviors<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Triggers(this Xamarin.Forms.AbsoluteLayout obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TriggersProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Triggers(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TriggersProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Triggers<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.TriggersProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout Style(this Xamarin.Forms.AbsoluteLayout obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.StyleProperty, value);
    public static Xamarin.Forms.AbsoluteLayout Style(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.StyleProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout Style<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.StyleProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout WidthRequest(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.WidthRequestProperty, value);
    public static Xamarin.Forms.AbsoluteLayout WidthRequest(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout WidthRequest<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout HeightRequest(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HeightRequestProperty, value);
    public static Xamarin.Forms.AbsoluteLayout HeightRequest(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout HeightRequest<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout MinimumWidthRequest(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.AbsoluteLayout MinimumWidthRequest(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout MinimumWidthRequest<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout MinimumHeightRequest(this Xamarin.Forms.AbsoluteLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.AbsoluteLayout MinimumHeightRequest(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout MinimumHeightRequest<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout IsFocused(this Xamarin.Forms.AbsoluteLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsFocusedProperty, value);
    public static Xamarin.Forms.AbsoluteLayout IsFocused(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout IsFocused<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout ClassId(this Xamarin.Forms.AbsoluteLayout obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.ClassIdProperty, value);
    public static Xamarin.Forms.AbsoluteLayout ClassId(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.ClassIdProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout ClassId<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.ClassIdProperty, value, selector);
    public static Xamarin.Forms.AbsoluteLayout BindingContext(this Xamarin.Forms.AbsoluteLayout obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BindingContextProperty, value);
    public static Xamarin.Forms.AbsoluteLayout BindingContext(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BindingContextProperty, value, mode);
    public static Xamarin.Forms.AbsoluteLayout BindingContext<TFrom>(this Xamarin.Forms.AbsoluteLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.AbsoluteLayout.BindingContextProperty, value, selector);
  }

  public static partial class ContentViewExtensions {
    public static Xamarin.Forms.ContentView Content(this Xamarin.Forms.ContentView obj, Xamarin.Forms.View value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ContentProperty, value);
    public static Xamarin.Forms.ContentView Content(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.View> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ContentProperty, value, mode);
    public static Xamarin.Forms.ContentView Content<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.View> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ContentProperty, value, selector);
    public static Xamarin.Forms.ContentView ControlTemplate(this Xamarin.Forms.ContentView obj, Xamarin.Forms.ControlTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ControlTemplateProperty, value);
    public static Xamarin.Forms.ContentView ControlTemplate(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.ControlTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ControlTemplateProperty, value, mode);
    public static Xamarin.Forms.ContentView ControlTemplate<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ControlTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ControlTemplateProperty, value, selector);
    public static Xamarin.Forms.ContentView IsClippedToBounds(this Xamarin.Forms.ContentView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.ContentView IsClippedToBounds(this Xamarin.Forms.ContentView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.ContentView IsClippedToBounds<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.ContentView Padding(this Xamarin.Forms.ContentView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.PaddingProperty, value);
    public static Xamarin.Forms.ContentView Padding(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.PaddingProperty, value, mode);
    public static Xamarin.Forms.ContentView Padding<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.PaddingProperty, value, selector);
    public static Xamarin.Forms.ContentView VerticalOptions(this Xamarin.Forms.ContentView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.VerticalOptionsProperty, value);
    public static Xamarin.Forms.ContentView VerticalOptions(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.ContentView VerticalOptions<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.ContentView HorizontalOptions(this Xamarin.Forms.ContentView obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.ContentView HorizontalOptions(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.ContentView HorizontalOptions<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.ContentView Margin(this Xamarin.Forms.ContentView obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MarginProperty, value);
    public static Xamarin.Forms.ContentView Margin(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MarginProperty, value, mode);
    public static Xamarin.Forms.ContentView Margin<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MarginProperty, value, selector);
    public static Xamarin.Forms.ContentView Navigation(this Xamarin.Forms.ContentView obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.NavigationProperty, value);
    public static Xamarin.Forms.ContentView Navigation(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.NavigationProperty, value, mode);
    public static Xamarin.Forms.ContentView Navigation<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.NavigationProperty, value, selector);
    public static Xamarin.Forms.ContentView InputTransparent(this Xamarin.Forms.ContentView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.InputTransparentProperty, value);
    public static Xamarin.Forms.ContentView InputTransparent(this Xamarin.Forms.ContentView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.ContentView InputTransparent<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.ContentView IsEnabled(this Xamarin.Forms.ContentView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsEnabledProperty, value);
    public static Xamarin.Forms.ContentView IsEnabled(this Xamarin.Forms.ContentView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.ContentView IsEnabled<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.ContentView X(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.XProperty, value);
    public static Xamarin.Forms.ContentView X(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.XProperty, value, mode);
    public static Xamarin.Forms.ContentView X<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.XProperty, value, selector);
    public static Xamarin.Forms.ContentView Y(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.YProperty, value);
    public static Xamarin.Forms.ContentView Y(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.YProperty, value, mode);
    public static Xamarin.Forms.ContentView Y<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.YProperty, value, selector);
    public static Xamarin.Forms.ContentView AnchorX(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.AnchorXProperty, value);
    public static Xamarin.Forms.ContentView AnchorX(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.AnchorXProperty, value, mode);
    public static Xamarin.Forms.ContentView AnchorX<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.AnchorXProperty, value, selector);
    public static Xamarin.Forms.ContentView AnchorY(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.AnchorYProperty, value);
    public static Xamarin.Forms.ContentView AnchorY(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.AnchorYProperty, value, mode);
    public static Xamarin.Forms.ContentView AnchorY<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.AnchorYProperty, value, selector);
    public static Xamarin.Forms.ContentView TranslationX(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TranslationXProperty, value);
    public static Xamarin.Forms.ContentView TranslationX(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TranslationXProperty, value, mode);
    public static Xamarin.Forms.ContentView TranslationX<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TranslationXProperty, value, selector);
    public static Xamarin.Forms.ContentView TranslationY(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TranslationYProperty, value);
    public static Xamarin.Forms.ContentView TranslationY(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TranslationYProperty, value, mode);
    public static Xamarin.Forms.ContentView TranslationY<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TranslationYProperty, value, selector);
    public static Xamarin.Forms.ContentView Width(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.WidthProperty, value);
    public static Xamarin.Forms.ContentView Width(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.WidthProperty, value, mode);
    public static Xamarin.Forms.ContentView Width<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.WidthProperty, value, selector);
    public static Xamarin.Forms.ContentView Height(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HeightProperty, value);
    public static Xamarin.Forms.ContentView Height(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HeightProperty, value, mode);
    public static Xamarin.Forms.ContentView Height<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HeightProperty, value, selector);
    public static Xamarin.Forms.ContentView Rotation(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationProperty, value);
    public static Xamarin.Forms.ContentView Rotation(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationProperty, value, mode);
    public static Xamarin.Forms.ContentView Rotation<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationProperty, value, selector);
    public static Xamarin.Forms.ContentView RotationX(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationXProperty, value);
    public static Xamarin.Forms.ContentView RotationX(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationXProperty, value, mode);
    public static Xamarin.Forms.ContentView RotationX<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationXProperty, value, selector);
    public static Xamarin.Forms.ContentView RotationY(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationYProperty, value);
    public static Xamarin.Forms.ContentView RotationY(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationYProperty, value, mode);
    public static Xamarin.Forms.ContentView RotationY<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.RotationYProperty, value, selector);
    public static Xamarin.Forms.ContentView Scale(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ScaleProperty, value);
    public static Xamarin.Forms.ContentView Scale(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ScaleProperty, value, mode);
    public static Xamarin.Forms.ContentView Scale<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ScaleProperty, value, selector);
    public static Xamarin.Forms.ContentView IsVisible(this Xamarin.Forms.ContentView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsVisibleProperty, value);
    public static Xamarin.Forms.ContentView IsVisible(this Xamarin.Forms.ContentView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.ContentView IsVisible<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.ContentView Opacity(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.OpacityProperty, value);
    public static Xamarin.Forms.ContentView Opacity(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.OpacityProperty, value, mode);
    public static Xamarin.Forms.ContentView Opacity<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.OpacityProperty, value, selector);
    public static Xamarin.Forms.ContentView BackgroundColor(this Xamarin.Forms.ContentView obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BackgroundColorProperty, value);
    public static Xamarin.Forms.ContentView BackgroundColor(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.ContentView BackgroundColor<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.ContentView Behaviors(this Xamarin.Forms.ContentView obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BehaviorsProperty, value);
    public static Xamarin.Forms.ContentView Behaviors(this Xamarin.Forms.ContentView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.ContentView Behaviors<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.ContentView Triggers(this Xamarin.Forms.ContentView obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TriggersProperty, value);
    public static Xamarin.Forms.ContentView Triggers(this Xamarin.Forms.ContentView obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TriggersProperty, value, mode);
    public static Xamarin.Forms.ContentView Triggers<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.TriggersProperty, value, selector);
    public static Xamarin.Forms.ContentView Style(this Xamarin.Forms.ContentView obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.StyleProperty, value);
    public static Xamarin.Forms.ContentView Style(this Xamarin.Forms.ContentView obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.StyleProperty, value, mode);
    public static Xamarin.Forms.ContentView Style<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.StyleProperty, value, selector);
    public static Xamarin.Forms.ContentView WidthRequest(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.WidthRequestProperty, value);
    public static Xamarin.Forms.ContentView WidthRequest(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.ContentView WidthRequest<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.ContentView HeightRequest(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HeightRequestProperty, value);
    public static Xamarin.Forms.ContentView HeightRequest(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.ContentView HeightRequest<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.ContentView MinimumWidthRequest(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.ContentView MinimumWidthRequest(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.ContentView MinimumWidthRequest<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.ContentView MinimumHeightRequest(this Xamarin.Forms.ContentView obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.ContentView MinimumHeightRequest(this Xamarin.Forms.ContentView obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.ContentView MinimumHeightRequest<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.ContentView IsFocused(this Xamarin.Forms.ContentView obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsFocusedProperty, value);
    public static Xamarin.Forms.ContentView IsFocused(this Xamarin.Forms.ContentView obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.ContentView IsFocused<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.ContentView ClassId(this Xamarin.Forms.ContentView obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ClassIdProperty, value);
    public static Xamarin.Forms.ContentView ClassId(this Xamarin.Forms.ContentView obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ClassIdProperty, value, mode);
    public static Xamarin.Forms.ContentView ClassId<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.ClassIdProperty, value, selector);
    public static Xamarin.Forms.ContentView BindingContext(this Xamarin.Forms.ContentView obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BindingContextProperty, value);
    public static Xamarin.Forms.ContentView BindingContext(this Xamarin.Forms.ContentView obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BindingContextProperty, value, mode);
    public static Xamarin.Forms.ContentView BindingContext<TFrom>(this Xamarin.Forms.ContentView obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.ContentView.BindingContextProperty, value, selector);
  }

  public static partial class RelativeLayoutExtensions {
    public static Xamarin.Forms.RelativeLayout IsClippedToBounds(this Xamarin.Forms.RelativeLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.RelativeLayout IsClippedToBounds(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout IsClippedToBounds<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Padding(this Xamarin.Forms.RelativeLayout obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.PaddingProperty, value);
    public static Xamarin.Forms.RelativeLayout Padding(this Xamarin.Forms.RelativeLayout obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.PaddingProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Padding<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.PaddingProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout VerticalOptions(this Xamarin.Forms.RelativeLayout obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.VerticalOptionsProperty, value);
    public static Xamarin.Forms.RelativeLayout VerticalOptions(this Xamarin.Forms.RelativeLayout obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout VerticalOptions<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout HorizontalOptions(this Xamarin.Forms.RelativeLayout obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.RelativeLayout HorizontalOptions(this Xamarin.Forms.RelativeLayout obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout HorizontalOptions<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Margin(this Xamarin.Forms.RelativeLayout obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MarginProperty, value);
    public static Xamarin.Forms.RelativeLayout Margin(this Xamarin.Forms.RelativeLayout obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MarginProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Margin<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MarginProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Navigation(this Xamarin.Forms.RelativeLayout obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.NavigationProperty, value);
    public static Xamarin.Forms.RelativeLayout Navigation(this Xamarin.Forms.RelativeLayout obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.NavigationProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Navigation<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.NavigationProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout InputTransparent(this Xamarin.Forms.RelativeLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.InputTransparentProperty, value);
    public static Xamarin.Forms.RelativeLayout InputTransparent(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout InputTransparent<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout IsEnabled(this Xamarin.Forms.RelativeLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsEnabledProperty, value);
    public static Xamarin.Forms.RelativeLayout IsEnabled(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout IsEnabled<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout X(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.XProperty, value);
    public static Xamarin.Forms.RelativeLayout X(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.XProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout X<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.XProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Y(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.YProperty, value);
    public static Xamarin.Forms.RelativeLayout Y(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.YProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Y<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.YProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout AnchorX(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.AnchorXProperty, value);
    public static Xamarin.Forms.RelativeLayout AnchorX(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.AnchorXProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout AnchorX<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.AnchorXProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout AnchorY(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.AnchorYProperty, value);
    public static Xamarin.Forms.RelativeLayout AnchorY(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.AnchorYProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout AnchorY<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.AnchorYProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout TranslationX(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TranslationXProperty, value);
    public static Xamarin.Forms.RelativeLayout TranslationX(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TranslationXProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout TranslationX<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TranslationXProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout TranslationY(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TranslationYProperty, value);
    public static Xamarin.Forms.RelativeLayout TranslationY(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TranslationYProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout TranslationY<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TranslationYProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Width(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.WidthProperty, value);
    public static Xamarin.Forms.RelativeLayout Width(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.WidthProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Width<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.WidthProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Height(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HeightProperty, value);
    public static Xamarin.Forms.RelativeLayout Height(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HeightProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Height<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HeightProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Rotation(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationProperty, value);
    public static Xamarin.Forms.RelativeLayout Rotation(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Rotation<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout RotationX(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationXProperty, value);
    public static Xamarin.Forms.RelativeLayout RotationX(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationXProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout RotationX<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationXProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout RotationY(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationYProperty, value);
    public static Xamarin.Forms.RelativeLayout RotationY(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationYProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout RotationY<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.RotationYProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Scale(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.ScaleProperty, value);
    public static Xamarin.Forms.RelativeLayout Scale(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.ScaleProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Scale<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.ScaleProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout IsVisible(this Xamarin.Forms.RelativeLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsVisibleProperty, value);
    public static Xamarin.Forms.RelativeLayout IsVisible(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout IsVisible<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Opacity(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.OpacityProperty, value);
    public static Xamarin.Forms.RelativeLayout Opacity(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.OpacityProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Opacity<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.OpacityProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout BackgroundColor(this Xamarin.Forms.RelativeLayout obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BackgroundColorProperty, value);
    public static Xamarin.Forms.RelativeLayout BackgroundColor(this Xamarin.Forms.RelativeLayout obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout BackgroundColor<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Behaviors(this Xamarin.Forms.RelativeLayout obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BehaviorsProperty, value);
    public static Xamarin.Forms.RelativeLayout Behaviors(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Behaviors<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Triggers(this Xamarin.Forms.RelativeLayout obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TriggersProperty, value);
    public static Xamarin.Forms.RelativeLayout Triggers(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TriggersProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Triggers<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.TriggersProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout Style(this Xamarin.Forms.RelativeLayout obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.StyleProperty, value);
    public static Xamarin.Forms.RelativeLayout Style(this Xamarin.Forms.RelativeLayout obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.StyleProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout Style<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.StyleProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout WidthRequest(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.WidthRequestProperty, value);
    public static Xamarin.Forms.RelativeLayout WidthRequest(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout WidthRequest<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout HeightRequest(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HeightRequestProperty, value);
    public static Xamarin.Forms.RelativeLayout HeightRequest(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout HeightRequest<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout MinimumWidthRequest(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.RelativeLayout MinimumWidthRequest(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout MinimumWidthRequest<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout MinimumHeightRequest(this Xamarin.Forms.RelativeLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.RelativeLayout MinimumHeightRequest(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout MinimumHeightRequest<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout IsFocused(this Xamarin.Forms.RelativeLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsFocusedProperty, value);
    public static Xamarin.Forms.RelativeLayout IsFocused(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout IsFocused<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout ClassId(this Xamarin.Forms.RelativeLayout obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.ClassIdProperty, value);
    public static Xamarin.Forms.RelativeLayout ClassId(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.ClassIdProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout ClassId<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.ClassIdProperty, value, selector);
    public static Xamarin.Forms.RelativeLayout BindingContext(this Xamarin.Forms.RelativeLayout obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BindingContextProperty, value);
    public static Xamarin.Forms.RelativeLayout BindingContext(this Xamarin.Forms.RelativeLayout obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BindingContextProperty, value, mode);
    public static Xamarin.Forms.RelativeLayout BindingContext<TFrom>(this Xamarin.Forms.RelativeLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.RelativeLayout.BindingContextProperty, value, selector);
  }

  public static partial class StackLayoutExtensions {
    public static Xamarin.Forms.StackLayout Orientation(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.StackOrientation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.OrientationProperty, value);
    public static Xamarin.Forms.StackLayout Orientation(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.StackOrientation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.OrientationProperty, value, mode);
    public static Xamarin.Forms.StackLayout Orientation<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.StackOrientation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.OrientationProperty, value, selector);
    public static Xamarin.Forms.StackLayout Spacing(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.SpacingProperty, value);
    public static Xamarin.Forms.StackLayout Spacing(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.SpacingProperty, value, mode);
    public static Xamarin.Forms.StackLayout Spacing<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.SpacingProperty, value, selector);
    public static Xamarin.Forms.StackLayout IsClippedToBounds(this Xamarin.Forms.StackLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.StackLayout IsClippedToBounds(this Xamarin.Forms.StackLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.StackLayout IsClippedToBounds<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.StackLayout Padding(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.PaddingProperty, value);
    public static Xamarin.Forms.StackLayout Padding(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.PaddingProperty, value, mode);
    public static Xamarin.Forms.StackLayout Padding<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.PaddingProperty, value, selector);
    public static Xamarin.Forms.StackLayout VerticalOptions(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.VerticalOptionsProperty, value);
    public static Xamarin.Forms.StackLayout VerticalOptions(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.StackLayout VerticalOptions<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.StackLayout HorizontalOptions(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.StackLayout HorizontalOptions(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.StackLayout HorizontalOptions<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.StackLayout Margin(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MarginProperty, value);
    public static Xamarin.Forms.StackLayout Margin(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MarginProperty, value, mode);
    public static Xamarin.Forms.StackLayout Margin<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MarginProperty, value, selector);
    public static Xamarin.Forms.StackLayout Navigation(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.NavigationProperty, value);
    public static Xamarin.Forms.StackLayout Navigation(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.NavigationProperty, value, mode);
    public static Xamarin.Forms.StackLayout Navigation<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.NavigationProperty, value, selector);
    public static Xamarin.Forms.StackLayout InputTransparent(this Xamarin.Forms.StackLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.InputTransparentProperty, value);
    public static Xamarin.Forms.StackLayout InputTransparent(this Xamarin.Forms.StackLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.StackLayout InputTransparent<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.StackLayout IsEnabled(this Xamarin.Forms.StackLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsEnabledProperty, value);
    public static Xamarin.Forms.StackLayout IsEnabled(this Xamarin.Forms.StackLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.StackLayout IsEnabled<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.StackLayout X(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.XProperty, value);
    public static Xamarin.Forms.StackLayout X(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.XProperty, value, mode);
    public static Xamarin.Forms.StackLayout X<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.XProperty, value, selector);
    public static Xamarin.Forms.StackLayout Y(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.YProperty, value);
    public static Xamarin.Forms.StackLayout Y(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.YProperty, value, mode);
    public static Xamarin.Forms.StackLayout Y<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.YProperty, value, selector);
    public static Xamarin.Forms.StackLayout AnchorX(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.AnchorXProperty, value);
    public static Xamarin.Forms.StackLayout AnchorX(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.AnchorXProperty, value, mode);
    public static Xamarin.Forms.StackLayout AnchorX<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.AnchorXProperty, value, selector);
    public static Xamarin.Forms.StackLayout AnchorY(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.AnchorYProperty, value);
    public static Xamarin.Forms.StackLayout AnchorY(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.AnchorYProperty, value, mode);
    public static Xamarin.Forms.StackLayout AnchorY<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.AnchorYProperty, value, selector);
    public static Xamarin.Forms.StackLayout TranslationX(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TranslationXProperty, value);
    public static Xamarin.Forms.StackLayout TranslationX(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TranslationXProperty, value, mode);
    public static Xamarin.Forms.StackLayout TranslationX<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TranslationXProperty, value, selector);
    public static Xamarin.Forms.StackLayout TranslationY(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TranslationYProperty, value);
    public static Xamarin.Forms.StackLayout TranslationY(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TranslationYProperty, value, mode);
    public static Xamarin.Forms.StackLayout TranslationY<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TranslationYProperty, value, selector);
    public static Xamarin.Forms.StackLayout Width(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.WidthProperty, value);
    public static Xamarin.Forms.StackLayout Width(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.WidthProperty, value, mode);
    public static Xamarin.Forms.StackLayout Width<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.WidthProperty, value, selector);
    public static Xamarin.Forms.StackLayout Height(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HeightProperty, value);
    public static Xamarin.Forms.StackLayout Height(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HeightProperty, value, mode);
    public static Xamarin.Forms.StackLayout Height<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HeightProperty, value, selector);
    public static Xamarin.Forms.StackLayout Rotation(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationProperty, value);
    public static Xamarin.Forms.StackLayout Rotation(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationProperty, value, mode);
    public static Xamarin.Forms.StackLayout Rotation<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationProperty, value, selector);
    public static Xamarin.Forms.StackLayout RotationX(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationXProperty, value);
    public static Xamarin.Forms.StackLayout RotationX(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationXProperty, value, mode);
    public static Xamarin.Forms.StackLayout RotationX<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationXProperty, value, selector);
    public static Xamarin.Forms.StackLayout RotationY(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationYProperty, value);
    public static Xamarin.Forms.StackLayout RotationY(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationYProperty, value, mode);
    public static Xamarin.Forms.StackLayout RotationY<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.RotationYProperty, value, selector);
    public static Xamarin.Forms.StackLayout Scale(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.ScaleProperty, value);
    public static Xamarin.Forms.StackLayout Scale(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.ScaleProperty, value, mode);
    public static Xamarin.Forms.StackLayout Scale<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.ScaleProperty, value, selector);
    public static Xamarin.Forms.StackLayout IsVisible(this Xamarin.Forms.StackLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsVisibleProperty, value);
    public static Xamarin.Forms.StackLayout IsVisible(this Xamarin.Forms.StackLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.StackLayout IsVisible<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.StackLayout Opacity(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.OpacityProperty, value);
    public static Xamarin.Forms.StackLayout Opacity(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.OpacityProperty, value, mode);
    public static Xamarin.Forms.StackLayout Opacity<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.OpacityProperty, value, selector);
    public static Xamarin.Forms.StackLayout BackgroundColor(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BackgroundColorProperty, value);
    public static Xamarin.Forms.StackLayout BackgroundColor(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.StackLayout BackgroundColor<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.StackLayout Behaviors(this Xamarin.Forms.StackLayout obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BehaviorsProperty, value);
    public static Xamarin.Forms.StackLayout Behaviors(this Xamarin.Forms.StackLayout obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.StackLayout Behaviors<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.StackLayout Triggers(this Xamarin.Forms.StackLayout obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TriggersProperty, value);
    public static Xamarin.Forms.StackLayout Triggers(this Xamarin.Forms.StackLayout obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TriggersProperty, value, mode);
    public static Xamarin.Forms.StackLayout Triggers<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.TriggersProperty, value, selector);
    public static Xamarin.Forms.StackLayout Style(this Xamarin.Forms.StackLayout obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.StyleProperty, value);
    public static Xamarin.Forms.StackLayout Style(this Xamarin.Forms.StackLayout obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.StyleProperty, value, mode);
    public static Xamarin.Forms.StackLayout Style<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.StyleProperty, value, selector);
    public static Xamarin.Forms.StackLayout WidthRequest(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.WidthRequestProperty, value);
    public static Xamarin.Forms.StackLayout WidthRequest(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.StackLayout WidthRequest<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.StackLayout HeightRequest(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HeightRequestProperty, value);
    public static Xamarin.Forms.StackLayout HeightRequest(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.StackLayout HeightRequest<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.StackLayout MinimumWidthRequest(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.StackLayout MinimumWidthRequest(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.StackLayout MinimumWidthRequest<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.StackLayout MinimumHeightRequest(this Xamarin.Forms.StackLayout obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.StackLayout MinimumHeightRequest(this Xamarin.Forms.StackLayout obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.StackLayout MinimumHeightRequest<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.StackLayout IsFocused(this Xamarin.Forms.StackLayout obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsFocusedProperty, value);
    public static Xamarin.Forms.StackLayout IsFocused(this Xamarin.Forms.StackLayout obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.StackLayout IsFocused<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.StackLayout ClassId(this Xamarin.Forms.StackLayout obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.ClassIdProperty, value);
    public static Xamarin.Forms.StackLayout ClassId(this Xamarin.Forms.StackLayout obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.ClassIdProperty, value, mode);
    public static Xamarin.Forms.StackLayout ClassId<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.ClassIdProperty, value, selector);
    public static Xamarin.Forms.StackLayout BindingContext(this Xamarin.Forms.StackLayout obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BindingContextProperty, value);
    public static Xamarin.Forms.StackLayout BindingContext(this Xamarin.Forms.StackLayout obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BindingContextProperty, value, mode);
    public static Xamarin.Forms.StackLayout BindingContext<TFrom>(this Xamarin.Forms.StackLayout obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.StackLayout.BindingContextProperty, value, selector);
  }

  public static partial class GridExtensions {
    public static Xamarin.Forms.Grid RowSpacing(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RowSpacingProperty, value);
    public static Xamarin.Forms.Grid RowSpacing(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RowSpacingProperty, value, mode);
    public static Xamarin.Forms.Grid RowSpacing<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RowSpacingProperty, value, selector);
    public static Xamarin.Forms.Grid ColumnSpacing(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ColumnSpacingProperty, value);
    public static Xamarin.Forms.Grid ColumnSpacing(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ColumnSpacingProperty, value, mode);
    public static Xamarin.Forms.Grid ColumnSpacing<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ColumnSpacingProperty, value, selector);
    public static Xamarin.Forms.Grid ColumnDefinitions(this Xamarin.Forms.Grid obj, Xamarin.Forms.ColumnDefinitionCollection value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ColumnDefinitionsProperty, value);
    public static Xamarin.Forms.Grid ColumnDefinitions(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.ColumnDefinitionCollection> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ColumnDefinitionsProperty, value, mode);
    public static Xamarin.Forms.Grid ColumnDefinitions<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ColumnDefinitionCollection> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ColumnDefinitionsProperty, value, selector);
    public static Xamarin.Forms.Grid RowDefinitions(this Xamarin.Forms.Grid obj, Xamarin.Forms.RowDefinitionCollection value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RowDefinitionsProperty, value);
    public static Xamarin.Forms.Grid RowDefinitions(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.RowDefinitionCollection> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RowDefinitionsProperty, value, mode);
    public static Xamarin.Forms.Grid RowDefinitions<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.RowDefinitionCollection> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RowDefinitionsProperty, value, selector);
    public static Xamarin.Forms.Grid IsClippedToBounds(this Xamarin.Forms.Grid obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.Grid IsClippedToBounds(this Xamarin.Forms.Grid obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.Grid IsClippedToBounds<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.Grid Padding(this Xamarin.Forms.Grid obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.PaddingProperty, value);
    public static Xamarin.Forms.Grid Padding(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.PaddingProperty, value, mode);
    public static Xamarin.Forms.Grid Padding<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.PaddingProperty, value, selector);
    public static Xamarin.Forms.Grid VerticalOptions(this Xamarin.Forms.Grid obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Grid VerticalOptions(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Grid VerticalOptions<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Grid HorizontalOptions(this Xamarin.Forms.Grid obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Grid HorizontalOptions(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Grid HorizontalOptions<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Grid Margin(this Xamarin.Forms.Grid obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MarginProperty, value);
    public static Xamarin.Forms.Grid Margin(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MarginProperty, value, mode);
    public static Xamarin.Forms.Grid Margin<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MarginProperty, value, selector);
    public static Xamarin.Forms.Grid Navigation(this Xamarin.Forms.Grid obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.NavigationProperty, value);
    public static Xamarin.Forms.Grid Navigation(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.NavigationProperty, value, mode);
    public static Xamarin.Forms.Grid Navigation<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.NavigationProperty, value, selector);
    public static Xamarin.Forms.Grid InputTransparent(this Xamarin.Forms.Grid obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.InputTransparentProperty, value);
    public static Xamarin.Forms.Grid InputTransparent(this Xamarin.Forms.Grid obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Grid InputTransparent<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Grid IsEnabled(this Xamarin.Forms.Grid obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsEnabledProperty, value);
    public static Xamarin.Forms.Grid IsEnabled(this Xamarin.Forms.Grid obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Grid IsEnabled<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Grid X(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.XProperty, value);
    public static Xamarin.Forms.Grid X(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.XProperty, value, mode);
    public static Xamarin.Forms.Grid X<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.XProperty, value, selector);
    public static Xamarin.Forms.Grid Y(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.YProperty, value);
    public static Xamarin.Forms.Grid Y(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.YProperty, value, mode);
    public static Xamarin.Forms.Grid Y<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.YProperty, value, selector);
    public static Xamarin.Forms.Grid AnchorX(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.AnchorXProperty, value);
    public static Xamarin.Forms.Grid AnchorX(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Grid AnchorX<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Grid AnchorY(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.AnchorYProperty, value);
    public static Xamarin.Forms.Grid AnchorY(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Grid AnchorY<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Grid TranslationX(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TranslationXProperty, value);
    public static Xamarin.Forms.Grid TranslationX(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Grid TranslationX<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Grid TranslationY(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TranslationYProperty, value);
    public static Xamarin.Forms.Grid TranslationY(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Grid TranslationY<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Grid Width(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.WidthProperty, value);
    public static Xamarin.Forms.Grid Width(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.WidthProperty, value, mode);
    public static Xamarin.Forms.Grid Width<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.WidthProperty, value, selector);
    public static Xamarin.Forms.Grid Height(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HeightProperty, value);
    public static Xamarin.Forms.Grid Height(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HeightProperty, value, mode);
    public static Xamarin.Forms.Grid Height<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HeightProperty, value, selector);
    public static Xamarin.Forms.Grid Rotation(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationProperty, value);
    public static Xamarin.Forms.Grid Rotation(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationProperty, value, mode);
    public static Xamarin.Forms.Grid Rotation<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationProperty, value, selector);
    public static Xamarin.Forms.Grid RotationX(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationXProperty, value);
    public static Xamarin.Forms.Grid RotationX(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationXProperty, value, mode);
    public static Xamarin.Forms.Grid RotationX<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationXProperty, value, selector);
    public static Xamarin.Forms.Grid RotationY(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationYProperty, value);
    public static Xamarin.Forms.Grid RotationY(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationYProperty, value, mode);
    public static Xamarin.Forms.Grid RotationY<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.RotationYProperty, value, selector);
    public static Xamarin.Forms.Grid Scale(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ScaleProperty, value);
    public static Xamarin.Forms.Grid Scale(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ScaleProperty, value, mode);
    public static Xamarin.Forms.Grid Scale<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ScaleProperty, value, selector);
    public static Xamarin.Forms.Grid IsVisible(this Xamarin.Forms.Grid obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsVisibleProperty, value);
    public static Xamarin.Forms.Grid IsVisible(this Xamarin.Forms.Grid obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Grid IsVisible<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Grid Opacity(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.OpacityProperty, value);
    public static Xamarin.Forms.Grid Opacity(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.OpacityProperty, value, mode);
    public static Xamarin.Forms.Grid Opacity<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.OpacityProperty, value, selector);
    public static Xamarin.Forms.Grid BackgroundColor(this Xamarin.Forms.Grid obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BackgroundColorProperty, value);
    public static Xamarin.Forms.Grid BackgroundColor(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Grid BackgroundColor<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Grid Behaviors(this Xamarin.Forms.Grid obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BehaviorsProperty, value);
    public static Xamarin.Forms.Grid Behaviors(this Xamarin.Forms.Grid obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Grid Behaviors<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Grid Triggers(this Xamarin.Forms.Grid obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TriggersProperty, value);
    public static Xamarin.Forms.Grid Triggers(this Xamarin.Forms.Grid obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TriggersProperty, value, mode);
    public static Xamarin.Forms.Grid Triggers<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.TriggersProperty, value, selector);
    public static Xamarin.Forms.Grid Style(this Xamarin.Forms.Grid obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.StyleProperty, value);
    public static Xamarin.Forms.Grid Style(this Xamarin.Forms.Grid obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.StyleProperty, value, mode);
    public static Xamarin.Forms.Grid Style<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.StyleProperty, value, selector);
    public static Xamarin.Forms.Grid WidthRequest(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.WidthRequestProperty, value);
    public static Xamarin.Forms.Grid WidthRequest(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Grid WidthRequest<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Grid HeightRequest(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HeightRequestProperty, value);
    public static Xamarin.Forms.Grid HeightRequest(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Grid HeightRequest<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Grid MinimumWidthRequest(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Grid MinimumWidthRequest(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Grid MinimumWidthRequest<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Grid MinimumHeightRequest(this Xamarin.Forms.Grid obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Grid MinimumHeightRequest(this Xamarin.Forms.Grid obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Grid MinimumHeightRequest<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Grid IsFocused(this Xamarin.Forms.Grid obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsFocusedProperty, value);
    public static Xamarin.Forms.Grid IsFocused(this Xamarin.Forms.Grid obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Grid IsFocused<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Grid ClassId(this Xamarin.Forms.Grid obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ClassIdProperty, value);
    public static Xamarin.Forms.Grid ClassId(this Xamarin.Forms.Grid obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Grid ClassId<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Grid BindingContext(this Xamarin.Forms.Grid obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BindingContextProperty, value);
    public static Xamarin.Forms.Grid BindingContext(this Xamarin.Forms.Grid obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Grid BindingContext<TFrom>(this Xamarin.Forms.Grid obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Grid.BindingContextProperty, value, selector);
  }

  public static partial class FrameExtensions {
    public static Xamarin.Forms.Frame OutlineColor(this Xamarin.Forms.Frame obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.OutlineColorProperty, value);
    public static Xamarin.Forms.Frame OutlineColor(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.OutlineColorProperty, value, mode);
    public static Xamarin.Forms.Frame OutlineColor<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.OutlineColorProperty, value, selector);
    public static Xamarin.Forms.Frame HasShadow(this Xamarin.Forms.Frame obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HasShadowProperty, value);
    public static Xamarin.Forms.Frame HasShadow(this Xamarin.Forms.Frame obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HasShadowProperty, value, mode);
    public static Xamarin.Forms.Frame HasShadow<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HasShadowProperty, value, selector);
    public static Xamarin.Forms.Frame CornerRadius(this Xamarin.Forms.Frame obj, System.Single value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.CornerRadiusProperty, value);
    public static Xamarin.Forms.Frame CornerRadius(this Xamarin.Forms.Frame obj, BindableValue<System.Single> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.CornerRadiusProperty, value, mode);
    public static Xamarin.Forms.Frame CornerRadius<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Single> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.CornerRadiusProperty, value, selector);
    public static Xamarin.Forms.Frame Content(this Xamarin.Forms.Frame obj, Xamarin.Forms.View value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ContentProperty, value);
    public static Xamarin.Forms.Frame Content(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.View> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ContentProperty, value, mode);
    public static Xamarin.Forms.Frame Content<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.View> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ContentProperty, value, selector);
    public static Xamarin.Forms.Frame ControlTemplate(this Xamarin.Forms.Frame obj, Xamarin.Forms.ControlTemplate value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ControlTemplateProperty, value);
    public static Xamarin.Forms.Frame ControlTemplate(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.ControlTemplate> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ControlTemplateProperty, value, mode);
    public static Xamarin.Forms.Frame ControlTemplate<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.ControlTemplate> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ControlTemplateProperty, value, selector);
    public static Xamarin.Forms.Frame IsClippedToBounds(this Xamarin.Forms.Frame obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsClippedToBoundsProperty, value);
    public static Xamarin.Forms.Frame IsClippedToBounds(this Xamarin.Forms.Frame obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsClippedToBoundsProperty, value, mode);
    public static Xamarin.Forms.Frame IsClippedToBounds<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsClippedToBoundsProperty, value, selector);
    public static Xamarin.Forms.Frame Padding(this Xamarin.Forms.Frame obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.PaddingProperty, value);
    public static Xamarin.Forms.Frame Padding(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.PaddingProperty, value, mode);
    public static Xamarin.Forms.Frame Padding<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.PaddingProperty, value, selector);
    public static Xamarin.Forms.Frame VerticalOptions(this Xamarin.Forms.Frame obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.VerticalOptionsProperty, value);
    public static Xamarin.Forms.Frame VerticalOptions(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.VerticalOptionsProperty, value, mode);
    public static Xamarin.Forms.Frame VerticalOptions<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.VerticalOptionsProperty, value, selector);
    public static Xamarin.Forms.Frame HorizontalOptions(this Xamarin.Forms.Frame obj, Xamarin.Forms.LayoutOptions value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HorizontalOptionsProperty, value);
    public static Xamarin.Forms.Frame HorizontalOptions(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.LayoutOptions> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HorizontalOptionsProperty, value, mode);
    public static Xamarin.Forms.Frame HorizontalOptions<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.LayoutOptions> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HorizontalOptionsProperty, value, selector);
    public static Xamarin.Forms.Frame Margin(this Xamarin.Forms.Frame obj, Xamarin.Forms.Thickness value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MarginProperty, value);
    public static Xamarin.Forms.Frame Margin(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.Thickness> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MarginProperty, value, mode);
    public static Xamarin.Forms.Frame Margin<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Thickness> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MarginProperty, value, selector);
    public static Xamarin.Forms.Frame Navigation(this Xamarin.Forms.Frame obj, Xamarin.Forms.INavigation value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.NavigationProperty, value);
    public static Xamarin.Forms.Frame Navigation(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.INavigation> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.NavigationProperty, value, mode);
    public static Xamarin.Forms.Frame Navigation<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.INavigation> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.NavigationProperty, value, selector);
    public static Xamarin.Forms.Frame InputTransparent(this Xamarin.Forms.Frame obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.InputTransparentProperty, value);
    public static Xamarin.Forms.Frame InputTransparent(this Xamarin.Forms.Frame obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.InputTransparentProperty, value, mode);
    public static Xamarin.Forms.Frame InputTransparent<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.InputTransparentProperty, value, selector);
    public static Xamarin.Forms.Frame IsEnabled(this Xamarin.Forms.Frame obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsEnabledProperty, value);
    public static Xamarin.Forms.Frame IsEnabled(this Xamarin.Forms.Frame obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsEnabledProperty, value, mode);
    public static Xamarin.Forms.Frame IsEnabled<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsEnabledProperty, value, selector);
    public static Xamarin.Forms.Frame X(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.XProperty, value);
    public static Xamarin.Forms.Frame X(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.XProperty, value, mode);
    public static Xamarin.Forms.Frame X<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.XProperty, value, selector);
    public static Xamarin.Forms.Frame Y(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.YProperty, value);
    public static Xamarin.Forms.Frame Y(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.YProperty, value, mode);
    public static Xamarin.Forms.Frame Y<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.YProperty, value, selector);
    public static Xamarin.Forms.Frame AnchorX(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.AnchorXProperty, value);
    public static Xamarin.Forms.Frame AnchorX(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.AnchorXProperty, value, mode);
    public static Xamarin.Forms.Frame AnchorX<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.AnchorXProperty, value, selector);
    public static Xamarin.Forms.Frame AnchorY(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.AnchorYProperty, value);
    public static Xamarin.Forms.Frame AnchorY(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.AnchorYProperty, value, mode);
    public static Xamarin.Forms.Frame AnchorY<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.AnchorYProperty, value, selector);
    public static Xamarin.Forms.Frame TranslationX(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TranslationXProperty, value);
    public static Xamarin.Forms.Frame TranslationX(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TranslationXProperty, value, mode);
    public static Xamarin.Forms.Frame TranslationX<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TranslationXProperty, value, selector);
    public static Xamarin.Forms.Frame TranslationY(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TranslationYProperty, value);
    public static Xamarin.Forms.Frame TranslationY(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TranslationYProperty, value, mode);
    public static Xamarin.Forms.Frame TranslationY<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TranslationYProperty, value, selector);
    public static Xamarin.Forms.Frame Width(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.WidthProperty, value);
    public static Xamarin.Forms.Frame Width(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.WidthProperty, value, mode);
    public static Xamarin.Forms.Frame Width<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.WidthProperty, value, selector);
    public static Xamarin.Forms.Frame Height(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HeightProperty, value);
    public static Xamarin.Forms.Frame Height(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HeightProperty, value, mode);
    public static Xamarin.Forms.Frame Height<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HeightProperty, value, selector);
    public static Xamarin.Forms.Frame Rotation(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationProperty, value);
    public static Xamarin.Forms.Frame Rotation(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationProperty, value, mode);
    public static Xamarin.Forms.Frame Rotation<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationProperty, value, selector);
    public static Xamarin.Forms.Frame RotationX(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationXProperty, value);
    public static Xamarin.Forms.Frame RotationX(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationXProperty, value, mode);
    public static Xamarin.Forms.Frame RotationX<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationXProperty, value, selector);
    public static Xamarin.Forms.Frame RotationY(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationYProperty, value);
    public static Xamarin.Forms.Frame RotationY(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationYProperty, value, mode);
    public static Xamarin.Forms.Frame RotationY<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.RotationYProperty, value, selector);
    public static Xamarin.Forms.Frame Scale(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ScaleProperty, value);
    public static Xamarin.Forms.Frame Scale(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ScaleProperty, value, mode);
    public static Xamarin.Forms.Frame Scale<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ScaleProperty, value, selector);
    public static Xamarin.Forms.Frame IsVisible(this Xamarin.Forms.Frame obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsVisibleProperty, value);
    public static Xamarin.Forms.Frame IsVisible(this Xamarin.Forms.Frame obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsVisibleProperty, value, mode);
    public static Xamarin.Forms.Frame IsVisible<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsVisibleProperty, value, selector);
    public static Xamarin.Forms.Frame Opacity(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.OpacityProperty, value);
    public static Xamarin.Forms.Frame Opacity(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.OpacityProperty, value, mode);
    public static Xamarin.Forms.Frame Opacity<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.OpacityProperty, value, selector);
    public static Xamarin.Forms.Frame BackgroundColor(this Xamarin.Forms.Frame obj, Xamarin.Forms.Color value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BackgroundColorProperty, value);
    public static Xamarin.Forms.Frame BackgroundColor(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.Color> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BackgroundColorProperty, value, mode);
    public static Xamarin.Forms.Frame BackgroundColor<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Color> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BackgroundColorProperty, value, selector);
    public static Xamarin.Forms.Frame Behaviors(this Xamarin.Forms.Frame obj, System.Collections.Generic.IList<Xamarin.Forms.Behavior> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BehaviorsProperty, value);
    public static Xamarin.Forms.Frame Behaviors(this Xamarin.Forms.Frame obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.Behavior>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BehaviorsProperty, value, mode);
    public static Xamarin.Forms.Frame Behaviors<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.Behavior>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BehaviorsProperty, value, selector);
    public static Xamarin.Forms.Frame Triggers(this Xamarin.Forms.Frame obj, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase> value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TriggersProperty, value);
    public static Xamarin.Forms.Frame Triggers(this Xamarin.Forms.Frame obj, BindableValue<System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TriggersProperty, value, mode);
    public static Xamarin.Forms.Frame Triggers<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Collections.Generic.IList<Xamarin.Forms.TriggerBase>> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.TriggersProperty, value, selector);
    public static Xamarin.Forms.Frame Style(this Xamarin.Forms.Frame obj, Xamarin.Forms.Style value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.StyleProperty, value);
    public static Xamarin.Forms.Frame Style(this Xamarin.Forms.Frame obj, BindableValue<Xamarin.Forms.Style> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.StyleProperty, value, mode);
    public static Xamarin.Forms.Frame Style<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, Xamarin.Forms.Style> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.StyleProperty, value, selector);
    public static Xamarin.Forms.Frame WidthRequest(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.WidthRequestProperty, value);
    public static Xamarin.Forms.Frame WidthRequest(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.WidthRequestProperty, value, mode);
    public static Xamarin.Forms.Frame WidthRequest<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.WidthRequestProperty, value, selector);
    public static Xamarin.Forms.Frame HeightRequest(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HeightRequestProperty, value);
    public static Xamarin.Forms.Frame HeightRequest(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HeightRequestProperty, value, mode);
    public static Xamarin.Forms.Frame HeightRequest<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.HeightRequestProperty, value, selector);
    public static Xamarin.Forms.Frame MinimumWidthRequest(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MinimumWidthRequestProperty, value);
    public static Xamarin.Forms.Frame MinimumWidthRequest(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MinimumWidthRequestProperty, value, mode);
    public static Xamarin.Forms.Frame MinimumWidthRequest<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MinimumWidthRequestProperty, value, selector);
    public static Xamarin.Forms.Frame MinimumHeightRequest(this Xamarin.Forms.Frame obj, System.Double value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MinimumHeightRequestProperty, value);
    public static Xamarin.Forms.Frame MinimumHeightRequest(this Xamarin.Forms.Frame obj, BindableValue<System.Double> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MinimumHeightRequestProperty, value, mode);
    public static Xamarin.Forms.Frame MinimumHeightRequest<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Double> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.MinimumHeightRequestProperty, value, selector);
    public static Xamarin.Forms.Frame IsFocused(this Xamarin.Forms.Frame obj, System.Boolean value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsFocusedProperty, value);
    public static Xamarin.Forms.Frame IsFocused(this Xamarin.Forms.Frame obj, BindableValue<System.Boolean> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsFocusedProperty, value, mode);
    public static Xamarin.Forms.Frame IsFocused<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Boolean> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.IsFocusedProperty, value, selector);
    public static Xamarin.Forms.Frame ClassId(this Xamarin.Forms.Frame obj, System.String value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ClassIdProperty, value);
    public static Xamarin.Forms.Frame ClassId(this Xamarin.Forms.Frame obj, BindableValue<System.String> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ClassIdProperty, value, mode);
    public static Xamarin.Forms.Frame ClassId<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.String> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.ClassIdProperty, value, selector);
    public static Xamarin.Forms.Frame BindingContext(this Xamarin.Forms.Frame obj, System.Object value) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BindingContextProperty, value);
    public static Xamarin.Forms.Frame BindingContext(this Xamarin.Forms.Frame obj, BindableValue<System.Object> value, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BindingContextProperty, value, mode);
    public static Xamarin.Forms.Frame BindingContext<TFrom>(this Xamarin.Forms.Frame obj, BindableValue<TFrom> value, System.Func<TFrom, System.Object> selector) => Helpers.SetPropertyValue(obj, Xamarin.Forms.Frame.BindingContextProperty, value, selector);
  }

  public partial class ClarityBase {
    public Xamarin.Forms.ColumnDefinition ColumnDefinition => new Xamarin.Forms.ColumnDefinition();
    public Xamarin.Forms.RowDefinition RowDefinition => new Xamarin.Forms.RowDefinition();
    public Xamarin.Forms.HtmlWebViewSource HtmlWebViewSource => new Xamarin.Forms.HtmlWebViewSource();
    public Xamarin.Forms.UrlWebViewSource UrlWebViewSource => new Xamarin.Forms.UrlWebViewSource();
    public Xamarin.Forms.EventTrigger EventTrigger => new Xamarin.Forms.EventTrigger();
    public Xamarin.Forms.Trigger TriggerWith(System.Type targetType) => new Xamarin.Forms.Trigger(targetType);
    public Xamarin.Forms.DataTrigger DataTriggerWith(System.Type targetType) => new Xamarin.Forms.DataTrigger(targetType);
    public Xamarin.Forms.MultiTrigger MultiTriggerWith(System.Type targetType) => new Xamarin.Forms.MultiTrigger(targetType);
    public Xamarin.Forms.AppLinkEntry AppLinkEntry => new Xamarin.Forms.AppLinkEntry();
    public Xamarin.Forms.EntryCell EntryCell => new Xamarin.Forms.EntryCell();
    public Xamarin.Forms.MenuItem MenuItem => new Xamarin.Forms.MenuItem();
    public Xamarin.Forms.PanGestureRecognizer PanGestureRecognizer => new Xamarin.Forms.PanGestureRecognizer();
    public Xamarin.Forms.TableRoot TableRoot => new Xamarin.Forms.TableRoot();
    public Xamarin.Forms.TableRoot TableRootWith(System.String title) => new Xamarin.Forms.TableRoot(title);
    public Xamarin.Forms.TapGestureRecognizer TapGestureRecognizer => new Xamarin.Forms.TapGestureRecognizer();
    public Xamarin.Forms.TapGestureRecognizer TapGestureRecognizerWith(System.Action<Xamarin.Forms.View, System.Object> tappedCallback) => new Xamarin.Forms.TapGestureRecognizer(tappedCallback);
    public Xamarin.Forms.TapGestureRecognizer TapGestureRecognizerWith(System.Action<Xamarin.Forms.View> tappedCallback) => new Xamarin.Forms.TapGestureRecognizer(tappedCallback);
    public Xamarin.Forms.Page Page => new Xamarin.Forms.Page();
    public Xamarin.Forms.SwitchCell SwitchCell => new Xamarin.Forms.SwitchCell();
    public Xamarin.Forms.TextCell TextCell => new Xamarin.Forms.TextCell();
    public Xamarin.Forms.ViewCell ViewCell => new Xamarin.Forms.ViewCell();
    public Xamarin.Forms.TableSection TableSection => new Xamarin.Forms.TableSection();
    public Xamarin.Forms.TableSection TableSectionWith(System.String title) => new Xamarin.Forms.TableSection(title);
    public Xamarin.Forms.UriImageSource UriImageSource => new Xamarin.Forms.UriImageSource();
    public Xamarin.Forms.FileImageSource FileImageSource => new Xamarin.Forms.FileImageSource();
    public Xamarin.Forms.StreamImageSource StreamImageSource => new Xamarin.Forms.StreamImageSource();
    public Xamarin.Forms.PinchGestureRecognizer PinchGestureRecognizer => new Xamarin.Forms.PinchGestureRecognizer();
    public Xamarin.Forms.ImageCell ImageCell => new Xamarin.Forms.ImageCell();
    public Xamarin.Forms.TemplatedPage TemplatedPage => new Xamarin.Forms.TemplatedPage();
    public Xamarin.Forms.NavigationPage NavigationPage => new Xamarin.Forms.NavigationPage();
    public Xamarin.Forms.NavigationPage NavigationPageWith(Xamarin.Forms.Page root) => new Xamarin.Forms.NavigationPage(root);
    public Xamarin.Forms.ToolbarItem ToolbarItem => new Xamarin.Forms.ToolbarItem();
    public Xamarin.Forms.ToolbarItem ToolbarItemWith(System.String name, System.String icon, System.Action activated, Xamarin.Forms.ToolbarItemOrder order, System.Int32 priority) => new Xamarin.Forms.ToolbarItem(name, icon, activated, order, priority);
    public Xamarin.Forms.TableView TableView => new Xamarin.Forms.TableView();
    public Xamarin.Forms.TableView TableViewWith(Xamarin.Forms.TableRoot root) => new Xamarin.Forms.TableView(root);
    public Xamarin.Forms.ActivityIndicator ActivityIndicator => new Xamarin.Forms.ActivityIndicator();
    public Xamarin.Forms.BoxView BoxView => new Xamarin.Forms.BoxView();
    public Xamarin.Forms.Button Button => new Xamarin.Forms.Button();
    public Xamarin.Forms.DatePicker DatePicker => new Xamarin.Forms.DatePicker();
    public Xamarin.Forms.Image Image => new Xamarin.Forms.Image();
    public Xamarin.Forms.Label Label => new Xamarin.Forms.Label();
    public Xamarin.Forms.MasterDetailPage MasterDetailPage => new Xamarin.Forms.MasterDetailPage();
    public Xamarin.Forms.OpenGLView OpenGLView => new Xamarin.Forms.OpenGLView();
    public Xamarin.Forms.ProgressBar ProgressBar => new Xamarin.Forms.ProgressBar();
    public Xamarin.Forms.SearchBar SearchBar => new Xamarin.Forms.SearchBar();
    public Xamarin.Forms.Slider Slider => new Xamarin.Forms.Slider();
    public Xamarin.Forms.Slider SliderWith(System.Double min, System.Double max, System.Double val) => new Xamarin.Forms.Slider(min, max, val);
    public Xamarin.Forms.Stepper Stepper => new Xamarin.Forms.Stepper();
    public Xamarin.Forms.Stepper StepperWith(System.Double min, System.Double max, System.Double val, System.Double increment) => new Xamarin.Forms.Stepper(min, max, val, increment);
    public Xamarin.Forms.Switch Switch => new Xamarin.Forms.Switch();
    public Xamarin.Forms.TimePicker TimePicker => new Xamarin.Forms.TimePicker();
    public Xamarin.Forms.WebView WebView => new Xamarin.Forms.WebView();
    public Xamarin.Forms.Picker Picker => new Xamarin.Forms.Picker();
    public Xamarin.Forms.Internals.NavigationMenu NavigationMenu => new Xamarin.Forms.Internals.NavigationMenu();
    public Xamarin.Forms.ContentPresenter ContentPresenter => new Xamarin.Forms.ContentPresenter();
    public Xamarin.Forms.TemplatedView TemplatedView => new Xamarin.Forms.TemplatedView();
    public Xamarin.Forms.CarouselPage CarouselPage => new Xamarin.Forms.CarouselPage();
    public Xamarin.Forms.ListView ListView => new Xamarin.Forms.ListView();
    public Xamarin.Forms.ListView ListViewWith(Xamarin.Forms.ListViewCachingStrategy cachingStrategy) => new Xamarin.Forms.ListView(cachingStrategy);
    public Xamarin.Forms.Editor Editor => new Xamarin.Forms.Editor();
    public Xamarin.Forms.Entry Entry => new Xamarin.Forms.Entry();
    public Xamarin.Forms.ScrollView ScrollView => new Xamarin.Forms.ScrollView();
    public Xamarin.Forms.TabbedPage TabbedPage => new Xamarin.Forms.TabbedPage();
    public Xamarin.Forms.ContentPage ContentPage => new Xamarin.Forms.ContentPage();
    public Xamarin.Forms.AbsoluteLayout AbsoluteLayout => new Xamarin.Forms.AbsoluteLayout();
    public Xamarin.Forms.ContentView ContentView => new Xamarin.Forms.ContentView();
    public Xamarin.Forms.RelativeLayout RelativeLayout => new Xamarin.Forms.RelativeLayout();
    public Xamarin.Forms.StackLayout StackLayout => new Xamarin.Forms.StackLayout();
    public Xamarin.Forms.Grid Grid => new Xamarin.Forms.Grid();
    public Xamarin.Forms.Frame Frame => new Xamarin.Forms.Frame();
  }

}
